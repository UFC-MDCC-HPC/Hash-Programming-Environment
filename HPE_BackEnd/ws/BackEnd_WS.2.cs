// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v4.0.30319.17020
//


/// <remarks/>
[System.Web.Services.WebServiceBinding(Name="BackEnd_WSSoap", Namespace="http://backend.hPE/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BackEnd_WS : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback getSiteNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback deployHashComponentOperationCompleted;
    
    private System.Threading.SendOrPostCallback deployHashConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback readEnvironmentOperationCompleted;
    
    private System.Threading.SendOrPostCallback readCatalogOperationCompleted;
    
    private System.Threading.SendOrPostCallback hostsOperationCompleted;
    
    private System.Threading.SendOrPostCallback openSessionOperationCompleted;
    
    private System.Threading.SendOrPostCallback getPortsOperationCompleted;
    
    private System.Threading.SendOrPostCallback closeSessionOperationCompleted;
    
    private System.Threading.SendOrPostCallback runApplicationOperationCompleted;
    
    private System.Threading.SendOrPostCallback createComponentInstanceOperationCompleted;
    
    public BackEnd_WS() {
        this.Url = "http://localhost:8081/BackEndWS.asmx";
    }
    
    public event getSiteNameCompletedEventHandler getSiteNameCompleted;
    
    public event deployHashComponentCompletedEventHandler deployHashComponentCompleted;
    
    public event deployHashConfigurationCompletedEventHandler deployHashConfigurationCompleted;
    
    public event readEnvironmentCompletedEventHandler readEnvironmentCompleted;
    
    public event readCatalogCompletedEventHandler readCatalogCompleted;
    
    public event hostsCompletedEventHandler hostsCompleted;
    
    public event openSessionCompletedEventHandler openSessionCompleted;
    
    public event getPortsCompletedEventHandler getPortsCompleted;
    
    public event closeSessionCompletedEventHandler closeSessionCompleted;
    
    public event runApplicationCompletedEventHandler runApplicationCompleted;
    
    public event createComponentInstanceCompletedEventHandler createComponentInstanceCompleted;
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/getSiteName", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string getSiteName() {
        object[] results = this.Invoke("getSiteName", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BegingetSiteName(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getSiteName", new object[0], callback, asyncState);
    }
    
    public string EndgetSiteName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void getSiteNameAsync() {
        this.getSiteNameAsync(null);
    }
    
    public void getSiteNameAsync(object userState) {
        if ((this.getSiteNameOperationCompleted == null)) {
            this.getSiteNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSiteNameCompleted);
        }
        this.InvokeAsync("getSiteName", new object[0], this.getSiteNameOperationCompleted, userState);
    }
    
    private void OngetSiteNameCompleted(object arg) {
        if ((this.getSiteNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getSiteNameCompleted(this, new getSiteNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/deployHashComponent", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string deployHashComponent(byte[] data, string userName, string password, string curDir) {
        object[] results = this.Invoke("deployHashComponent", new object[] {
                    data,
                    userName,
                    password,
                    curDir});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BegindeployHashComponent(byte[] data, string userName, string password, string curDir, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deployHashComponent", new object[] {
                    data,
                    userName,
                    password,
                    curDir}, callback, asyncState);
    }
    
    public string EnddeployHashComponent(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void deployHashComponentAsync(byte[] data, string userName, string password, string curDir) {
        this.deployHashComponentAsync(data, userName, password, curDir, null);
    }
    
    public void deployHashComponentAsync(byte[] data, string userName, string password, string curDir, object userState) {
        if ((this.deployHashComponentOperationCompleted == null)) {
            this.deployHashComponentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeployHashComponentCompleted);
        }
        this.InvokeAsync("deployHashComponent", new object[] {
                    data,
                    userName,
                    password,
                    curDir}, this.deployHashComponentOperationCompleted, userState);
    }
    
    private void OndeployHashComponentCompleted(object arg) {
        if ((this.deployHashComponentCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deployHashComponentCompleted(this, new deployHashComponentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/deployHashConfiguration", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string deployHashConfiguration(byte[] data, byte[] hcl_data, string userName, string password, string curDir) {
        object[] results = this.Invoke("deployHashConfiguration", new object[] {
                    data,
                    hcl_data,
                    userName,
                    password,
                    curDir});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BegindeployHashConfiguration(byte[] data, byte[] hcl_data, string userName, string password, string curDir, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("deployHashConfiguration", new object[] {
                    data,
                    hcl_data,
                    userName,
                    password,
                    curDir}, callback, asyncState);
    }
    
    public string EnddeployHashConfiguration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void deployHashConfigurationAsync(byte[] data, byte[] hcl_data, string userName, string password, string curDir) {
        this.deployHashConfigurationAsync(data, hcl_data, userName, password, curDir, null);
    }
    
    public void deployHashConfigurationAsync(byte[] data, byte[] hcl_data, string userName, string password, string curDir, object userState) {
        if ((this.deployHashConfigurationOperationCompleted == null)) {
            this.deployHashConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeployHashConfigurationCompleted);
        }
        this.InvokeAsync("deployHashConfiguration", new object[] {
                    data,
                    hcl_data,
                    userName,
                    password,
                    curDir}, this.deployHashConfigurationOperationCompleted, userState);
    }
    
    private void OndeployHashConfigurationCompleted(object arg) {
        if ((this.deployHashConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.deployHashConfigurationCompleted(this, new deployHashConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/readEnvironment", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public byte[] readEnvironment() {
        object[] results = this.Invoke("readEnvironment", new object[0]);
        return ((byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginreadEnvironment(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("readEnvironment", new object[0], callback, asyncState);
    }
    
    public byte[] EndreadEnvironment(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    public void readEnvironmentAsync() {
        this.readEnvironmentAsync(null);
    }
    
    public void readEnvironmentAsync(object userState) {
        if ((this.readEnvironmentOperationCompleted == null)) {
            this.readEnvironmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreadEnvironmentCompleted);
        }
        this.InvokeAsync("readEnvironment", new object[0], this.readEnvironmentOperationCompleted, userState);
    }
    
    private void OnreadEnvironmentCompleted(object arg) {
        if ((this.readEnvironmentCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.readEnvironmentCompleted(this, new readEnvironmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/readCatalog", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string readCatalog() {
        object[] results = this.Invoke("readCatalog", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginreadCatalog(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("readCatalog", new object[0], callback, asyncState);
    }
    
    public string EndreadCatalog(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void readCatalogAsync() {
        this.readCatalogAsync(null);
    }
    
    public void readCatalogAsync(object userState) {
        if ((this.readCatalogOperationCompleted == null)) {
            this.readCatalogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreadCatalogCompleted);
        }
        this.InvokeAsync("readCatalog", new object[0], this.readCatalogOperationCompleted, userState);
    }
    
    private void OnreadCatalogCompleted(object arg) {
        if ((this.readCatalogCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.readCatalogCompleted(this, new readCatalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/hosts", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string hosts() {
        object[] results = this.Invoke("hosts", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult Beginhosts(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("hosts", new object[0], callback, asyncState);
    }
    
    public string Endhosts(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void hostsAsync() {
        this.hostsAsync(null);
    }
    
    public void hostsAsync(object userState) {
        if ((this.hostsOperationCompleted == null)) {
            this.hostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhostsCompleted);
        }
        this.InvokeAsync("hosts", new object[0], this.hostsOperationCompleted, userState);
    }
    
    private void OnhostsCompleted(object arg) {
        if ((this.hostsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.hostsCompleted(this, new hostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/openSession", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string openSession(string session_id) {
        object[] results = this.Invoke("openSession", new object[] {
                    session_id});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginopenSession(string session_id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("openSession", new object[] {
                    session_id}, callback, asyncState);
    }
    
    public string EndopenSession(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void openSessionAsync(string session_id) {
        this.openSessionAsync(session_id, null);
    }
    
    public void openSessionAsync(string session_id, object userState) {
        if ((this.openSessionOperationCompleted == null)) {
            this.openSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenSessionCompleted);
        }
        this.InvokeAsync("openSession", new object[] {
                    session_id}, this.openSessionOperationCompleted, userState);
    }
    
    private void OnopenSessionCompleted(object arg) {
        if ((this.openSessionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.openSessionCompleted(this, new openSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/getPorts", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] getPorts(string session_id, string instance_id) {
        object[] results = this.Invoke("getPorts", new object[] {
                    session_id,
                    instance_id});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BegingetPorts(string session_id, string instance_id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getPorts", new object[] {
                    session_id,
                    instance_id}, callback, asyncState);
    }
    
    public string[] EndgetPorts(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void getPortsAsync(string session_id, string instance_id) {
        this.getPortsAsync(session_id, instance_id, null);
    }
    
    public void getPortsAsync(string session_id, string instance_id, object userState) {
        if ((this.getPortsOperationCompleted == null)) {
            this.getPortsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPortsCompleted);
        }
        this.InvokeAsync("getPorts", new object[] {
                    session_id,
                    instance_id}, this.getPortsOperationCompleted, userState);
    }
    
    private void OngetPortsCompleted(object arg) {
        if ((this.getPortsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getPortsCompleted(this, new getPortsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/closeSession", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void closeSession(string session_id) {
        this.Invoke("closeSession", new object[] {
                    session_id});
    }
    
    public System.IAsyncResult BegincloseSession(string session_id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("closeSession", new object[] {
                    session_id}, callback, asyncState);
    }
    
    public void EndcloseSession(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void closeSessionAsync(string session_id) {
        this.closeSessionAsync(session_id, null);
    }
    
    public void closeSessionAsync(string session_id, object userState) {
        if ((this.closeSessionOperationCompleted == null)) {
            this.closeSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseSessionCompleted);
        }
        this.InvokeAsync("closeSession", new object[] {
                    session_id}, this.closeSessionOperationCompleted, userState);
    }
    
    private void OncloseSessionCompleted(object arg) {
        if ((this.closeSessionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.closeSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/runApplication", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] runApplication(string instantiator_string, string session) {
        object[] results = this.Invoke("runApplication", new object[] {
                    instantiator_string,
                    session});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginrunApplication(string instantiator_string, string session, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("runApplication", new object[] {
                    instantiator_string,
                    session}, callback, asyncState);
    }
    
    public string[] EndrunApplication(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void runApplicationAsync(string instantiator_string, string session) {
        this.runApplicationAsync(instantiator_string, session, null);
    }
    
    public void runApplicationAsync(string instantiator_string, string session, object userState) {
        if ((this.runApplicationOperationCompleted == null)) {
            this.runApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrunApplicationCompleted);
        }
        this.InvokeAsync("runApplication", new object[] {
                    instantiator_string,
                    session}, this.runApplicationOperationCompleted, userState);
    }
    
    private void OnrunApplicationCompleted(object arg) {
        if ((this.runApplicationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.runApplicationCompleted(this, new runApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://backend.hPE/createComponentInstance", RequestNamespace="http://backend.hPE/", ResponseNamespace="http://backend.hPE/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void createComponentInstance(string session_id_string, string instance_name, string instantiator_string) {
        this.Invoke("createComponentInstance", new object[] {
                    session_id_string,
                    instance_name,
                    instantiator_string});
    }
    
    public System.IAsyncResult BegincreateComponentInstance(string session_id_string, string instance_name, string instantiator_string, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("createComponentInstance", new object[] {
                    session_id_string,
                    instance_name,
                    instantiator_string}, callback, asyncState);
    }
    
    public void EndcreateComponentInstance(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void createComponentInstanceAsync(string session_id_string, string instance_name, string instantiator_string) {
        this.createComponentInstanceAsync(session_id_string, instance_name, instantiator_string, null);
    }
    
    public void createComponentInstanceAsync(string session_id_string, string instance_name, string instantiator_string, object userState) {
        if ((this.createComponentInstanceOperationCompleted == null)) {
            this.createComponentInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateComponentInstanceCompleted);
        }
        this.InvokeAsync("createComponentInstance", new object[] {
                    session_id_string,
                    instance_name,
                    instantiator_string}, this.createComponentInstanceOperationCompleted, userState);
    }
    
    private void OncreateComponentInstanceCompleted(object arg) {
        if ((this.createComponentInstanceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.createComponentInstanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

public partial class getSiteNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getSiteNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void getSiteNameCompletedEventHandler(object sender, getSiteNameCompletedEventArgs args);

public partial class deployHashComponentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deployHashComponentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void deployHashComponentCompletedEventHandler(object sender, deployHashComponentCompletedEventArgs args);

public partial class deployHashConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal deployHashConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void deployHashConfigurationCompletedEventHandler(object sender, deployHashConfigurationCompletedEventArgs args);

public partial class readEnvironmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal readEnvironmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

public delegate void readEnvironmentCompletedEventHandler(object sender, readEnvironmentCompletedEventArgs args);

public partial class readCatalogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal readCatalogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void readCatalogCompletedEventHandler(object sender, readCatalogCompletedEventArgs args);

public partial class hostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal hostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void hostsCompletedEventHandler(object sender, hostsCompletedEventArgs args);

public partial class openSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal openSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void openSessionCompletedEventHandler(object sender, openSessionCompletedEventArgs args);

public partial class getPortsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getPortsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void getPortsCompletedEventHandler(object sender, getPortsCompletedEventArgs args);

public delegate void closeSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class runApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal runApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void runApplicationCompletedEventHandler(object sender, runApplicationCompletedEventArgs args);

public delegate void createComponentInstanceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
