<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009f4900c74d709e91044fff72de9be2a3c89bf321d6c449b067befbf0d1b25f891aa3ad900edc5443b1ab444d4b1760d225ec735dea7bc55792e5bbbe559ad5bc8f11b22adcf232b175f45c6832b17be7ab3156e1bd3fa4e8f8ab7b553c76f3eb29efc0b5c195bb51bbc94bdb6e4314081527d4562f4cb8cb6427b0c070d4b391" isAbstract="true" kind="Facet" name="Solving" packagePath="linearsystems.library.facet.PETSc">
    <baseType>
      <extensionType>
        <extends>true</extends>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c7d4c716602824869d87864b01913a9c3ecdb871521f8e50ee9cde83ee955c99c871c5cc4a85978335f30c23957ea72a6d534d3c2ce9c4cba5ddc33f6c159a1ace979121ca79b0af9a9752750426e0cbded7aec28b4df226efc593887a31225cdff1293d2b7a527b8c3bf927bf38bf51d75a7016b8da36a7e06d439a464187c2" localRef="base" location="linearsystems.library.facet.Solving/Solving.hpe" name="Solving" package="linearsystems.library.facet" version="1.0.0.0">
        <visualDescription h="78" w="168" x="212" y="236">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="library" varName="L"/>
        <unitBounds uRef="solving_facet">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000b3657883f7a334d79610d9c7fb3f41ea51b3d644352159d132c379c1a6e285688f32c3b40755bec6b6d4b3f072d71511664ced1be8f5e8ac287dbda794121075cca2402fd73f335bea37cbb6612fd23b23d3ee7990c6403c5721ee160d8bdbaaefd0bc0d38d75830381bf221ad40126cbe93768ee109477aac2b56d10ca97ab1" localRef="petsc_lib" location="linearsystems.qualifier.PETSc/PETSc.hpe" name="PETSc" package="linearsystems.qualifier" parameter_id="library" exposed="false">
      <visualDescription h="30" w="50" x="122" y="392">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="petsc">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="petsc_lib" varName="L"/>
    <parameter componentRef="petsc_lib" formFieldId="library" varName="L"/>
    <interface iRef="IPETScSolving" nArgs="1">
      <slice isRef="library_unit">
        <originRef cRef="library" iRef="IPETSc"/>
        <visualDescription h="10" w="10" x="19" y="23"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* AUTOMATICALLY GENERATE CODE */&#xA;&#xA;using br.ufc.hpe.kinds;&#xA;using linearsystems.qualifier.PETSc;&#xA;using linearsystems.library.facet.Solving;&#xA;&#xA;namespace linearsystems.library.facet.PETSc.Solving { &#xA;&#xA;public interface BaseIPETScSolving&lt;L> : BaseISolvingFacet&lt;L>, IFacetKind &#xA;where L:IPETSc&#xA;{&#xA;&#xA;&#xA;&#xA;} // end main interface &#xA;&#xA;} // end namespace &#xA;" fileType="library" name="BaseIPETScSolving.cs" srcType="base" uri="linearsystems.library.facet.PETSc.Solving/bin/1.0.0.0/BaseIPETScSolving.dll" versionId="1.0.0.0">
          <dependency>linearsystems.qualifier.PETSc/bin/1.0.0.0/IPETSc.dll</dependency>
          <dependency>linearsystems.library.facet.Solving/bin/1.0.0.0/BaseISolvingFacet.dll</dependency>
        </file>
        <file contents="using br.ufc.hpe.kinds;&#xA;using linearsystems.qualifier.PETSc;&#xA;using linearsystems.library.facet.Solving;&#xA;using MPI;&#xA;&#xA;namespace linearsystems.library.facet.PETSc.Solving { &#xA;using PetscInt = System.Int32;&#xA;  using PetscMPIInt = System.Int32;&#xA;  using PetscScalar = System.Int32;&#xA;  using PetscReal = System.Single;&#xA;  using PetscLogDouble = System.Double;&#xA;  using PetscCookie = System.Int32;&#xA;  using PetscErrorCode = System.Int32;&#xA;  using MatSolverPackage = System.String;&#xA;  using ISColoringValue = System.UInt32;&#xA;  using MatType = System.String;&#xA;  using KSPType = System.String;&#xA;&#xA;public interface IPETScSolving&lt;L> : BaseIPETScSolving&lt;L>, ISolvingFacet&lt;L>&#xA;where L:IPETSc&#xA;{&#xA;     PetscErrorCode  KSPCreate(Intracommunicator comm,KSP a);&#xA;&#x9; PetscErrorCode  KSPSetType(KSP a,KSPType b);&#xA;&#x9; PetscErrorCode  KSPSetUp(KSP a);&#xA;&#x9; PetscErrorCode  KSPSetUpOnBlocks(KSP a);&#xA;&#x9; PetscErrorCode  KSPSolve(KSP a,Vec b,Vec c);&#xA;&#x9; PetscErrorCode  KSPSolveTranspose(KSP a,Vec b,Vec c);&#xA;&#x9; PetscErrorCode  KSPDestroy(KSP a);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPRegisterAll(char[] a);&#xA;&#x9; PetscErrorCode  KSPRegisterDestroy();&#xA;&#x9; //PetscErrorCode  KSPRegister(char[] a,char[] b,char[] c,PetscErrorCode (*)(KSP));&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPGetType(KSP a,KSPType b);&#xA;&#x9; PetscErrorCode  KSPSetPreconditionerSide(KSP a,PCSide b);&#xA;&#x9; PetscErrorCode  KSPGetPreconditionerSide(KSP a,PCSide b);&#xA;&#x9; unsafe PetscErrorCode  KSPGetTolerances(KSP a,PetscReal* b,PetscReal* c,PetscReal* d,PetscInt* e);&#xA;&#x9; PetscErrorCode  KSPSetTolerances(KSP a,PetscReal b,PetscReal c,PetscReal d,PetscInt e);&#xA;&#x9; PetscErrorCode  KSPSetInitialGuessNonzero(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPGetInitialGuessNonzero(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPSetInitialGuessKnoll(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPGetInitialGuessKnoll(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPGetComputeEigenvalues(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPSetComputeEigenvalues(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPGetComputeSingularValues(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPSetComputeSingularValues(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPGetRhs(KSP a,Vec b);&#xA;&#x9; PetscErrorCode  KSPGetSolution(KSP a,Vec b);&#xA;&#x9; unsafe PetscErrorCode  KSPGetResidualNorm(KSP a,PetscReal* b);&#xA;&#x9; unsafe PetscErrorCode  KSPGetIterationNumber(KSP a,PetscInt* v);&#xA;&#x9; PetscErrorCode  KSPSetNullSpace(KSP a,MatNullSpace b);&#xA;&#x9; PetscErrorCode  KSPGetNullSpace(KSP a,MatNullSpace b);&#xA;&#x9; unsafe PetscErrorCode  KSPGetVecs(KSP a,PetscInt b,Vec[] c,PetscInt d,Vec[] e);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPSetPC(KSP a,PC b);&#xA;&#x9; PetscErrorCode  KSPGetPC(KSP a,PC b);&#xA;&#x9;&#xA;&#x9; //PetscErrorCode  KSPMonitorSet(KSP a,PetscErrorCode (*)(KSP,PetscInt,PetscReal,void*),void *,PetscErrorCode (*)(void*));&#xA;&#x9; PetscErrorCode  KSPMonitorCancel(KSP a);&#xA;&#x9; unsafe PetscErrorCode  KSPGetMonitorContext(KSP a,void** b);&#xA;&#x9; unsafe PetscErrorCode  KSPGetResidualHistory(KSP a,PetscReal*[] b,PetscInt* c);&#xA;&#x9; PetscErrorCode  KSPSetResidualHistory(KSP a,PetscReal[] b,PetscInt c,PetscTruth d);&#xA;&#x9;&#xA;&#x9;/* not sure where to put this */&#xA;&#x9; PetscErrorCode  PCKSPGetKSP(PC a,KSP b);&#xA;&#x9; unsafe PetscErrorCode  PCBJacobiGetSubKSP(PC a,PetscInt* b,PetscInt* c,KSP[] d);&#xA;&#x9; unsafe PetscErrorCode  PCASMGetSubKSP(PC a,PetscInt* b,PetscInt* c,KSP[] d);&#xA;&#x9; unsafe PetscErrorCode  PCFieldSplitGetSubKSP(PC a,PetscInt* b,KSP[] c);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  PCGalerkinGetKSP(PC a,KSP b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPBuildSolution(KSP a,Vec b,Vec c);&#xA;&#x9; PetscErrorCode  KSPBuildResidual(KSP a,Vec b,Vec c,Vec d);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPRichardsonSetScale(KSP a,PetscReal b);&#xA;&#x9; PetscErrorCode  KSPChebychevSetEigenvalues(KSP a,PetscReal b,PetscReal c);&#xA;&#x9; unsafe PetscErrorCode  KSPComputeExtremeSingularValues(KSP a,PetscReal* b,PetscReal* c);&#xA;&#x9; unsafe PetscErrorCode  KSPComputeEigenvalues(KSP a,PetscInt b,PetscReal* c,PetscReal* d,PetscInt* e);&#xA;&#x9; unsafe PetscErrorCode  KSPComputeEigenvaluesExplicitly(KSP a,PetscInt b,PetscReal* c,PetscReal* d);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPGMRESSetRestart(KSP a, PetscInt b);&#xA;&#x9; PetscErrorCode  KSPGMRESSetHapTol(KSP a,PetscReal b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPGMRESSetPreAllocateVectors(KSP a);&#xA;&#x9; //PetscErrorCode  KSPGMRESSetOrthogonalization(KSP a,PetscErrorCode (*)(KSP,PetscInt));&#xA;&#x9; PetscErrorCode  KSPGMRESModifiedGramSchmidtOrthogonalization(KSP a,PetscInt b);&#xA;&#x9; PetscErrorCode  KSPGMRESClassicalGramSchmidtOrthogonalization(KSP a,PetscInt b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPLGMRESSetAugDim(KSP a,PetscInt b);&#xA;&#x9; PetscErrorCode  KSPLGMRESSetConstant(KSP a);&#xA;&#x9; &#xA;&#x9;  PetscErrorCode  KSPGMRESSetCGSRefinementType(KSP a,KSPGMRESCGSRefinementType b);&#xA;&#xA;&#x9; unsafe PetscErrorCode  KSPFGMRESModifyPCNoChange(KSP a,PetscInt b,PetscInt c,PetscReal d,void* f);&#xA;&#x9; unsafe PetscErrorCode  KSPFGMRESModifyPCKSP(KSP a,PetscInt b,PetscInt c,PetscReal d,void* e);&#xA;&#x9; //PetscErrorCode  KSPFGMRESSetModifyPC(KSP,PetscErrorCode (*)(KSP,PetscInt,PetscInt,PetscReal,void*),void*,PetscErrorCode(*)(void*));&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPQCGSetTrustRegionRadius(KSP a,PetscReal b);&#xA;&#x9; unsafe PetscErrorCode  KSPQCGGetQuadratic(KSP a,PetscReal* b);&#xA;&#x9; unsafe PetscErrorCode  KSPQCGGetTrialStepNorm(KSP a,PetscReal* b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPBCGSLSetXRes(KSP a,PetscReal b);&#xA;&#x9; PetscErrorCode  KSPBCGSLSetPol(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPBCGSLSetEll(KSP a,int b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPSetFromOptions(KSP a);&#xA;&#x9; //PetscErrorCode  KSPAddOptionsChecker(PetscErrorCode (*)(KSP));&#xA;&#x9;&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorSingularValue(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorDefault(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorRange(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorTrueResidualNorm(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorDefaultShort(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorSolution(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; unsafe PetscErrorCode  KSPGMRESMonitorKrylov(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPUnwindPreconditioner(KSP a,Vec b,Vec c);&#xA;&#x9; PetscErrorCode  KSPDefaultBuildSolution(KSP a,Vec b,Vec c);&#xA;&#x9; PetscErrorCode  KSPDefaultBuildResidual(KSP a,Vec b,Vec c,Vec d);&#xA;&#x9; PetscErrorCode  KSPInitialResidual(KSP a,Vec b,Vec c,Vec d,Vec e,Vec f);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPSetOperators(KSP a,Mat b,Mat c,MatStructure d);&#xA;&#x9; PetscErrorCode  KSPGetOperators(KSP a,Mat b,Mat c,MatStructure d);&#xA;&#x9; PetscErrorCode  KSPGetOperatorsSet(KSP a,PetscTruth b,PetscTruth c);&#xA;&#x9; PetscErrorCode  KSPSetOptionsPrefix(KSP a,char[] b);&#xA;&#x9; PetscErrorCode  KSPAppendOptionsPrefix(KSP a,char[] b);&#xA;&#x9; unsafe PetscErrorCode  KSPGetOptionsPrefix(KSP a,char*[] b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPSetDiagonalScale(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPGetDiagonalScale(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPSetDiagonalScaleFix(KSP a,PetscTruth b);&#xA;&#x9; PetscErrorCode  KSPGetDiagonalScaleFix(KSP a,PetscTruth b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPView(KSP a,PetscViewer b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPLSQRSetStandardErrorVec(KSP a,Vec b);&#xA;&#x9; PetscErrorCode  KSPLSQRGetStandardErrorVec(KSP a,Vec b);&#xA;&#x9; &#xA;&#x9; PetscErrorCode  KSPSetNormType(KSP a,KSPNormType b);&#xA;&#x9; PetscErrorCode  KSPGetNormType(KSP a,KSPNormType b);&#xA;&#x9; PetscErrorCode  KSPSetCheckNormIteration(KSP a,PetscInt b);&#xA;&#x9; PetscErrorCode  KSPSetLagNorm(KSP a,PetscTruth b);&#xA;&#x9;&#xA;&#x9; //PetscErrorCode  KSPSetConvergenceTest(KSP,PetscErrorCode (*)(KSP,PetscInt,PetscReal,KSPConvergedReason*,void*),void *,PetscErrorCode (*)(void*));&#xA;&#x9; unsafe PetscErrorCode  KSPGetConvergenceContext(KSP a,void** b);&#xA;&#x9; unsafe PetscErrorCode  KSPDefaultConverged(KSP a,PetscInt b,PetscReal c,KSPConvergedReason d,void* e);&#xA;&#x9; unsafe PetscErrorCode  KSPDefaultConvergedDestroy(void* a);&#xA;&#x9; unsafe PetscErrorCode  KSPDefaultConvergedCreate(void** a);&#xA;&#x9; PetscErrorCode  KSPDefaultConvergedSetUIRNorm(KSP a);&#xA;&#x9; PetscErrorCode  KSPDefaultConvergedSetUMIRNorm(KSP a);&#xA;&#x9; unsafe PetscErrorCode  KSPSkipConverged(KSP a,PetscInt b,PetscReal c,KSPConvergedReason d,void* e);&#xA;&#x9; PetscErrorCode  KSPGetConvergedReason(KSP a,KSPConvergedReason b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPComputeExplicitOperator(KSP a,Mat n);&#xA;&#x9; PetscErrorCode  KSPCGSetType(KSP a,KSPCGType b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPNASHSetRadius(KSP a,PetscReal b);&#xA;&#x9; unsafe PetscErrorCode  KSPNASHGetNormD(KSP a,PetscReal* b);&#xA;&#x9; unsafe PetscErrorCode  KSPNASHGetObjFcn(KSP a,PetscReal* b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPSTCGSetRadius(KSP a,PetscReal b);&#xA;&#x9; unsafe PetscErrorCode  KSPSTCGGetNormD(KSP a,PetscReal* b);&#xA;&#x9; unsafe PetscErrorCode  KSPSTCGGetObjFcn(KSP a,PetscReal* b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPGLTRSetRadius(KSP a,PetscReal b);&#xA;&#x9; unsafe PetscErrorCode  KSPGLTRGetNormD(KSP a,PetscReal* b);&#xA;&#x9; unsafe PetscErrorCode  KSPGLTRGetObjFcn(KSP a,PetscReal* b);&#xA;&#x9; unsafe PetscErrorCode  KSPGLTRGetMinEig(KSP a,PetscReal* b);&#xA;&#x9; unsafe PetscErrorCode  KSPGLTRGetLambda(KSP a,PetscReal* b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPPythonSetType(KSP a,char[] b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  PCPreSolve(PC a,KSP b);&#xA;&#x9; PetscErrorCode  PCPostSolve(PC a,KSP b);&#xA;&#x9;&#xA;&#x9; PetscErrorCode  KSPMonitorLGCreate(char[] a,char[] b,int c,int d,int e,int f,PetscDrawLG g);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorLG(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; PetscErrorCode  KSPMonitorLGDestroy(PetscDrawLG a);&#xA;&#x9; PetscErrorCode  KSPMonitorLGTrueResidualNormCreate(Intracommunicator comm,char[] a,char[] b,int c,int d,int e,int f,PetscDrawLG g);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorLGTrueResidualNorm(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; PetscErrorCode  KSPMonitorLGTrueResidualNormDestroy(PetscDrawLG a);&#xA;&#x9; PetscErrorCode  KSPMonitorLGRangeCreate(char[] a,char[] b,int c,int d,int e,int f,PetscDrawLG g);&#xA;&#x9; unsafe PetscErrorCode  KSPMonitorLGRange(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; PetscErrorCode  KSPMonitorLGRangeDestroy(PetscDrawLG a);&#xA;&#x9;&#xA;&#x9; //preciso ver isso PetscErrorCode  PCShellSetPreSolve(PC,PetscErrorCode (*)(void*,KSP,Vec,Vec));&#xA;&#x9; //preciso ver isso PetscErrorCode  PCShellSetPostSolve(PC,PetscErrorCode (*)(void*,KSP,Vec,Vec));&#xA;&#x9;&#xA;&#x9; unsafe PetscErrorCode  MatMFFDKSPMonitor(KSP a,PetscInt b,PetscReal c,void* d);&#xA;&#x9; &#xA;&#xA;} // end main interface &#xA;&#xA;} // end namespace &#xA;" fileType="library" name="IPETScSolving.cs" srcType="user" uri="linearsystems.library.facet.PETSc.Solving/bin/1.0.0.0/IPETScSolving.dll" versionId="1.0.0.0">
          <dependency>linearsystems.qualifier.PETSc/bin/1.0.0.0/IPETSc.dll</dependency>
          <dependency>%WORKSPACE/linearsystems.library.facet.PETSc.Solving/bin/1.0.0.0/BaseIPETScSolving.dll</dependency>
          <dependency>linearsystems.library.facet.Solving/bin/1.0.0.0/ISolvingFacet.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="156" y="131">
        <color b="250" g="230" r="230"/>
      </visualDescription>
      <parameter iname="IPETSc" order="0" parid="L" uname="petsc" varid="library"/>
    </interface>
    <unit iRef="IPETScSolving" private="false" uRef="solving_facet" visibleInterface="true">
      <super cRef="base" uRef="solving_facet"/>
      <slices cRef="library" replica="0" uRef="petsc" sliceName="library_unit" transitive="false">
        <visualDescription h="10" w="10" x="19" y="23"/>
      </slices>
      <visualDescription h="40" w="80" x="73" y="346"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="N" varId="N">
      <originRef>base</originRef>
      <originRef>library</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="solving_facet"/>
      <visualDescription h="20" w="20" x="44" y="168"/>
    </enumerator>
  </componentInfo>
</component:component>