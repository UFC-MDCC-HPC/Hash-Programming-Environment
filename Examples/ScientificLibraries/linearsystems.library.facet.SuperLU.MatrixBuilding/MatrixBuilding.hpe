<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009fc024784ac02932f68b69f2626758196f555797f613687202d4b0615975b1b663293c20ef499b1fc55e62eab517533f1dbba9634b0c7e1ad3432d0c4f400c760a16134d453c1d907e47975814d2f5bdef6837e7985eaebc37097b334a5d22953d5072c5afdb1fa79e9881de31775bb9a3e43566b22d9f539dc3c108fa7782ab" isAbstract="true" kind="Facet" name="MatrixBuilding" packagePath="linearsystems.library.facet.SuperLU">
    <baseType>
      <extensionType>
        <extends>true</extends>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c7d2480a928182fdc559cfaceb04c06a4580bcf1927ba1fcff8bb1304487972fc71e7795a3bcf8bcede64ae2ec054073da40285664d78918efc5733d4e270c44cc46c69c89338853bd9a507166d0526cc48f699c3e9e484b2e7e80c45dae8459f6272d49de852411b2e534f62d22ed68c4e83a3aade31bf74825abfdb15022b8" localRef="base" location="linearsystems.library.facet.MatrixBuilding/MatrixBuilding.hpe" name="MatrixBuilding" package="linearsystems.library.facet" version="1.0.0.0">
        <visualDescription h="64" w="199" x="56" y="247">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="library" varName="L"/>
        <unitBounds uRef="matrixbuilding_facet">
          <visualDescription h="10" w="10" x="38" y="40"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000b3657883f7a334d79610d9c7fb3f41ea51b3d644352159d132c379c1a6e285688f32c3b40755bec6b6d4b3f072d71511664ced1be8f5e8ac287dbda794121075cca2402fd73f335bea37cbb6612fd23b23d3ee7990c6403c5721ee160d8bdbaaefd0bc0d38d75830381bf221ad40126cbe93768ee109477aac2b56d10ca97ab1" localRef="superlu_lib" location="linearsystems.qualifier.SuperLU/SuperLU.hpe" name="SuperLU" package="linearsystems.qualifier" parameter_id="library" exposed="false">
      <visualDescription h="44" w="128" x="131" y="365">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="superlu">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="superlu_lib" varName="L"/>
    <parameter componentRef="superlu_lib" formFieldId="library" varName="L"/>
    <interface iRef="ISuperLUMatrixBuilding" nArgs="1">
      <slice isRef="library_unit">
        <originRef cRef="library" iRef="ISuperLU"/>
        <visualDescription h="10" w="10" x="71" y="24"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* AUTOMATICALLY GENERATE CODE */&#xA;&#xA;using br.ufc.hpe.kinds;&#xA;using linearsystems.qualifier.SuperLU;&#xA;using linearsystems.library.facet.MatrixBuilding;&#xA;&#xA;namespace linearsystems.library.facet.SuperLU.MatrixBuilding { &#xA;&#xA;public interface BaseISuperLUMatrixBuilding&lt;L> : BaseIMatrixBuildingFacet&lt;L>, IFacetKind &#xA;where L:ISuperLU&#xA;{&#xA;&#xA;&#xA;&#xA;} // end main interface &#xA;&#xA;} // end namespace &#xA;" fileType="library" name="BaseISuperLUMatrixBuilding.cs" srcType="base" uri="linearsystems.library.facet.SuperLU.MatrixBuilding/bin/1.0.0.0/BaseISuperLUMatrixBuilding.dll" versionId="1.0.0.0">
          <dependency>linearsystems.qualifier.SuperLU/bin/1.0.0.0/ISuperLU.dll</dependency>
          <dependency>linearsystems.library.facet.MatrixBuilding/bin/1.0.0.0/BaseIMatrixBuildingFacet.dll</dependency>
        </file>
        <file contents="using br.ufc.hpe.kinds;&#xA;using linearsystems.qualifier.SuperLU;&#xA;using linearsystems.library.facet.MatrixBuilding;&#xA;using System.Runtime.InteropServices;&#xA;&#xA;&#xA;&#xA;namespace linearsystems.library.facet.SuperLU.MatrixBuilding { &#xA;&#xA;&#x9;&#xA;&#xA;  &#xA; &#x9;&#xA;public interface ISuperLUMatrixBuilding&lt;L> : BaseISuperLUMatrixBuilding&lt;L>, IMatrixBuildingFacet&lt;L>&#xA;where L:ISuperLU&#xA;{&#xA;   unsafe void dCreate_CompCol_Matrix_dist (SuperMatrix A, int b, int c, int d, double* e, int* f,&#xA;                                           int* g, Stype_t h, Dtype_t i, Mtype_t j);&#xA;   unsafe void zCreate_CompCol_Matrix_dist (SuperMatrix A, int b, int c, int d, double* e, int* f,&#xA;                                           int* g, Stype_t h, Dtype_t i, Mtype_t j);&#xA;   &#xA;   &#xA;   unsafe void dCreate_CompRowLoc_Matrix_dist (SuperMatrix A, int m, int n, int nnz_loc, int m_loc,&#xA;&#x9;&#x9;&#x9;                                                             int fst_row, double* nzval1, int* colind1, int* rowptr1,&#xA;&#x9;&#x9;                                                             Stype_t stype, Dtype_t dtype, Mtype_t mtype);&#xA;   unsafe void zCreate_CompRowLoc_Matrix_dist (SuperMatrix A, int m, int n, int nnz_loc, int m_loc,&#xA;&#x9;&#x9;&#x9;                                                             int fst_row, double* nzval1, int* colind1, int* rowptr1,&#xA;&#x9;&#x9;&#x9;                                                             Stype_t stype, Dtype_t dtype, Mtype_t mtype);&#xA;&#xA;   unsafe void dCompRow_to_CompCol_dist (int a, int b, int c, double* d, int* e, int* f,&#xA;                                        double** g, int** h, int** i);&#xA;   unsafe void zCompRow_to_CompCol_dist (int a, int b, int c, double* d, int* e, int* f,&#xA;                                        double** g, int** h, int** i);&#xA;   &#xA;   unsafe int pdCompRow_loc_to_CompCol_global (int a, SuperMatrix B, gridinfo_t c,&#xA;                                              SuperMatrix D);&#xA;   unsafe int pzCompRow_loc_to_CompCol_global (int a, SuperMatrix B, gridinfo_t c,&#xA;                                              SuperMatrix D);&#xA;                                              &#xA;   unsafe void dCopy_CompCol_Matrix_dist (SuperMatrix A, SuperMatrix B);&#xA;   unsafe void zCopy_CompCol_Matrix_dist (SuperMatrix A, SuperMatrix B);&#xA;   &#xA;   unsafe void dCreate_Dense_Matrix_dist (SuperMatrix A, int b, int c, double* d,&#xA;                                          int e, Stype_t stype, Dtype_t dtype,&#xA;                                          Mtype_t mtype);&#xA;   unsafe void zCreate_Dense_Matrix_dist (SuperMatrix A, int b, int c, double* d,&#xA;                                          int e, Stype_t stype, Dtype_t dtype,&#xA;                                          Mtype_t mtype);&#xA;   &#xA;                                          &#xA;   unsafe void dCreate_SuperNode_Matrix_dist (SuperMatrix A, int b, int c, int d,&#xA;                                              double* e, int* f, int* g, int* h,&#xA;                                              int* i, int* j, Stype_t stype,&#xA;                                              Dtype_t dtype, Mtype_t mtype);&#xA;   unsafe void zCreate_SuperNode_Matrix_dist (SuperMatrix A, int b, int c, int d,&#xA;                                              double* e, int* f, int* g, int* h,&#xA;                                              int* i, int* j, Stype_t stype,&#xA;                                              Dtype_t dtype, Mtype_t mtype);&#xA;   &#xA;                                              &#xA;   unsafe void dCopy_Dense_Matrix_dist (int a, int b, double* c, int d, double* e,&#xA;                                        int f);&#xA;   unsafe void zCopy_Dense_Matrix_dist (int a, int b, double* c, int d, double* e,&#xA;                                        int f);&#xA;&#xA;                                        &#xA;   unsafe void dallocateA_dist (int a, int b, double** c, int** d, int** e);&#xA;   unsafe void zallocateA_dist (int a, int b, double** c, int** d, int** e);   &#xA;   &#xA;   unsafe void dGenXtrue_dist (int a, int b, double* c, int d);&#xA;   unsafe void zGenXtrue_dist (int a, int b, double* c, int d);&#xA;   &#xA;   &#xA;   unsafe void dFillRHS_dist (string a, int b, double* c, int d, SuperMatrix F,&#xA;                              double* g, int h);&#xA;   unsafe void zFillRHS_dist (string a, int b, double* c, int d, SuperMatrix F,&#xA;                              double* g, int h);&#xA;   &#xA; //  unsafe int dcreate_matrix (SuperMatrix A, int b, double** c, int* d, double** e,&#xA;  //                            int* f, FILE* g, gridinfo_t* h);&#xA;  // unsafe int zcreate_matrix (SuperMatrix A, int b, double** c, int* d, double** e,&#xA;   //                           int* f, FILE* g, gridinfo_t* h);&#xA;                              &#xA;   //Equilibrar Matriz&#xA;   unsafe void dgsequ_dist (SuperMatrix A, double* r, double* c, double* rowcnd,&#xA;&#x9;&#x9;                    double* colcnd,&#x9;double* amax, int* info);&#xA;   unsafe void zgsequ_dist (SuperMatrix A, double* r, double* c, double* rowcnd,&#xA;&#x9;&#x9;                    double* colcnd,&#x9;double* amax, int* info);&#xA;&#x9;&#xA;&#x9;&#x9;                    &#xA;   //retorna norma&#xA;   unsafe double dlangs_dist ( string norm, SuperMatrix A); &#xA;   unsafe double zlangs_dist ( string norm, SuperMatrix A);&#xA;   &#xA;   //Equilibrar Matriz &#xA;   unsafe void dlaqgs_dist (SuperMatrix A, double* r, double* c,double rowcnd,&#xA;&#x9;&#x9;                    double colcnd, double  &#x9;amax, string equed);&#x9;&#xA;   unsafe void zlaqgs_dist (SuperMatrix A, double* r, double* c,double rowcnd,&#xA;&#x9;&#x9;                    double colcnd, double  &#x9;amax, string equed);&#xA;&#xA;&#x9;                    &#xA;   //Permutar matriz densa&#xA;   unsafe int pdPermute_Dense_Matrix(int a, int b, int[] c, int[] d, double[] e,&#xA;                                     int f, double[] g, int h, int i, gridinfo_t j);&#xA;   unsafe int pzPermute_Dense_Matrix(int a, int b, int[] c, int[] d, double[] e,&#xA;                                     int f, double[] g, int h, int i, gridinfo_t j);&#xA;                                     &#xA;   //Distribui matriz em malha 2D&#xA;   unsafe int ddistribute(fact_t fact,int&#x9;n,SuperMatrix &#x9;A, Glu_freeable_t Glu_freeable,&#xA;                          LUstruct_t LUstruct,&#x9;gridinfo_t grid);&#xA;   unsafe int zdistribute(fact_t fact,int&#x9;n,SuperMatrix &#x9;A, Glu_freeable_t Glu_freeable,&#xA;                          LUstruct_t LUstruct,&#x9;gridinfo_t grid);&#xA;                             &#xA;   unsafe int pddistribute (fact_t a, int b, SuperMatrix C, ScalePermstruct_t d,&#xA;                            Glu_freeable_t e, LUstruct_t g, gridinfo_t h);&#xA;   unsafe int pzdistribute (fact_t a, int b, SuperMatrix C, ScalePermstruct_t d,&#xA;                            Glu_freeable_t e, LUstruct_t g, gridinfo_t h);&#xA;                            &#xA;   //finds a row permutation so that the matrix has large entries on the diagonal.&#xA;   unsafe void dldperm (int&#x9; job,int  &#x9;n, int  &#x9;nnz, int[]&#x9;colptr,&#x9;int[] adjncy,&#xA;&#x9;&#x9;               double[]&#x9;nzval, int*  &#x9;perm, double[]&#x9;u, double[] v); &#x9;&#x9;                    &#x9;&#xA;   unsafe void zldperm (int&#x9; job,int  &#x9;n, int  &#x9;nnz, int[]&#x9;colptr,&#x9;int[] adjncy,&#xA;&#x9;&#x9;               double[]&#x9;nzval, int*  &#x9;perm, double[]&#x9;u, double[] v); &#x9;&#x9;                    &#x9;&#xA;   &#xA;   //Destroy distributed L &amp; U matrices. &#xA;   unsafe void &#x9;Destroy_LU (int a, gridinfo_t b, LUstruct_t c);&#xA;   &#xA;   //Allocate storage in LUstruct. &#xA;   //unsafe void LUstructInit (const int a, const int b, LUstruct_t c);&#xA;   &#xA;   //Deallocate LUstruct.&#xA;   unsafe void &#x9;LUstructFree (LUstruct_t a);&#xA;   &#xA;   //Fills a double precision array with a given value.&#x9;&#xA;   unsafe void dfill_dist (double* a, int b, double c);&#xA;   unsafe void zfill_dist (double* a, int b, double c);&#xA;    &#x9;&#xA;   //Check the inf-norm of the error vector.&#xA;   unsafe void &#x9;dinf_norm_error_dist (int a, int b,double* c, int d, double* e,&#xA;                                      int f, gridinfo_t g);&#xA;   unsafe void &#x9;zinf_norm_error_dist (int a, int b,double* c, int d, double* e,&#xA;                                      int f, gridinfo_t g);&#xA; &#x9; &#x9;&#xA;   //Check the inf-norm of the error vector&#xA;   unsafe void &#x9;pdinf_norm_error (int a, int b, int c, double[] d, int e, double[] f,&#xA;                                  int g, gridinfo_t h);&#xA;   unsafe void &#x9;zdinf_norm_error (int a, int b, int c, double[] d, int e, double[] f,&#xA;                                  int g, gridinfo_t h);&#xA; &#x9;&#xA;   // Read a DOUBLE PRECISION matrix stored in Harwell-Boeing format &#xA;  // unsafe void dreadhb_dist (int iam,FILE*&#x9;fp,&#x9;int*  &#x9;nrow, int*  ncol,int* nonz,&#xA;&#x9;//&#x9;                     double** nzval, int**&#x9;rowind, int** colptr);&#xA;   //unsafe void zreadhb_dist (int iam,FILE*&#x9;fp,&#x9;int*  &#x9;nrow, int*  ncol,int* nonz,&#xA;&#x9;//&#x9;                     double** nzval, int**&#x9;rowind, int** colptr);&#xA;   &#xA;   //  Distribute the input matrix onto the 2D process mesh.&#x9;&#x9;                     &#xA;   unsafe int ddist_psymbtonum&#x9;(fact_t fact, int &#x9;n,&#x9;SuperMatrix A, ScalePermstruct_t ScalePermstruct,&#xA;&#x9;&#x9;                        Pslu_freeable_t&#x9;Pslu_freeable,&#x9;LUstruct_t LUstruct, gridinfo_t grid);&#xA;   unsafe int zdist_psymbtonum&#x9;(fact_t fact, int &#x9;n,&#x9;SuperMatrix A, ScalePermstruct_t ScalePermstruct,&#xA;&#x9;&#x9;                        Pslu_freeable_t&#x9;Pslu_freeable,&#x9;LUstruct_t LUstruct, gridinfo_t grid);&#xA;&#x9;&#x9;                        &#xA;   //Print the blocks in the factored matrix L.&#xA;   unsafe void &#x9;dPrintLblocks (int a, int b, gridinfo_t c, Glu_persist_t d,&#xA;                               LocalLU_t e);&#xA;   unsafe void &#x9;zPrintLblocks (int a, int b, gridinfo_t c, Glu_persist_t d,&#xA;                               LocalLU_t e);&#xA;   &#xA;    //Print the blocks in the factored matrix U.&#xA;   unsafe void &#x9;dPrintUblocks (int a, int b, gridinfo_t c, Glu_persist_t d,&#xA;                               LocalLU_t e);&#xA;   unsafe void &#x9;zPrintUblocks (int a, int b, gridinfo_t c, Glu_persist_t d,&#xA;                               LocalLU_t e);&#xA; &#x9;&#xA;   unsafe void &#x9;dPrint_CompCol_Matrix_dist (SuperMatrix A);&#xA;   unsafe void &#x9;zPrint_CompCol_Matrix_dist (SuperMatrix A);&#xA;   &#xA;   unsafe void &#x9;dPrint_Dense_Matrix_dist (SuperMatrix A);&#xA;   unsafe void &#x9;zPrint_Dense_Matrix_dist (SuperMatrix A);&#xA;   &#xA;   unsafe int dPrint_CompRowLoc_Matrix_dist (SuperMatrix A);&#xA;   unsafe int zPrint_CompRowLoc_Matrix_dist (SuperMatrix A);&#xA;   &#xA;   unsafe int dgemm_ (string a, string b, int* c, int* d, int* e, double* f,&#xA;                      double* g, int* h, double* i, int* j, double* l, double* m, int* n);&#xA;   unsafe int zgemm_ (string a, string b, int* c, int* d, int* e, double* f,&#xA;                      double* g, int* h, double* i, int* j, double* l, double* m, int* n);&#xA;   &#xA;                      &#xA;   unsafe int dtrsv_ (string a, string b, string c, int* d , double* e,int* f,&#xA;                      double* g, int* h);&#xA;   unsafe int ztrsv_ (string a, string b, string c, int* d , double* e,int* f,&#xA;                      double* g, int* h);&#xA;   &#xA;   unsafe int dger_ (int* a, int* b, double* c, double* d, int* e, double* f, int* g,&#xA;                     double* h, int* i);&#xA;   unsafe int zger_ (int* a, int* b, double* c, double* d, int* e, double* f, int* g,&#xA;                     double* h, int* i);&#xA;                     &#xA;   void    Destroy_CompCol_Matrix_dist(SuperMatrix A);&#xA;   &#xA;   void    Destroy_SuperNode_Matrix_dist(SuperMatrix A);&#xA;   &#xA;   void    Destroy_SuperMatrix_Store_dist(SuperMatrix A);&#xA;   &#xA;   void    Destroy_CompCol_Permuted_dist(SuperMatrix A);&#xA;   &#xA;   void    Destroy_CompRowLoc_Matrix_dist(SuperMatrix A);&#xA;   &#xA;   void    Destroy_CompRow_Matrix_dist(SuperMatrix A);&#xA;   &#xA;   &#xA; &#xA;   unsafe void    sp_colorder (superlu_options_t a, SuperMatrix B, int* c,&#xA;                              int* d, SuperMatrix E);&#xA;                              &#xA;   unsafe int  sp_coletree_dist (int* a, int* b, int* c, int d , int e,&#xA;&#x9;&#x9;&#x9;&#x9;                int* f);&#xA;&#x9;&#x9;&#x9;&#x9;                &#xA;  // unsafe void    countnz_dist (const int a, int* b, int* c, int* d,&#xA;&#x9;//&#x9;&#x9;                    Glu_persist_t e, Glu_freeable_t f);&#xA;&#x9;&#x9;&#x9;                    &#xA;   //unsafe int   fixupL_dist (const int a, const int* b, Glu_persist_t c,&#xA;&#x9;//&#x9;&#x9;                Glu_freeable_t d);&#xA;&#x9;&#x9;&#x9;                &#xA;   unsafe int* TreePostorder_dist (int a, int* b);&#xA;   &#xA;   unsafe void    ifill_dist (int* a, int b, int c);&#xA;   &#xA;   unsafe void  get_perm_c_dist(int a, int b, SuperMatrix C, int* d);&#xA;   &#xA;   unsafe int symbfact(superlu_options_t a, int b, SuperMatrix C, int* d,&#xA;                      int* e, Glu_persist_t f, Glu_freeable_t g);&#xA;                      &#xA;   unsafe int symbfact_SubInit(fact_t a, void* b, int c, int d, int e,&#xA;                               int f, Glu_persist_t g, Glu_freeable_t h);&#xA;                               &#xA;   unsafe int symbfact_SubXpand(int a, int b, int c, MemType d, int* e,&#xA;&#x9;&#x9;&#x9;                   Glu_freeable_t f);&#xA;&#x9;&#x9;&#x9;                   &#xA;   unsafe int symbfact_SubFree(Glu_freeable_t a);&#xA;   &#xA;   /* Prototypes for parallel symbolic factorization */&#xA;   unsafe float symbfact_dist (int a,  int b, SuperMatrix c, int* d,&#xA;                             int* e,  int* f, int* g, Pslu_freeable_t h,&#xA;                             MPI_Comm* i, MPI_Comm* j,  mem_usage_t l);&#xA;&#xA;   /* Get the column permutation using parmetis */&#xA; //  unsafe float get_perm_c_parmetis (SuperMatrix A, int* b, int* c, int d,&#xA;   //                                int e, int** f, int** g, gridinfo_t* h,&#xA;     //                              MPI_Comm* i);&#xA;&#xA;   /* Auxiliary routines for memory expansions used during&#xA;&#x9;   the parallel symbolic factorization routine */&#xA;&#xA;   int psymbfact_LUXpandMem(int a, int b, int c, int d, int e, int f,&#xA;                                int g, int h, Pslu_freeable_t i,&#xA;                                Llu_symbfact_t j, vtcsInfo_symbfact_t l,&#xA;                                psymbfact_stat_t m);&#xA;&#xA;   unsafe int psymbfact_LUXpand (int a, int b, int c, int d, int* e, int f,&#xA;                               int g, int h, int i, Pslu_freeable_t j,&#xA;                               Llu_symbfact_t l, vtcsInfo_symbfact_t m,&#xA;                                psymbfact_stat_t n);&#xA;&#xA;   int psymbfact_LUXpand_RL(int a, int b, int c, int d, int e, int f,&#xA;                                 Pslu_freeable_t g, Llu_symbfact_t h,&#xA;                                 vtcsInfo_symbfact_t i, psymbfact_stat_t j);&#xA;&#xA;   unsafe int psymbfact_prLUXpand(int a, int b, MemType c, Llu_symbfact_t d,&#xA;                                psymbfact_stat_t e);&#xA;   &#xA;    &#x9;&#xA;} // end main interface &#xA;&#xA;} // end namespace &#xA;" fileType="library" name="ISuperLUMatrixBuilding.cs" srcType="user" uri="linearsystems.library.facet.SuperLU.MatrixBuilding/bin/1.0.0.0/ISuperLUMatrixBuilding.dll" versionId="1.0.0.0">
          <dependency>linearsystems.qualifier.SuperLU/bin/1.0.0.0/ISuperLU.dll</dependency>
          <dependency>%WORKSPACE/linearsystems.library.facet.SuperLU.MatrixBuilding/bin/1.0.0.0/BaseISuperLUMatrixBuilding.dll</dependency>
          <dependency>linearsystems.library.facet.MatrixBuilding/bin/1.0.0.0/IMatrixBuildingFacet.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="206" y="90">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <parameter iname="ISuperLU" order="0" parid="L" uname="superlu" varid="library"/>
    </interface>
    <unit iRef="ISuperLUMatrixBuilding" private="false" uRef="matrixbuilding_facet" visibleInterface="true">
      <super cRef="base" uRef="matrixbuilding_facet"/>
      <slices cRef="library" replica="0" uRef="superlu" sliceName="library_unit" transitive="false">
        <visualDescription h="10" w="10" x="71" y="24"/>
      </slices>
      <visualDescription h="40" w="80" x="291" y="158"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="N" varId="N">
      <originRef>base</originRef>
      <originRef>library</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="matrixbuilding_facet"/>
      <visualDescription h="20" w="20" x="145" y="150"/>
    </enumerator>
  </componentInfo>
</component:component>