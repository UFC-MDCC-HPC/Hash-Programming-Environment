<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000e960b37077b7e3ff040e653a4f6fc27f935c9f8b284eb4cc0bc630c85f117c875302703bded8535943a9d1e024a42bb39d50b4e17831b6b431ef2b98364f089db09a59e3ece57ec2d6926ab3bd1e2afd1dc9ffd4f1416375e70337c0213624c13d043622eb14cdcc5fe712adca47964e4608f4aaabf24032997e65fa1509f4b4" isAbstract="false" kind="Application" name="LUImpl" packagePath="impl.lu">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c5d1eed04ea8a1e908db465bacd4b468873996c9a0b0d0c600dd81c9bb108abf1e926538388532ed6894c5d59565d536711eeba7852d11381d586e8fbf8820a8682b60d65310ed1b98c7c15d7a9acd6e59527d0e73439de2f99bb301c123dac0962831129adb9a787ba4ae5f9783089ddfc69db8c157005ba1293978ad57c1ac" localRef="base" location="lu.LU/LU.hpe" name="LU" package="lu" version="1.0.0.0">
        <visualDescription h="32" w="62" x="246" y="397">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="class" varName="C"/>
        <unitBounds uRef="lu">
          <visualDescription h="10" w="10" x="27" y="3"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="365" y="248">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <interface iRef="ILUImpl" nArgs="1">
      <slice isRef="instance">
        <originRef cRef="instance_type" iRef="IInstance"/>
        <visualDescription h="10" w="10" x="109" y="6"/>
      </slice>
      <slice isRef="boundary_values">
        <originRef cRef="setbv" iRef="IBoundaryValues"/>
        <visualDescription h="10" w="10" x="151" y="52"/>
      </slice>
      <slice isRef="initial_values">
        <originRef cRef="setiv" iRef="IInitialValues"/>
        <visualDescription h="10" w="10" x="22" y="44"/>
      </slice>
      <slice isRef="erhs">
        <originRef cRef="erhs" iRef="IERhs"/>
        <visualDescription h="10" w="10" x="41" y="43"/>
      </slice>
      <slice isRef="ssor">
        <originRef cRef="ssor" iRef="ISSOR"/>
        <visualDescription h="10" w="10" x="71" y="29"/>
      </slice>
      <slice isRef="error">
        <originRef cRef="error" iRef="IError"/>
        <visualDescription h="10" w="10" x="88" y="34"/>
      </slice>
      <slice isRef="pintgr">
        <originRef cRef="pintgr" iRef="IPintgr"/>
        <visualDescription h="10" w="10" x="162" y="91"/>
      </slice>
      <slice isRef="verify">
        <originRef cRef="verify" iRef="IVerify"/>
        <visualDescription h="10" w="10" x="151" y="34"/>
      </slice>
      <slice isRef="process">
        <originRef cRef="data_partition" iRef="IBlocks3D"/>
        <visualDescription h="10" w="10" x="6" y="40"/>
      </slice>
      <protocol xsi:type="component:ActionCombinatorParType" label="hPE.frontend.kinds.activate.model.protocol.HParAction@18aa90a" repeat="0">
        <visualDescription h="150" w="430" x="75" y="75"/>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@5fe9f5" repeat="0" sliceRef="boundary_values">
          <visualDescription h="50" w="50" x="10" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@f8ff19" repeat="0" sliceRef="initial_values">
          <visualDescription h="50" w="50" x="70" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@133f619" repeat="0" sliceRef="erhs">
          <visualDescription h="50" w="50" x="130" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@61ef35" repeat="0" sliceRef="ssor">
          <visualDescription h="50" w="50" x="190" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@19fabda" repeat="0" sliceRef="error">
          <visualDescription h="50" w="50" x="250" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@1cbab62" repeat="0" sliceRef="pintgr">
          <visualDescription h="50" w="50" x="310" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@60e94b" repeat="0" sliceRef="verify">
          <visualDescription h="50" w="50" x="370" y="50"/>
        </action>
      </protocol>
      <sources sourceType="C# Executable" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.data.InitialValues;&#xA;using lu.problem_size.Instance;&#xA;using common.problem_size.Class;&#xA;using lu.datapartition.BlocksInfo;&#xA;using lu.datapartition.Blocks3D;&#xA;using lu.Error;&#xA;using lu.Verify;&#xA;using environment.MPIDirect;&#xA;using lu.data.BoundaryValues;&#xA;using lu.ERhs;&#xA;using lu.ssor.SSOR;&#xA;using lu.data.ProblemDefinition;&#xA;using lu.topology.Neighbors;&#xA;using lu.Pintgr;&#xA;using lu.LU;&#xA;&#xA;namespace impl.lu.LUImpl { &#xA;&#xA;public abstract class BaseILUImpl&lt;C>: Application, BaseILU&lt;C>&#xA;where C:IClass&#xA;{&#xA;&#xA;private IInitialValues&lt;IInstance&lt;C>, C> initial_values = null;&#xA;&#xA;protected IInitialValues&lt;IInstance&lt;C>, C> Initial_values {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.initial_values == null)&#xA;&#x9;&#x9;&#x9;this.initial_values = (IInitialValues&lt;IInstance&lt;C>, C>) Services.getPort(&quot;setiv&quot;);&#xA;&#x9;&#x9;return this.initial_values;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBlocksInfo blocks = null;&#xA;&#xA;protected IBlocksInfo Blocks {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.blocks == null)&#xA;&#x9;&#x9;&#x9;this.blocks = (IBlocksInfo) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;return this.blocks;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBlocks3D&lt;IInstance&lt;C>, C> process = null;&#xA;&#xA;protected IBlocks3D&lt;IInstance&lt;C>, C> Process {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.process == null)&#xA;&#x9;&#x9;&#x9;this.process = (IBlocks3D&lt;IInstance&lt;C>, C>) Services.getPort(&quot;data_partition&quot;);&#xA;&#x9;&#x9;return this.process;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IError&lt;IInstance&lt;C>, C> error = null;&#xA;&#xA;protected IError&lt;IInstance&lt;C>, C> Error {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.error == null)&#xA;&#x9;&#x9;&#x9;this.error = (IError&lt;IInstance&lt;C>, C>) Services.getPort(&quot;error&quot;);&#xA;&#x9;&#x9;return this.error;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IVerify&lt;IInstance&lt;C>, C> verify = null;&#xA;&#xA;protected IVerify&lt;IInstance&lt;C>, C> Verify {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.verify == null)&#xA;&#x9;&#x9;&#x9;this.verify = (IVerify&lt;IInstance&lt;C>, C>) Services.getPort(&quot;verify&quot;);&#xA;&#x9;&#x9;return this.verify;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IMPIDirect mpi = null;&#xA;&#xA;protected IMPIDirect Mpi {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.mpi == null)&#xA;&#x9;&#x9;&#x9;this.mpi = (IMPIDirect) Services.getPort(&quot;mpi&quot;);&#xA;&#x9;&#x9;return this.mpi;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBoundaryValues&lt;IInstance&lt;C>, C> boundary_values = null;&#xA;&#xA;protected IBoundaryValues&lt;IInstance&lt;C>, C> Boundary_values {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.boundary_values == null)&#xA;&#x9;&#x9;&#x9;this.boundary_values = (IBoundaryValues&lt;IInstance&lt;C>, C>) Services.getPort(&quot;setbv&quot;);&#xA;&#x9;&#x9;return this.boundary_values;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IInstance&lt;C> instance = null;&#xA;&#xA;protected IInstance&lt;C> Instance {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.instance == null)&#xA;&#x9;&#x9;&#x9;this.instance = (IInstance&lt;C>) Services.getPort(&quot;instance_type&quot;);&#xA;&#x9;&#x9;return this.instance;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IERhs&lt;IInstance&lt;C>, C> erhs = null;&#xA;&#xA;protected IERhs&lt;IInstance&lt;C>, C> Erhs {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.erhs == null)&#xA;&#x9;&#x9;&#x9;this.erhs = (IERhs&lt;IInstance&lt;C>, C>) Services.getPort(&quot;erhs&quot;);&#xA;&#x9;&#x9;return this.erhs;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ISSOR&lt;IInstance&lt;C>, C> ssor = null;&#xA;&#xA;protected ISSOR&lt;IInstance&lt;C>, C> Ssor {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.ssor == null)&#xA;&#x9;&#x9;&#x9;this.ssor = (ISSOR&lt;IInstance&lt;C>, C>) Services.getPort(&quot;ssor&quot;);&#xA;&#x9;&#x9;return this.ssor;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IProblemDefinition&lt;IInstance&lt;C>, C> problem = null;&#xA;&#xA;protected IProblemDefinition&lt;IInstance&lt;C>, C> Problem {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;IInstance&lt;C>, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;return this.problem;&#xA;&#x9;}&#xA;}&#xA;&#xA;private INeighbors neighbors = null;&#xA;&#xA;protected INeighbors Neighbors {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.neighbors == null)&#xA;&#x9;&#x9;&#x9;this.neighbors = (INeighbors) Services.getPort(&quot;neighbors&quot;);&#xA;&#x9;&#x9;return this.neighbors;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IPintgr&lt;IInstance&lt;C>, C> pintgr = null;&#xA;&#xA;protected IPintgr&lt;IInstance&lt;C>, C> Pintgr {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.pintgr == null)&#xA;&#x9;&#x9;&#x9;this.pintgr = (IPintgr&lt;IInstance&lt;C>, C>) Services.getPort(&quot;pintgr&quot;);&#xA;&#x9;&#x9;return this.pintgr;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;abstract public void compute(); &#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseILUImpl.cs" srcType="base" uri="impl.lu.LUImpl/bin/1.0.0.0/BaseILUImpl.dll" versionId="1.0.0.0">
          <dependency>lu.data.InitialValues/bin/1.0.0.0/IInitialValues.dll</dependency>
          <dependency>lu.problem_size.Instance/bin/1.0.0.0/IInstance.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>lu.datapartition.BlocksInfo/bin/1.0.0.0/IBlocksInfo.dll</dependency>
          <dependency>lu.datapartition.Blocks3D/bin/1.0.0.0/IBlocks3D.dll</dependency>
          <dependency>lu.Error/bin/1.0.0.0/IError.dll</dependency>
          <dependency>lu.Verify/bin/1.0.0.0/IVerify.dll</dependency>
          <dependency>environment.MPIDirect/bin/1.0.0.0/IMPIDirect.dll</dependency>
          <dependency>lu.data.BoundaryValues/bin/1.0.0.0/IBoundaryValues.dll</dependency>
          <dependency>lu.ERhs/bin/1.0.0.0/IERhs.dll</dependency>
          <dependency>lu.ssor.SSOR/bin/1.0.0.0/ISSOR.dll</dependency>
          <dependency>lu.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>lu.topology.Neighbors/bin/1.0.0.0/INeighbors.dll</dependency>
          <dependency>lu.Pintgr/bin/1.0.0.0/IPintgr.dll</dependency>
          <dependency>lu.LU/bin/1.0.0.0/BaseILU.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.problem_size.Class;&#xA;using lu.LU;&#xA;&#xA;namespace impl.lu.LUImpl { &#xA;&#x9;public class ILUImpl&lt;C> : BaseILUImpl&lt;C>, ILU&lt;C>&#xA;&#x9;where C:IClass{&#xA;&#x9;&#xA;&#x9;&#x9;public ILUImpl() { &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public override void compute() { &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="ILUImpl.cs" srcType="user" uri="impl.lu.LUImpl/bin/1.0.0.0/ILUImpl.dll" versionId="1.0.0.0">
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>%WORKSPACE/impl.lu.LUImpl/bin/1.0.0.0/BaseILUImpl.dll</dependency>
          <dependency>lu.LU/bin/1.0.0.0/ILU.dll</dependency>
        </file>
        <file contents="using DGAC;&#xA;using common.problem_size.Class;&#xA;&#xA;namespace impl.lu.LUImpl { &#xA;&#xA;&#x9;public class ILUImplMain {&#xA;&#xA;&#x9;&#x9;static void Main(string [] args) {&#xA;&#xA;&#x9;&#x9;&#x9;ILUImpl lu = new ILUImpl();&#xA;&#xA;&#x9;&#x9;&#x9;BackEnd.DGACInit(&quot;0024000004800000940000000602000000240000525341310004000011000000e960b37077b7e3ff040e653a4f6fc27f935c9f8b284eb4cc0bc630c85f117c875302703bded8535943a9d1e024a42bb39d50b4e17831b6b431ef2b98364f089db09a59e3ece57ec2d6926ab3bd1e2afd1dc9ffd4f1416375e70337c0213624c13d043622eb14cdcc5fe712adca47964e4608f4aaabf24032997e65fa1509f4b4&quot;,&quot;lu&quot;,lu,args);&#xA;&#x9;&#x9;&#x9;lu.createSlices();&#xA;&#x9;&#x9;&#x9;lu.compute();&#xA;&#x9;&#x9;&#x9;BackEnd.DGACFinalize();&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;}&#xA;" fileType="exe" name="ILUImplMain.cs" srcType="main" uri="impl.lu.LUImpl/bin/1.0.0.0/ILUImplMain.exe" versionId="1.0.0.0">
          <dependency>%WORKSPACE/impl.lu.LUImpl/bin/1.0.0.0/ILUImpl.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
        </file>
      </sources>
      <visualDescription h="107" w="180" x="188" y="126">
        <color b="0" g="255" r="128"/>
      </visualDescription>
      <port name="blocks">
        <visualDescription h="10" w="10" x="5" y="88"/>
        <slice pRef="blocks" sRef="boundary_values"/>
        <slice pRef="blocks" sRef="initial_values"/>
        <slice pRef="blocks" sRef="erhs"/>
        <slice pRef="blocks" sRef="ssor"/>
        <slice pRef="blocks" sRef="error"/>
        <slice pRef="blocks" sRef="pintgr"/>
        <slice pRef="blocks" sRef="verify"/>
        <slice pRef="blocks" sRef="process"/>
      </port>
      <port name="problem">
        <visualDescription h="10" w="10" x="71" y="1"/>
        <slice pRef="problem" sRef="boundary_values"/>
        <slice pRef="problem" sRef="initial_values"/>
        <slice pRef="problem" sRef="erhs"/>
        <slice pRef="problem" sRef="ssor"/>
        <slice pRef="problem" sRef="error"/>
        <slice pRef="problem" sRef="pintgr"/>
        <slice pRef="problem" sRef="verify"/>
      </port>
      <port name="neighbors">
        <visualDescription h="10" w="10" x="5" y="4"/>
        <slice pRef="neighbors" sRef="erhs"/>
        <slice pRef="neighbors" sRef="ssor"/>
        <slice pRef="neighbors" sRef="pintgr"/>
        <slice pRef="neighbors" sRef="process"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="159" y="5"/>
        <slice pRef="mpi" sRef="ssor"/>
        <slice pRef="mpi" sRef="error"/>
        <slice pRef="mpi" sRef="pintgr"/>
      </port>
      <parameter iname="IClass" order="0" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="ILUImpl" private="false" uRef="lu" visibleInterface="true">
      <super cRef="base" uRef="lu"/>
      <slices cRef="instance_type" replica="0" uRef="instance" sliceName="instance" transitive="false">
        <visualDescription h="10" w="10" x="93" y="26"/>
      </slices>
      <slices cRef="setbv" replica="0" uRef="boundary_values" sliceName="boundary_values" transitive="false">
        <visualDescription h="10" w="10" x="4" y="26"/>
      </slices>
      <slices cRef="setiv" replica="0" uRef="initial_values" sliceName="initial_values" transitive="false">
        <visualDescription h="10" w="10" x="4" y="39"/>
      </slices>
      <slices cRef="erhs" replica="0" uRef="erhs" sliceName="erhs" transitive="false">
        <visualDescription h="10" w="10" x="34" y="46"/>
      </slices>
      <slices cRef="ssor" replica="0" uRef="ssor" sliceName="ssor" transitive="false">
        <visualDescription h="10" w="10" x="80" y="46"/>
      </slices>
      <slices cRef="error" replica="0" uRef="error" sliceName="error" transitive="false">
        <visualDescription h="10" w="10" x="93" y="46"/>
      </slices>
      <slices cRef="pintgr" replica="0" uRef="pintgr" sliceName="pintgr" transitive="false">
        <visualDescription h="10" w="10" x="66" y="46"/>
      </slices>
      <slices cRef="verify" replica="0" uRef="verify" sliceName="verify" transitive="false">
        <visualDescription h="10" w="10" x="19" y="46"/>
      </slices>
      <slices cRef="data_partition" replica="0" uRef="process" sliceName="process" transitive="false">
        <visualDescription h="10" w="10" x="52" y="45"/>
      </slices>
      <visualDescription h="58" w="106" x="225" y="285"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@196ae3e1301427817312" varId="n">
      <originRef>base</originRef>
      <originRef>setbv</originRef>
      <originRef>exact</originRef>
      <originRef>problem_data</originRef>
      <originRef>d</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="lu"/>
      <visualDescription h="25" w="30" x="137" y="301"/>
    </enumerator>
  </componentInfo>
</component:component>