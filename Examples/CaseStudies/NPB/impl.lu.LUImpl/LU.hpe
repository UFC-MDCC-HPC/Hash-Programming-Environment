<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000e960b37077b7e3ff040e653a4f6fc27f935c9f8b284eb4cc0bc630c85f117c875302703bded8535943a9d1e024a42bb39d50b4e17831b6b431ef2b98364f089db09a59e3ece57ec2d6926ab3bd1e2afd1dc9ffd4f1416375e70337c0213624c13d043622eb14cdcc5fe712adca47964e4608f4aaabf24032997e65fa1509f4b4" isAbstract="false" kind="Application" name="LU" packagePath="impl.lu">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c5d1eed04ea8a1e908db465bacd4b468873996c9a0b0d0c600dd81c9bb108abf1e926538388532ed6894c5d59565d536711eeba7852d11381d586e8fbf8820a8682b60d65310ed1b98c7c15d7a9acd6e59527d0e73439de2f99bb301c123dac0962831129adb9a787ba4ae5f9783089ddfc69db8c157005ba1293978ad57c1ac" localRef="base" location="lu.LU/LU.hpe" name="LU" package="lu" version="1.0.0.0">
        <visualDescription h="30" w="50" x="271" y="364">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="class" varName="C"/>
        <unitBounds uRef="lu">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="460" y="232">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <interface iRef="ILUImpl" nArgs="1">
      <slice isRef="boundary_values">
        <originRef cRef="setbv" iRef="IBoundaryValues"/>
        <visualDescription h="10" w="10" x="151" y="52"/>
      </slice>
      <slice isRef="initial_values">
        <originRef cRef="setiv" iRef="IInitialValues"/>
        <visualDescription h="10" w="10" x="22" y="44"/>
      </slice>
      <slice isRef="erhs">
        <originRef cRef="erhs" iRef="IERhs"/>
        <visualDescription h="10" w="10" x="41" y="43"/>
      </slice>
      <slice isRef="ssor">
        <originRef cRef="ssor" iRef="ISSOR"/>
        <visualDescription h="10" w="10" x="71" y="29"/>
      </slice>
      <slice isRef="error">
        <originRef cRef="error" iRef="IError"/>
        <visualDescription h="10" w="10" x="88" y="34"/>
      </slice>
      <slice isRef="pintgr">
        <originRef cRef="pintgr" iRef="IPintgr"/>
        <visualDescription h="10" w="10" x="162" y="91"/>
      </slice>
      <slice isRef="verify">
        <originRef cRef="verify" iRef="IVerify"/>
        <visualDescription h="10" w="10" x="151" y="34"/>
      </slice>
      <slice isRef="process">
        <originRef cRef="data_partition" iRef="IBlocks3D"/>
        <visualDescription h="10" w="10" x="6" y="40"/>
      </slice>
      <slice isRef="instance">
        <originRef cRef="instance_type" iRef="IInstance_LU"/>
        <visualDescription h="10" w="10" x="93" y="28"/>
      </slice>
      <protocol xsi:type="component:ActionCombinatorParType" label="hPE.frontend.kinds.activate.model.protocol.HParAction@204db0e4" repeat="0">
        <visualDescription h="150" w="430" x="75" y="75"/>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@4c98594d" repeat="0" sliceRef="boundary_values">
          <visualDescription h="50" w="50" x="10" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@260ef584" repeat="0" sliceRef="initial_values">
          <visualDescription h="50" w="50" x="70" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@2018c0a1" repeat="0" sliceRef="erhs">
          <visualDescription h="50" w="50" x="130" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@390e9a7d" repeat="0" sliceRef="ssor">
          <visualDescription h="50" w="50" x="190" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@6dc0a1ce" repeat="0" sliceRef="error">
          <visualDescription h="50" w="50" x="250" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@1bf13ad" repeat="0" sliceRef="pintgr">
          <visualDescription h="50" w="50" x="310" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@27a4c3c0" repeat="0" sliceRef="verify">
          <visualDescription h="50" w="50" x="370" y="50"/>
        </action>
      </protocol>
      <sources sourceType="C# Executable" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.datapartition.BlocksInfo;&#xA;using lu.datapartition.Blocks3D;&#xA;using lu.problem_size.Instance_LU;&#xA;using common.problem_size.Class;&#xA;using lu.ERhs;&#xA;using environment.MPIDirect;&#xA;using lu.Error;&#xA;using lu.Pintgr;&#xA;using lu.Verify;&#xA;using lu.data.InitialValues;&#xA;using lu.data.BoundaryValues;&#xA;using lu.ssor.SSOR;&#xA;using lu.data.ProblemDefinition;&#xA;using common.topology.Ring;&#xA;using lu.LU;&#xA;using lu.problem_size.Instance;&#xA;using MPI;&#xA;&#xA;namespace impl.lu.LU { &#xA;&#xA;public abstract class BaseILUImpl&lt;C>: Application, BaseILU&lt;C>&#xA;where C:IClass{&#xA;   &#xA;&#x9;&#x9;#region data&#xA;&#x9;&#x9;&#x9;protected Intracommunicator worldcomm;&#xA;&#x9;&#x9;&#x9;protected PROBLEM_CLASS problem_class;&#xA;&#x9;&#x9;&#x9;protected int nx0,ny0,nz0;&#xA;&#x9;&#x9;&#x9;protected int isiz01, isiz02, isiz03;&#xA;&#x9;&#x9;&#x9;protected int itmax;&#xA;&#x9;&#x9;&#x9;override public void initialize(){&#xA;&#x9;&#x9;&#x9;    itmax         = Instance.itmax;&#xA;&#x9;&#x9;&#x9;    problem_class = Instance.CLASS;&#xA;&#x9;&#x9;&#x9;    isiz01        = Instance.isiz01;&#xA;&#x9;&#x9;&#x9;    isiz02        = Instance.isiz02;&#xA;&#x9;&#x9;&#x9;    isiz03        = Instance.isiz03;&#xA;&#x9;&#x9;&#x9;    &#xA;&#x9;&#x9;&#x9;    nx0   = Blocks.nx0;&#xA;&#x9;&#x9;&#x9;    ny0   = Blocks.ny0;&#xA;&#x9;&#x9;&#x9;    nz0   = Blocks.nz0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;worldcomm = Mpi.worldComm();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;private IBlocksInfo blocks = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IBlocksInfo Blocks {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.blocks == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.blocks = (IBlocksInfo) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.blocks;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBlocks3D&lt;IInstance_LU&lt;C>, C> process = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IBlocks3D&lt;IInstance_LU&lt;C>, C> Process {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.process == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.process = (IBlocks3D&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;data_partition&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.process;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IERhs&lt;IInstance_LU&lt;C>, C> erhs = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IERhs&lt;IInstance_LU&lt;C>, C> Erhs {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.erhs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.erhs = (IERhs&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;erhs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.erhs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IMPIDirect mpi = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IMPIDirect Mpi {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.mpi == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.mpi = (IMPIDirect) Services.getPort(&quot;mpi&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.mpi;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IError&lt;IInstance_LU&lt;C>, C> error = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IError&lt;IInstance_LU&lt;C>, C> Error {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.error == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.error = (IError&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;error&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.error;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IPintgr&lt;IInstance_LU&lt;C>, C> pintgr = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IPintgr&lt;IInstance_LU&lt;C>, C> Pintgr {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.pintgr == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.pintgr = (IPintgr&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;pintgr&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.pintgr;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IVerify&lt;IInstance_LU&lt;C>, C> verify = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IVerify&lt;IInstance_LU&lt;C>, C> Verify {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.verify == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.verify = (IVerify&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;verify&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.verify;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IInitialValues&lt;IInstance_LU&lt;C>, C> setiv = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IInitialValues&lt;IInstance_LU&lt;C>, C> Setiv {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.setiv == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.setiv = (IInitialValues&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;setiv&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.setiv;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBoundaryValues&lt;IInstance_LU&lt;C>, C> setbv = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IBoundaryValues&lt;IInstance_LU&lt;C>, C> Setbv {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.setbv == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.setbv = (IBoundaryValues&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;setbv&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.setbv;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ISSOR&lt;IInstance_LU&lt;C>, C> ssor = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected ISSOR&lt;IInstance_LU&lt;C>, C> Ssor {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.ssor == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.ssor = (ISSOR&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;ssor&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.ssor;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IProblemDefinition&lt;IInstance_LU&lt;C>, C> problem = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IProblemDefinition&lt;IInstance_LU&lt;C>, C> Problem {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;IInstance_LU&lt;C>, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.problem;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IInstance_LU&lt;C> instance = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IInstance_LU&lt;C> Instance {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.instance == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.instance = (IInstance_LU&lt;C>) Services.getPort(&quot;instance_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.instance;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ICell y = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public ICell Y {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.y == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.y = (ICell) Services.getPort(&quot;y&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.y;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ICell x = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public ICell X {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.x == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.x = (ICell) Services.getPort(&quot;x&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.x;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;abstract public int go(); &#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseILUImpl.cs" srcType="base" uri="impl.lu.LU/bin/1.0.0.0/BaseILUImpl.dll" versionId="1.0.0.0">
          <dependency>lu.datapartition.BlocksInfo/bin/1.0.0.0/IBlocksInfo.dll</dependency>
          <dependency>lu.datapartition.Blocks3D/bin/1.0.0.0/IBlocks3D.dll</dependency>
          <dependency>lu.problem_size.Instance_LU/bin/1.0.0.0/IInstance_LU.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>lu.ERhs/bin/1.0.0.0/IERhs.dll</dependency>
          <dependency>environment.MPIDirect/bin/1.0.0.0/IMPIDirect.dll</dependency>
          <dependency>lu.Error/bin/1.0.0.0/IError.dll</dependency>
          <dependency>lu.Pintgr/bin/1.0.0.0/IPintgr.dll</dependency>
          <dependency>lu.Verify/bin/1.0.0.0/IVerify.dll</dependency>
          <dependency>lu.data.InitialValues/bin/1.0.0.0/IInitialValues.dll</dependency>
          <dependency>lu.data.BoundaryValues/bin/1.0.0.0/IBoundaryValues.dll</dependency>
          <dependency>lu.ssor.SSOR/bin/1.0.0.0/ISSOR.dll</dependency>
          <dependency>lu.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>lu.topology.Neighbors/bin/1.0.0.0/INeighbors.dll</dependency>
          <dependency>lu.LU/bin/1.0.0.0/BaseILU.dll</dependency>
          <externalDependency>MPI</externalDependency>
          <externalDependency>BMInOut</externalDependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.problem_size.Class;&#xA;using lu.LU;&#xA;using NPB3_0_JAV.BMInOut;&#xA;&#xA;namespace impl.lu.LU { &#xA;&#x9;public class ILUImpl&lt;C> : BaseILUImpl&lt;C>, ILU&lt;C>&#xA;&#x9;where C:IClass{&#xA;&#x9;   &#xA;        public int bid = -1;&#xA;&#x9;&#x9;public static int num = 1;&#xA;    &#x9;public static String BMName = &quot;LU&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public BMResults results;&#xA;&#xA;&#x9;&#x9;public ILUImpl() { &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private void runBenchmark(){&#xA;&#x9;&#x9;    int node = worldcomm.Rank;&#xA;&#x9;&#x9;    num = worldcomm.Size;&#xA;            if(node == 0) Console.WriteLine(&quot; Size: &quot; + isiz01 + &quot; x &quot; + isiz02 + &quot; x &quot; + isiz03);&#xA;            if(node == 0) Console.WriteLine(&quot; Iterations: &quot; + itmax);&#xA;            if(node == 0) Console.WriteLine(&quot; Number of processes: &quot; + num);&#xA;//            proc_grid();&#xA;//            neighbors();&#xA;//            subdomain();&#xA;//            setConstants();&#xA;            // Process.configBlock();&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   set the boundary values for dependent variables&#xA;            //---------------------------------------------------------------------&#xA;            Setbv.go();&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   set the initial values for dependent variables&#xA;            //---------------------------------------------------------------------&#xA;            Setiv.go();&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   compute the forcing term based on prescribed exact solution&#xA;            //---------------------------------------------------------------------&#xA;            Erhs.go();&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   perform one SSOR iteration to touch all data and program pages &#xA;            //---------------------------------------------------------------------&#xA;            Ssor.setParameters(1);&#xA;            Ssor.go();&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   reset the boundary and initial values&#xA;            //---------------------------------------------------------------------&#xA;            Setbv.go();&#xA;            Setiv.go();&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   perform the SSOR iterations&#xA;            //---------------------------------------------------------------------            &#xA;            Ssor.setParameters(itmax);&#xA;            Ssor.go();&#xA;            double[] rsdnm  = Ssor.Rsdnm;&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   compute the solution error&#xA;            //---------------------------------------------------------------------            &#xA;            Error.go();&#xA;            double[] errnm = Error.Errnm;&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   compute the surface integral&#xA;            //---------------------------------------------------------------------&#xA;            Pintgr.go();&#xA;            double frc = Pintgr.Frc;&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   verification test&#xA;            //---------------------------------------------------------------------&#xA;            double maxtime = Ssor.Maxtime;&#xA;            &#xA;            if(node==0) &#xA;            {&#xA;                double mflops = ((double)(itmax))*(1984.77*((double)(nx0))*((double)(ny0))*((double)(nz0))-10923.3*pow2((((double)(nx0+ny0+nz0))/3.0))+27770.9*((double)(nx0+ny0+nz0))/3.0-144010.0) / (maxtime*1000000.0);&#xA;                Verify.setParameters(rsdnm, errnm, frc);&#xA;                Verify.go();&#xA;                int verified = Verify.Verified;&#xA;                BMResults results = new BMResults(BMName,&#xA;                                        problem_class.ToString()[0],&#xA;                                        nx0,&#xA;                                        ny0,&#xA;                                        nz0,&#xA;                                        itmax,&#xA;                                        maxtime,&#xA;                                        mflops,&#xA;                                        &quot;floating point&quot;,&#xA;                                        verified,&#xA;                                        true,&#xA;                                        num,&#xA;                                        -1);&#xA;                results.print();            &#xA;            }           &#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public override int go() &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;   runBenchmark();&#xA;&#x9;&#x9;   return  0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public static double pow2(double p) { return p * p; } &#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="ILUImpl.cs" srcType="user" uri="impl.lu.LU/bin/1.0.0.0/ILUImpl.dll" versionId="1.0.0.0">
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>%WORKSPACE/impl.lu.LU/bin/1.0.0.0/BaseILUImpl.dll</dependency>
          <dependency>lu.LU/bin/1.0.0.0/ILUImpl.dll</dependency>
          <externalDependency>MPI</externalDependency>
          <externalDependency>BMInOut</externalDependency>
        </file>
      </sources>
      <visualDescription h="107" w="180" x="147" y="78">
        <color b="0" g="255" r="128"/>
      </visualDescription>
      <port name="blocks">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks" sRef="boundary_values"/>
        <slice pRef="blocks" sRef="initial_values"/>
        <slice pRef="blocks" sRef="erhs"/>
        <slice pRef="blocks" sRef="ssor"/>
        <slice pRef="blocks" sRef="error"/>
        <slice pRef="blocks" sRef="pintgr"/>
        <slice pRef="blocks" sRef="verify"/>
        <slice pRef="blocks" sRef="process"/>
      </port>
      <port name="problem">
        <visualDescription h="10" w="10" x="71" y="1"/>
        <slice pRef="problem" sRef="boundary_values"/>
        <slice pRef="problem" sRef="initial_values"/>
        <slice pRef="problem" sRef="erhs"/>
        <slice pRef="problem" sRef="ssor"/>
        <slice pRef="problem" sRef="error"/>
        <slice pRef="problem" sRef="pintgr"/>
        <slice pRef="problem" sRef="verify"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="159" y="5"/>
        <slice pRef="mpi" sRef="erhs"/>
        <slice pRef="mpi" sRef="ssor"/>
        <slice pRef="mpi" sRef="error"/>
        <slice pRef="mpi" sRef="pintgr"/>
      </port>
      <port name="y">
        <visualDescription h="10" w="10" x="40" y="55"/>
        <slice pRef="y" sRef="erhs"/>
        <slice pRef="y" sRef="ssor"/>
        <slice pRef="y" sRef="pintgr"/>
        <slice pRef="y" sRef="process"/>
      </port>
      <port name="x">
        <visualDescription h="10" w="10" x="84" y="75"/>
        <slice pRef="x" sRef="erhs"/>
        <slice pRef="x" sRef="ssor"/>
        <slice pRef="x" sRef="pintgr"/>
        <slice pRef="x" sRef="process"/>
      </port>
      <externalReferences>MPI</externalReferences>
      <externalReferences>BMInOut</externalReferences>
      <parameter iname="IClass" order="0" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="ILUImpl" private="false" uRef="lu" visibleInterface="true">
      <super cRef="base" uRef="lu"/>
      <slices cRef="setbv" replica="0" uRef="boundary_values" sliceName="boundary_values" transitive="false">
        <visualDescription h="10" w="10" x="4" y="26"/>
      </slices>
      <slices cRef="setiv" replica="0" uRef="initial_values" sliceName="initial_values" transitive="false">
        <visualDescription h="10" w="10" x="4" y="39"/>
      </slices>
      <slices cRef="erhs" replica="0" uRef="erhs" sliceName="erhs" transitive="false">
        <visualDescription h="10" w="10" x="34" y="46"/>
      </slices>
      <slices cRef="ssor" replica="0" uRef="ssor" sliceName="ssor" transitive="false">
        <visualDescription h="10" w="10" x="80" y="46"/>
      </slices>
      <slices cRef="error" replica="0" uRef="error" sliceName="error" transitive="false">
        <visualDescription h="10" w="10" x="93" y="46"/>
      </slices>
      <slices cRef="pintgr" replica="0" uRef="pintgr" sliceName="pintgr" transitive="false">
        <visualDescription h="10" w="10" x="66" y="46"/>
      </slices>
      <slices cRef="verify" replica="0" uRef="verify" sliceName="verify" transitive="false">
        <visualDescription h="10" w="10" x="19" y="46"/>
      </slices>
      <slices cRef="data_partition" replica="0" uRef="process" sliceName="process" transitive="false">
        <visualDescription h="10" w="10" x="52" y="45"/>
      </slices>
      <slices cRef="instance_type" replica="0" uRef="instance" sliceName="instance" transitive="false">
        <visualDescription h="10" w="10" x="93" y="28"/>
      </slices>
      <visualDescription h="58" w="106" x="220" y="259"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@196ae3e1301427817312" varId="n">
      <originRef>base</originRef>
      <originRef>setbv</originRef>
      <originRef>exact</originRef>
      <originRef>problem_data</originRef>
      <originRef>rsd</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="lu"/>
      <visualDescription h="58" w="67" x="80" y="264"/>
    </enumerator>
  </componentInfo>
</component:component>