<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000006f49c5d2352797d76f35531ee377a3d9eb45557b6a6ce5567d918048b2ffac022efe3ae393ffbc08459f573fea939edc83f98623e85737e77f706766f61362d889510a6b3d30453896ed8ba04bb9fbd229035a69b9c9411a41a030c842f20ca54e82d38e9184f4c7a35b22a10a412c5d88af5b29b39f6db193114b5f7982ebb5" isAbstract="false" kind="Environment" name="BlocksInfoImpl" packagePath="impl.ft.datapartition">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000095e97e58b9ed73eb389d5d67e242ab61d50128486f43ba0afe8ff6bd8d08840f848c22ffad8acff4ef3bd7a6d1af46fd7413f1bf81704ab9152bd0c5c5f6ee8c128f38a1196abb5039132524dd4a4294fda2d6a19c7f1019c9e09736f96280d2298e765b3e51d1f8e779c60cbb6ccff11284a8fd11385bfdb9a8c9d44ada4f92" localRef="base" location="ft.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="ft.datapartition" version="1.0.0.0">
        <visualDescription h="30" w="50" x="333" y="324">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <unitBounds uRef="blocks">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="IBlocksInfoImpl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using ft.datapartition.BlocksInfo;&#xA;&#xA;namespace impl.ft.datapartition.BlocksInfoImpl { &#xA;&#x9;public abstract class BaseIBlocksInfoImpl: br.ufc.pargo.hpe.kinds.Environment, BaseIBlocks{&#xA;&#x9;&#x9;public BaseIBlocksInfoImpl(){&#xA;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseIBlocksInfoImpl.cs" srcType="base" uri="impl.ft.datapartition.BlocksInfoImpl/bin/1.0.0.0/BaseIBlocksInfoImpl.dll" versionId="1.0.0.0">
          <dependency>ft.datapartition.BlocksInfo/bin/1.0.0.0/BaseIBlocks.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using ft.datapartition.BlocksInfo;&#xA;&#xA;namespace impl.ft.datapartition.BlocksInfoImpl { &#xA;&#x9;public class IBlocksInfoImpl : BaseIBlocksInfoImpl, IBlocks{&#xA;&#x9;&#x9;public IBlocksInfoImpl() { &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;override public void initialize(){&#xA;&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void blocksConfig(int nx, int ny, int nz, int np1, int np2, int layout_type){&#xA;&#x9;&#x9;    int layout_0D = 0, layout_1D = 1, layout_2D = 2;&#xA;&#x9;&#x9;    int fftblock_default=16, fftblockpad_default=18;&#xA;&#x9;&#x9;    int node = this.GlobalRank;&#xA;            _me2 = (int)mod(node, np2);&#xA;            _me1 = node/np2;&#xA;            if(layout_type == layout_0D) {&#xA;                for(int i = 0; i &lt; 3; i++) {&#xA;                    _xstart[i] = 1;&#xA;                    _xend[i]   = nx;&#xA;                    _ystart[i] = 1;&#xA;                    _yend[i]   = ny;&#xA;                    _zstart[i] = 1;&#xA;                    _zend[i]   = nz;&#xA;                }&#xA;&#xA;            }&#xA;            else if(layout_type == layout_1D) {&#xA;                _xstart[0] = 1;&#xA;                _xend[0]   = nx;&#xA;                _ystart[0] = 1;&#xA;                _yend[0]   = ny;&#xA;                _zstart[0] = 1 + _me2 * nz/np2;&#xA;                _zend[0]   = (_me2+1) * nz/np2;&#xA;&#xA;                _xstart[1] = 1;&#xA;                _xend[1]   = nx;&#xA;                _ystart[1] = 1;&#xA;                _yend[1]   = ny;&#xA;                _zstart[1] = 1 + _me2 * nz/np2;&#xA;                _zend[1]   = (_me2+1) * nz/np2;&#xA;&#xA;                _xstart[2] = 1;&#xA;                _xend[2]   = nx;&#xA;                _ystart[2] = 1 + _me2 * ny/np2;&#xA;                _yend[2]   = (_me2+1) * ny/np2;&#xA;                _zstart[2] = 1;&#xA;                _zend[2] = nz;&#xA;&#xA;            }&#xA;            else if(layout_type == layout_2D) {&#xA;&#xA;                _xstart[0] = 1;&#xA;                _xend[0]   = nx;&#xA;                _ystart[0] = 1 + _me1 * ny/np1;&#xA;                _yend[0]   = (_me1+1) * ny/np1;&#xA;                _zstart[0] = 1 + _me2 * nz/np2;&#xA;                _zend[0]   = (_me2+1) * nz/np2;&#xA;&#xA;                _xstart[1] = 1 + _me1 * nx/np1;&#xA;                _xend[1]   = (_me1+1)*nx/np1;&#xA;                _ystart[1] = 1;&#xA;                _yend[1]   = ny;&#xA;                _zstart[1] = _zstart[0];&#xA;                _zend[1]   = _zend[0];&#xA;&#xA;                _xstart[2] = _xstart[1];&#xA;                _xend[2]   = _xend[1];&#xA;                _ystart[2] = 1 + _me2 *ny/np2;&#xA;                _yend[2]   = (_me2+1)*ny/np2;&#xA;                _zstart[2] = 1;&#xA;                _zend[2] = nz;&#xA;            }&#xA;            _fftblock = fftblock_default;&#xA;            _fftblockpad = fftblockpad_default;&#xA;&#xA;            int dim1 = ny/np1;&#xA;            int dim2 = nx/np1;&#xA;            int dim3 = nx/np1;&#xA;            if(layout_type == layout_2D) {&#xA;                if(dim1 &lt; _fftblock)&#xA;                    _fftblock = dim1;&#xA;                if(dim2 &lt; _fftblock)&#xA;                    _fftblock = dim2;&#xA;                if(dim3 &lt; _fftblock)&#xA;                    _fftblock = dim3;&#xA;            }&#xA;&#xA;            if(_fftblock != fftblock_default)&#xA;                _fftblockpad = _fftblock + 3;&#xA;                &#xA;            _size1 = ((int)(nz/np2))*nx*2;&#xA;            _size2 = nx*2;&#xD;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public static double mod(double a, double b) { return (a % b); }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private int _fftblock, _fftblockpad, _node, _me1, _me2, _size1, _size2;&#xA;&#x9;&#x9;private int[] _xstart = {0,0,0};&#xA;&#x9;&#x9;private int[] _ystart = {0,0,0};&#xA;&#x9;&#x9;private int[] _zstart = {0,0,0};&#xA;&#x9;&#x9;private int[] _xend = {0,0,0};&#xA;&#x9;&#x9;private int[] _yend = {0,0,0};&#xA;&#x9;&#x9;private int[] _zend = {0,0,0};&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int fftblock    {get { return _fftblock; }    set { _fftblock = value; } }&#xA;&#x9;&#x9;public int fftblockpad {get { return _fftblockpad; } set { _fftblockpad = value; } }&#xA;&#x9;&#x9;public int node        {get { return _node; }        set { _node = value; } }&#xA;&#x9;&#x9;public int me1         {get { return _me1; }         set { _me1 = value; } }&#xA;&#x9;&#x9;public int me2         {get { return _me2; }         set { _me2 = value; } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int size1       { get { return _size1;       } set { _size1 = value;       } }&#xA;&#x9;&#x9;public int size2       { get { return _size2;       } set { _size2 = value;       } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int[] xstart {get { return _xstart; } }&#xA;&#x9;&#x9;public int[] ystart {get { return _ystart; } }&#xA;&#x9;&#x9;public int[] zstart {get { return _zstart; } }&#xA;&#x9;&#x9;public int[] xend   {get { return _xend; } }&#xA;&#x9;&#x9;public int[] yend   {get { return _yend; } }&#xA;&#x9;&#x9;public int[] zend   {get { return _zend; } }&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="IBlocksInfoImpl.cs" srcType="user" uri="impl.ft.datapartition.BlocksInfoImpl/bin/1.0.0.0/IBlocksInfoImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/impl.ft.datapartition.BlocksInfoImpl/bin/1.0.0.0/BaseIBlocksInfoImpl.dll</dependency>
          <dependency>ft.datapartition.BlocksInfo/bin/1.0.0.0/IBlocks.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="115" x="240" y="153">
        <color b="0" g="128" r="255"/>
      </visualDescription>
    </interface>
    <unit iRef="IBlocksInfoImpl" private="false" uRef="blocks" visibleInterface="true">
      <super cRef="base" uRef="blocks"/>
      <visualDescription h="40" w="80" x="212" y="263"/>
    </unit>
  </componentInfo>
</component:component>