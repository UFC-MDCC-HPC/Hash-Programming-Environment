<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000073598d1587e706e110f546e23d03f69fa14e5ebe877dc4da00ff99c4cdbc773b7baa646f059211d7fdce84e71a496e86be65c877192886647cb5512eb0a91c0a3304700959669af51613ff5e06e766d04416beab6e22cecb17ac5e36d8f4a01d3d32ac66fd684f8d01bc3f259814c2c58be679ad70c3d0940eac2dc80494a8b5" isAbstract="false" kind="Computation" name="ERhsImpl" packagePath="impl.lu">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000a5eda87eed0efdd176e024556dfbd1a9e44f272b9148f52c48861c4f717bfd01848e31e55111ed066ca5ada40ca4010430c6ae199235923503e194a553d655727c3bb7748a70205a67e82aaa03a738a9fa32eb49394271fd5a7681de8557aaf8bd9c9f460853ec13ef7d9c77ddeb7d0e4b0e95d01f10cfbfd2666c18bf075f9e" localRef="base" location="lu.ERhs/ERhs.hpe" name="ERhs" package="lu" version="1.0.0.0">
        <visualDescription h="43" w="82" x="261" y="355">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000f3194c0a7b197fb560dfcad8ee5b421b78f1f03d002a081027a334aa25ebf3ca7669300c0fd23f8f1547226d2833753b8583e09a6b1fcc393107abb8e8670fb2d48b48ea486fa7f94cb968f2760707e531b14426dedc94542dfdf89efcdf612aeabb738a4b713e0a7a9b3ee97b95d783693b746ddcce119ba7c5080176270d8a" localRef="blocks_info" location="lu.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="lu.datapartition" exposed="true">
          <visualDescription h="41" w="84" x="103" y="372">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="blocks">
            <visualDescription h="10" w="10" x="71" y="18"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009f8aadd94be2122c6dbf97a8db4c368df4aa14e5eef40999c777e681c973106bec55b80c133f1e7301d0ff36e2ee37a1d7d095ffff4581f295b2e8fc055fc07304178d993e14731e9c3d1e72370eee41c30ae18e6d096d5d70ac13a2833e8945cd641f4a3cab17bc2397b395bc234fdfa244afa599eb514a94d884e663b3a3a5" localRef="problem_data" location="lu.data.ProblemDefinition/ProblemDefinition.hpe" name="ProblemDefinition" package="lu.data" exposed="true">
          <visualDescription h="54" w="132" x="431" y="355">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds uRef="problem">
            <visualDescription h="10" w="10" x="10" y="24"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="x" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="49" w="133" x="152" y="441">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="63" y="6"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000059fdc60f0095a1142aef66ff82b5e8659158d29c9ae6eedd576a96e33ae1faaddaf78b57c8cab897deeb79b165ed011c3cd25deeeed69da38fc30a1143e39fa67ab658c278a82203de07eafa3dafe7704a84c1fffc42035b92d09563efdfe7b59862d01f598f626efa5cd4eef962fb18970112f8a530495c2a482922a19258b" localRef="mpi" location="environment.MPIDirect/MPIDirect.hpe" name="MPIDirect" package="environment" exposed="true">
          <visualDescription h="30" w="50" x="373" y="334">
            <color b="240" g="32" r="160"/>
          </visualDescription>
          <unitBounds uRef="mpi">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="y" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="49" w="133" x="291" y="458">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="63" y="6"/>
          </unitBounds>
        </port>
        <unitBounds uRef="erhs">
          <visualDescription h="10" w="10" x="37" y="4"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="00240000048000009400000006020000002400005253413100040000110000004d9c75ae5f43eaaeb10762b3e7c65b336ea4790b679668da776b55e1821b1f59388b8ea2e5f25263fc4cebe208bc2cb79d9bcbbc6167a4bd4b552d03cca4ef35f734d0cbac01feb8e9a6d6296807fccc63cd003ba735a6445bb240120f051f046aa5787203f6fd7fd7b0cd0e18a980c63f35f8918343d6ea5563d8c3211f8ab1" localRef="instance_type" location="lu.problem_size.Instance_LU/Instance_LU.hpe" name="Instance_LU" package="lu.problem_size" exposed="false">
      <visualDescription h="54" w="102" x="436" y="199">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="472" y="148">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance_type" varName="I"/>
    <interface iRef="IERhsImpl" nArgs="2">
      <slice isRef="exchange30">
        <originRef cRef="exchange30" iRef="IExchange"/>
        <visualDescription h="10" w="10" x="21" y="76"/>
      </slice>
      <slice isRef="exchange31">
        <originRef cRef="exchange31" iRef="IExchange"/>
        <visualDescription h="10" w="10" x="66" y="9"/>
      </slice>
      <protocol xsi:type="component:ActionCombinatorParType" label="hPE.frontend.kinds.activate.model.protocol.HParAction@5b5d1579" repeat="0">
        <visualDescription h="150" w="70" x="75" y="75"/>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@3c2ce9cb" repeat="0">
          <visualDescription h="50" w="50" x="10" y="50"/>
        </action>
      </protocol>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.data.ProblemDefinition;&#xA;using lu.problem_size.Instance_LU;&#xA;using common.problem_size.Class;&#xA;using lu.datapartition.BlocksInfo;&#xA;using common.topology.Ring;&#xA;using lu.Exchange;&#xA;using lu.ERhs;&#xA;using environment.MPIDirect;&#xA;using lu.exchange.ExchangePattern31;&#xA;using lu.exchange.ExchangePattern30;&#xA;using common.Discretization;&#xA;&#xA;namespace impl.lu.ERhsImpl { &#xA;&#x9;public abstract class BaseIERhsImpl&lt;I, C>: Computation, BaseIERhs&lt;I, C>&#xA;&#x9;where I:IInstance_LU&lt;C>&#xA;&#x9;where C:IClass {&#xA;&#x9;   &#xA;&#x9;&#x9;#region data&#xA;&#x9;&#x9;&#x9;protected int nx,ny,nz,nx0,ny0,ipt,jpt,ist,jst,iend,jend;//Blocks&#xA;&#x9;&#x9;&#x9;protected int north, south, east, west;&#xA;&#x9;&#x9;&#x9;//protected int isiz3;//Instance&#xA;&#x9;&#x9;&#x9;//protected int isiz1, isiz2, ii1, ii2, ji1, ji2, ki1, ki2;//Problem Constants&#xA;&#x9;&#x9;&#x9;//protected double c2, dxi, deta, dzeta;&#xA;&#x9;&#x9;&#x9;protected double c1, c2, c3, c4, c5, tx1, tx2, tx3, &#xA;&#x9;&#x9;&#x9;                 dx1, dx2, dx3, dx4, dx5, dy1, dy2, dy3, dy4, dy5, dz1, dz2, dz3, dz4, dz5,&#xA;&#x9;&#x9;&#x9;                 dssp, ty1, ty2, ty3, tz1, tz2, tz3;&#xA;&#x9;&#x9;&#x9;protected double [,,,] u,rsd,frct,flux;&#xA;&#x9;&#x9;&#x9;protected double[,] ce;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;override public void initialize()&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;    nx  = Blocks.nx;&#xA;&#x9;&#x9;&#x9;    ny  = Blocks.ny;&#xA;&#x9;&#x9;&#x9;    nz  = Blocks.nz;&#xA;&#x9;&#x9;&#x9;    nx0  = Blocks.nx0;&#xA;&#x9;&#x9;&#x9;    ny0  = Blocks.ny0;&#xA;&#x9;&#x9;&#x9;    &#xA;                ipt  = Blocks.ipt;&#xA;                jpt  = Blocks.jpt;&#xA;                ist  = Blocks.ist;&#xA;                jst  = Blocks.jst;                &#xA;                iend = Blocks.iend;&#xA;                jend = Blocks.jend;&#xA;                &#xA;/*                Console.WriteLine(&quot;nx=&quot; + nx + &quot; ny=&quot; + ny + &quot; nz=&quot; + nz + &quot; nx0=&quot; + nx0 + &quot; ny0=&quot; + ny0 +&#xA;                                  &quot; ipt=&quot; + ipt + &quot; jpt=&quot; + jpt + &quot; ist=&quot; + ist + &quot; jst=&quot; + jst + &#xA;                                  &quot; iend=&quot; + iend + &quot; jend=&quot; + jend);&#xA;  */              &#xA;                north = Blocks.north;&#xA;                south = Blocks.south;&#xA;                east  = Blocks.east;&#xA;                west  = Blocks.west;&#xA;                &#xA;                u    = Problem.Field_u;&#xA;                rsd  = Problem.Field_rsd;&#xA;                frct = Problem.Field_frct;&#xA;                flux = Problem.Field_flux;&#xA;                &#xA;                c1 = Constants.c1;&#xA;                c2 = Constants.c2;&#xA;                c3 = Constants.c3;&#xA;                c4 = Constants.c4;&#xA;                c5 = Constants.c5;&#xA;                tx1 = Constants.tx1;&#xA;                tx2 = Constants.tx2;&#xA;                tx3 = Constants.tx3;&#xA;                dx1 = Constants.dx1;&#xA;                dx2 = Constants.dx2;&#xA;                dx3 = Constants.dx3;&#xA;                dx4 = Constants.dx4;&#xA;                dx5 = Constants.dx5;&#xA;                ty1 = Constants.ty1;&#xA;                ty2 = Constants.ty2;&#xA;                ty3 = Constants.ty3;                &#xA;                tz1 = Constants.tz1;&#xA;                tz2 = Constants.tz2;&#xA;                tz3 = Constants.tz3;                &#xA;                dy1 = Constants.dy1;&#xA;                dy2 = Constants.dy2;&#xA;                dy3 = Constants.dy3;&#xA;                dy4 = Constants.dy4;&#xA;                dy5 = Constants.dy5;&#xA;                dz1 = Constants.dz1;&#xA;                dz2 = Constants.dz2;&#xA;                dz3 = Constants.dz3;&#xA;                dz4 = Constants.dz4;&#xA;                dz5 = Constants.dz5;                &#xA;                dssp = Constants.dssp;&#xA;                &#xA;                ce = Constants.ce;&#xA;                &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#x9;   &#xA;&#x9;&#x9;private IProblemDefinition&lt;I, C> problem = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IProblemDefinition&lt;I, C> Problem {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.problem;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBlocksInfo blocks = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IBlocksInfo Blocks {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.blocks == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.blocks = (IBlocksInfo) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.blocks;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ICell y = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public ICell Y {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.y == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.y = (ICell) Services.getPort(&quot;y&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.y;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ICell x = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public ICell X {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.x == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.x = (ICell) Services.getPort(&quot;x&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.x;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IMPIDirect mpi = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IMPIDirect Mpi {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.mpi == null) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.mpi = (IMPIDirect) Services.getPort(&quot;mpi&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return this.mpi;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IExchange&lt;I, C, IExchangePattern30, IDiscretization> exchange30 = null;&#xA;&#x9;&#x9;protected IExchange&lt;I, C, IExchangePattern30, IDiscretization> Exchange30 {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.exchange30 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.exchange30 = (IExchange&lt;I, C, IExchangePattern30, IDiscretization>) Services.getPort(&quot;exchange30&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.exchange30;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IExchange&lt;I, C, IExchangePattern31, IDiscretization> exchange31 = null;&#xA;&#x9;&#x9;protected IExchange&lt;I, C, IExchangePattern31, IDiscretization> Exchange31 {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.exchange31 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.exchange31 = (IExchange&lt;I, C, IExchangePattern31, IDiscretization>) Services.getPort(&quot;exchange31&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.exchange31;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;abstract public int go(); &#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseIERhsImpl.cs" srcType="base" uri="impl.lu.ERhsImpl/bin/1.0.0.0/BaseIERhsImpl.dll" versionId="1.0.0.0">
          <dependency>lu.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>lu.problem_size.Instance_LU/bin/1.0.0.0/IInstance_LU.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>lu.datapartition.BlocksInfo/bin/1.0.0.0/IBlocksInfo.dll</dependency>
          <dependency>lu.topology.Neighbors/bin/1.0.0.0/INeighbors.dll</dependency>
          <dependency>lu.Exchange1/bin/1.0.0.0/IExchange1.dll</dependency>
          <dependency>lu.ERhs/bin/1.0.0.0/BaseIERhs.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.problem_size.Instance_LU;&#xA;using common.problem_size.Class;&#xA;using lu.ERhs;&#xA;&#xA;namespace impl.lu.ERhsImpl &#xA;{ &#xA;&#x9;public class IERhsImpl&lt;I, C> : BaseIERhsImpl&lt;I, C>, IERhs&lt;I, C>&#xA;&#x9;&#x9;where I:IInstance_LU&lt;C>&#xA;&#x9;&#x9;where C:IClass &#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;public override int go() &#xA;&#x9;&#x9;{&#xA;            int i, j, k, m;&#xA;            int iglob, jglob;&#xA;            int L1, L2;&#xA;            int ist1, iend1;&#xA;            int jst1, jend1;&#xA;            double dsspm;&#xA;            double xi, eta, zeta;&#xA;            double q;&#xA;            double u21, u31, u41;&#xA;            double tmp;&#xA;            double u21i, u31i, u41i, u51i;&#xA;            double u21j, u31j, u41j, u51j;&#xA;            double u21k, u31k, u41k, u51k;&#xA;            double u21im1, u31im1, u41im1, u51im1;&#xA;            double u21jm1, u31jm1, u41jm1, u51jm1;&#xA;            double u21km1, u31km1, u41km1, u51km1;&#xA;            dsspm = dssp;&#xA;            &#xA;            for(k = 0; k &lt; nz; k++) &#xA;            {&#xA;                for(j = 2; j &lt; ny+2; j++) &#xA;                {&#xA;                    for(i = 2; i &lt; nx+2; i++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j, i, m] = 0.0d;&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            for(k = 0; k&lt; nz; k++) &#xA;            {&#xA;                zeta = ((double)(k))/(nz-1);&#xA;                for(j = 2; j&lt; ny+2; j++) &#xA;                {&#xA;                    jglob = jpt + j - 2;&#xA;                    eta = ((double)(jglob))/(ny0-1);&#xA;                    for(i = 2; i&lt; nx+2; i++) &#xA;                    {&#xA;                        iglob = ipt + i - 2;&#xA;                        xi = ((double)(iglob))/(nx0-1);&#xA;                        for(m = 0; m &lt; 5; m++) &#xA;                        {&#xA;                            rsd[k, j, i, m] =  ce[0, m]&#xA;                            + ce[1, m] * xi&#xA;                            + ce[2, m] * eta&#xA;                            + ce[3, m] * zeta&#xA;                            + ce[4, m] * xi * xi&#xA;                            + ce[5, m] * eta * eta&#xA;                            + ce[6, m] * zeta * zeta&#xA;                            + ce[7, m] * xi * xi * xi&#xA;                            + ce[8, m] * eta * eta * eta&#xA;                            + ce[9, m] * zeta * zeta * zeta&#xA;                            + ce[10, m] * xi * xi * xi * xi&#xA;                            + ce[11, m] * eta * eta * eta * eta&#xA;                            + ce[12, m] * zeta * zeta * zeta * zeta;&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   communicate and receive/send two rows of data&#xA;            //---------------------------------------------------------------------&#xA;            Exchange30.setParameters(rsd);&#xA;            Exchange30.go();&#xA;            &#xA;            L1 = 0;&#xA;            &#xA;            if(north==-1)&#xA;                L1 = 1;&#xA;                &#xA;            L2 = nx + 1;&#xA;            &#xA;            if(south==-1)&#xA;                L2 = nx;&#xA;&#xA;            ist1 = 1;&#xA;            iend1 = nx;&#xA;            &#xA;            if(north==-1)&#xA;                ist1 = 4;&#xA;                &#xA;            if(south==-1)&#xA;                iend1 = nx - 3;&#xA;                &#xA;            for(k = 1; k&lt;= nz - 2; k++) &#xA;            {&#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = L1; i&lt;= L2; i++) &#xA;                    {&#xA;                        flux[k, j, i, 0] = rsd[k, j+1, i+1, 1];&#xA;                        u21 = rsd[k, j+1, i+1, 1]/rsd[k, j+1, i+1, 0];&#xA;                        q = 0.50d*(rsd[k, j+1, i+1, 1]*rsd[k, j+1, i+1, 1]+rsd[k, j+1, i+1, 2]*rsd[k, j+1, i+1, 2]+rsd[k, j+1, i+1, 3]*rsd[k, j+1, i+1, 3])/rsd[k, j+1, i+1, 0];&#xA;                        flux[k, j, i, 1] = rsd[k, j+1, i+1, 1]*u21 + c2*(rsd[k, j+1, i+1, 4] - q);&#xA;                        flux[k, j, i, 2] = rsd[k, j+1, i+1, 2] * u21;&#xA;                        flux[k, j, i, 3] = rsd[k, j+1, i+1, 3] * u21;&#xA;                        flux[k, j, i, 4] = (c1*rsd[k, j+1, i+1, 4] - c2*q)*u21;&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            for(k = 1; k&lt;= nz - 2; k++) &#xA;            {&#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, i+1, m] =  frct[k, j+1, i+1, m] - tx2 * (flux[k, j, i+1, m] - flux[k, j, i-1, m]);&#xA;                        }&#xA;                    }&#xA;                    &#xA;                    for(i = ist; i&lt;= L2; i++) &#xA;                    {&#xA;                        tmp   = 1.0d/rsd[k, j+1, i+1, 0];&#xA;                        u21i = tmp * rsd[k, j+1, i+1, 1];&#xA;                        u31i = tmp * rsd[k, j+1, i+1, 2];&#xA;                        u41i = tmp * rsd[k, j+1, i+1, 3];&#xA;                        u51i = tmp * rsd[k, j+1, i+1, 4];&#xA;                        tmp   = 1.0d/rsd[k, j+1, i, 0];&#xA;                        u21im1 = tmp*rsd[k, j+1, i, 1];&#xA;                        u31im1 = tmp*rsd[k, j+1, i, 2];&#xA;                        u41im1 = tmp*rsd[k, j+1, i, 3];&#xA;                        u51im1 = tmp*rsd[k, j+1, i, 4];&#xA;&#xA;                        flux[k, j, i, 1] = (4.0d/3.0d)*tx3*(u21i - u21im1);&#xA;                        flux[k, j, i, 2] = tx3 * (u31i - u31im1);&#xA;                        flux[k, j, i, 3] = tx3 * (u41i - u41im1);&#xA;                        flux[k, j, i, 4] = 0.50d*(1.0d-c1*c5)*tx3*&#xA;                         ((pow2(u21i)+pow2(u31i)+pow2(u41i))&#xA;                         -(pow2(u21im1)+pow2(u31im1)+pow2(u41im1)))&#xA;                         + (1.0d/6.0d)*tx3*(pow2(u21i) - pow2(u21im1))+c1*c5*tx3*(u51i-u51im1);&#xA;                    }&#xA;                    &#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        frct[k, j+1, i+1, 0] = frct[k, j+1, i+1, 0]+dx1*tx1*(rsd[k, j+1, i, 0]-2.0d*rsd[k, j+1, i+1, 0]+rsd[k, j+1, i+2, 0]);&#xA;                        frct[k, j+1, i+1, 1] = frct[k, j+1, i+1, 1]+tx3*c3*c4*(flux[k, j, i+1, 1]-flux[k, j, i, 1])+dx2*tx1*(rsd[k, j+1, i, 1]-2.0d*rsd[k, j+1, i+1, 1]+rsd[k, j+1, i+2, 1]);&#xA;                        frct[k, j+1, i+1, 2] = frct[k, j+1, i+1, 2]+tx3*c3*c4*(flux[k, j, i+1, 2]-flux[k, j, i, 2])+dx3*tx1*(rsd[k, j+1, i, 2]-2.0d*rsd[k, j+1, i+1, 2]+rsd[k, j+1, i+2, 2]);&#xA;                        frct[k, j+1, i+1, 3] = frct[k, j+1, i+1, 3]+tx3*c3*c4*(flux[k, j, i+1, 3]-flux[k, j, i, 3])+dx4*tx1*(rsd[k, j+1, i, 3]-2.0d*rsd[k, j+1, i+1, 3]+rsd[k, j+1, i+2, 3]);&#xA;                        frct[k, j+1, i+1, 4] = frct[k, j+1, i+1, 4]+tx3*c3*c4*(flux[k, j, i+1, 4]-flux[k, j, i, 4])+dx5*tx1*(rsd[k, j+1, i, 4]-2.0d*rsd[k, j+1, i+1, 4]+rsd[k, j+1, i+2, 4]);&#xA;                    }&#xA;                    &#xA;                    //---------------------------------------------------------------------&#xA;                    //   Fourth-order dissipation&#xA;                    //---------------------------------------------------------------------&#xA;                    if(north==-1) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, 3, m] = frct[k, j+1, 3, m]-dsspm*(+5.0d*rsd[k, j+1, 3, m]-4.0d*rsd[k, j+1, 4, m]+rsd[k, j+1, 5, m]);&#xA;                            frct[k, j+1, 4, m] = frct[k, j+1, 4, m]-dsspm*(-4.0d*rsd[k, j+1, 3, m]+6.0d*rsd[k, j+1, 4, m]-4.0d*rsd[k, j+1, 5, m]+rsd[k, j+1, 6, m]);&#xA;                        }&#xA;                    }&#xA;                    &#xA;                    for(i = ist1; i&lt;=iend1; i++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, i+1, m] = frct[k, j+1, i+1, m]-dsspm*(rsd[k, j+1, i-1, m]-&#xA;                            4.0d*rsd[k, j+1, i, m]+6.0d*rsd[k, j+1, i+1, m]-4.0d*rsd[k, j+1, i+2, m]+rsd[k, j+1, i+3, m]);&#xA;                        }&#xA;                    }&#xA;                    &#xA;                    if(south==-1) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, nx-1, m] = frct[k, j+1, nx-1, m]-dsspm*(rsd[k, j+1, nx-3, m]-4.0d*rsd[k, j+1, nx-2, m]+6.0d*rsd[k, j+1, nx-1, m]-4.0d*rsd[k, j+1, nx, m]);&#xA;                            frct[k, j+1, nx, m]   = frct[k, j+1, nx, m]  -dsspm*(rsd[k, j+1, nx-2, m]-4.0d*rsd[k, j+1, nx-1, m]+5.0d*rsd[k, j+1, nx, m]);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#x9;&#x9;&#x9;&#xA;            //---------------------------------------------------------------------&#xA;            //   communicate and receive/send two rows of data&#xA;            //---------------------------------------------------------------------&#xA;            Exchange31.setParameters(rsd);&#xA;            Exchange31.go();&#xA;            L1 = 0;&#xA;            &#xA;            if(west==-1)&#xA;                L1 = 1;&#xA;                &#xA;            L2 = ny + 1;&#xA;            &#xA;            if(east==-1)&#xA;                L2 = ny;&#xA;                &#xA;            jst1 = 1;&#xA;            jend1 = ny;&#xA;            &#xA;            if(west==-1)&#xA;                jst1 = 4;&#xA;                &#xA;            if(east==-1)&#xA;                jend1 = ny - 3;&#xA;                &#xA;            for(k = 1; k&lt;= nz - 2; k++) &#xA;            {&#xA;                for(j = L1; j&lt;= L2; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        flux[k, j, i, 0] = rsd[k, j+1, i+1, 2];&#xA;                        u31 = rsd[k, j+1, i+1, 2] / rsd[k, j+1, i+1, 0];&#xA;                        q          = 0.50d*(rsd[k, j+1, i+1, 1]*rsd[k, j+1, i+1, 1]+rsd[k, j+1, i+1, 2]*rsd[k, j+1, i+1, 2]&#xA;                                        +rsd[k, j+1, i+1, 3]*rsd[k, j+1, i+1, 3])/rsd[k, j+1, i+1, 0];&#xA;                        flux[k, j, i, 1] =     rsd[k, j+1, i+1, 1]*u31;&#xA;                        flux[k, j, i, 2] =     rsd[k, j+1, i+1, 2]*u31+c2*(rsd[k, j+1, i+1, 4]-q);&#xA;                        flux[k, j, i, 3] =     rsd[k, j+1, i+1, 3]*u31;&#xA;                        flux[k, j, i, 4] = (c1*rsd[k, j+1, i+1, 4]-c2*q)*u31;&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            for(k = 1; k&lt;= nz - 2; k++) &#xA;            {&#xA;                for(i = ist; i&lt;= iend; i++) &#xA;                {&#xA;                    for(j = jst; j&lt;= jend; j++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, i+1, m] =  frct[k, j+1, i+1, m] - ty2 * (flux[k, j+1, i, m] - flux[k, j-1, i, m]);&#xA;                        }&#xA;                    }&#xA;                }&#xA;                &#xA;                for(j = jst; j&lt;= L2; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        tmp = 1.0d / rsd[k, j+1, i+1, 0];&#xA;                        u21j = tmp * rsd[k, j+1, i+1, 1];&#xA;                        u31j = tmp * rsd[k, j+1, i+1, 2];&#xA;                        u41j = tmp * rsd[k, j+1, i+1, 3];&#xA;                        u51j = tmp * rsd[k, j+1, i+1, 4];&#xA;                        tmp = 1.0d / rsd[k, j, i+1, 0];&#xA;                        u21jm1 = tmp*rsd[k, j, i+1, 1];&#xA;                        u31jm1 = tmp*rsd[k, j, i+1, 2];&#xA;                        u41jm1 = tmp*rsd[k, j, i+1, 3];&#xA;                        u51jm1 = tmp*rsd[k, j, i+1, 4];&#xA;                        flux[k, j, i, 1] = ty3*(u21j-u21jm1);&#xA;                        flux[k, j, i, 2] = (4.0d/3.0d)*ty3*(u31j-u31jm1);&#xA;                        flux[k, j, i, 3] = ty3*(u41j-u41jm1);&#xA;                        flux[k, j, i, 4] = 0.50d*(1.0d-c1*c5)*ty3*((pow2(u21j)+pow2(u31j)+pow2(u41j))-(pow2(u21jm1)+pow2(u31jm1)+pow2(u41jm1)))+(1.0d/6.0d)*ty3*(pow2(u31j)-pow2(u31jm1))+c1*c5*ty3*(u51j-u51jm1);&#xA;                    }&#xA;                }&#xA;                &#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        frct[k, j+1, i+1, 0] = frct[k, j+1, i+1, 0]+dy1*ty1*(rsd[k, j, i+1, 0]-2.0d*rsd[k, j+1, i+1, 0]+rsd[k, j+2, i+1, 0]);&#xA;                        frct[k, j+1, i+1, 1] = frct[k, j+1, i+1, 1]+ty3*c3*c4*(flux[k, j+1, i, 1]-flux[k, j, i, 1])+dy2*ty1*(rsd[k, j, i+1, 1]-2.0d*rsd[k, j+1, i+1, 1]+rsd[k, j+2, i+1, 1]);&#xA;                        frct[k, j+1, i+1, 2] = frct[k, j+1, i+1, 2]+ty3*c3*c4*(flux[k, j+1, i, 2]-flux[k, j, i, 2])+dy3*ty1*(rsd[k, j, i+1, 2]-2.0d*rsd[k, j+1, i+1, 2]+rsd[k, j+2, i+1, 2]);&#xA;                        frct[k, j+1, i+1, 3] = frct[k, j+1, i+1, 3]+ty3*c3*c4*(flux[k, j+1, i, 3]-flux[k, j, i, 3])+dy4*ty1*(rsd[k, j, i+1, 3]-2.0d*rsd[k, j+1, i+1, 3]+rsd[k, j+2, i+1, 3]);&#xA;                        frct[k, j+1, i+1, 4] = frct[k, j+1, i+1, 4]+ty3*c3*c4*(flux[k, j+1, i, 4]-flux[k, j, i, 4])+dy5*ty1*(rsd[k, j, i+1, 4]-2.0d*rsd[k, j+1, i+1, 4]+rsd[k, j+2, i+1, 4]);&#xA;                    }&#xA;                }&#xA;                &#xA;                //---------------------------------------------------------------------&#xA;                //   fourth-order dissipation&#xA;                //---------------------------------------------------------------------&#xA;                if(west==-1) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, 3, i+1, m] = frct[k, 3, i+1, m]-dsspm*(+5.0d*rsd[k, 3, i+1, m]-4.0d*rsd[k, 4, i+1, m]+rsd[k, 5, i+1, m]);&#xA;                            frct[k, 4, i+1, m] = frct[k, 4, i+1, m]-dsspm*(-4.0d*rsd[k, 3, i+1, m]+6.0d*rsd[k, 4, i+1, m]-4.0d*rsd[k, 5, i+1, m]+rsd[k, 6, i+1, m]);&#xA;                        }&#xA;                    }&#xA;                }&#xA;                &#xA;                for(j = jst1; j&lt;= jend1; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, i+1, m]=frct[k, j+1, i+1, m]-dsspm*(rsd[k, j-1, i+1, m]-4.0d*rsd[k, j, i+1, m]+6.0d*rsd[k, j+1, i+1, m]-4.0d*rsd[k, j+2, i+1, m]+rsd[k, j+3, i+1, m]);&#xA;                        }&#xA;                    }&#xA;                }&#xA;                &#xA;                if(east==-1) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++)&#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, ny-1, i+1, m] = frct[k, ny-1, i+1, m]-dsspm*(rsd[k, ny-3, i+1, m]-4.0d*rsd[k, ny-2, i+1, m]+6.0d*rsd[k, ny-1, i+1, m]-4.0d*rsd[k, ny, i+1, m]);&#xA;                            frct[k, ny, i+1, m] = frct[k, ny, i+1, m]-dsspm*(rsd[k, ny-2, i+1, m]-4.0d*rsd[k, ny-1, i+1, m]+5.0d*rsd[k, ny, i+1, m]);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   zeta-direction flux differences&#xA;            //---------------------------------------------------------------------&#xA;            for(k = 0; k&lt; nz; k++) &#xA;            {&#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        flux[k, j, i, 0] = rsd[k, j+1, i+1, 3];&#xA;                        u41 = rsd[k, j+1, i+1, 3] / rsd[k, j+1, i+1, 0];&#xA;                        q = 0.50d*(rsd[k, j+1, i+1, 1]*rsd[k, j+1, i+1, 1]+rsd[k, j+1, i+1, 2]*rsd[k, j+1, i+1, 2]+rsd[k, j+1, i+1, 3]*rsd[k, j+1, i+1, 3])/rsd[k, j+1, i+1, 0];&#xA;                        flux[k, j, i, 1] =rsd[k, j+1, i+1, 1] * u41;&#xA;                        flux[k, j, i, 2] =rsd[k, j+1, i+1, 2] * u41;&#xA;                        flux[k, j, i, 3] =rsd[k, j+1, i+1, 3] * u41 + c2*(rsd[k, j+1, i+1, 4] - q);&#xA;                        flux[k, j, i, 4] =(c1*rsd[k, j+1, i+1, 4]-c2*q)*u41;&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            for(k = 1; k&lt;= nz - 2; k++) &#xA;            {&#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, i+1, m] =  frct[k, j+1, i+1, m] - tz2 * (flux[k+1, j, i, m] - flux[k-1, j, i, m]);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            for(k = 1; k&lt; nz; k++) &#xA;            {&#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        tmp = 1.0d / rsd[k, j+1, i+1, 0];&#xA;                        u21k = tmp * rsd[k, j+1, i+1, 1];&#xA;                        u31k = tmp * rsd[k, j+1, i+1, 2];&#xA;                        u41k = tmp * rsd[k, j+1, i+1, 3];&#xA;                        u51k = tmp * rsd[k, j+1, i+1, 4];&#xA;&#xA;                        tmp = 1.0d / rsd[k-1, j+1, i+1, 0];&#xA;                        u21km1 = tmp*rsd[k-1, j+1, i+1, 1];&#xA;                        u31km1 = tmp*rsd[k-1, j+1, i+1, 2];&#xA;                        u41km1 = tmp*rsd[k-1, j+1, i+1, 3];&#xA;                        u51km1 = tmp*rsd[k-1, j+1, i+1, 4];&#xA;&#xA;                        flux[k, j, i, 1] = tz3 * (u21k - u21km1);&#xA;                        flux[k, j, i, 2] = tz3 * (u31k - u31km1);&#xA;                        flux[k, j, i, 3] = (4.0d/3.0d) * tz3 * (u41k - u41km1);&#xA;                        flux[k, j, i, 4] = 0.50d*(1.0d-c1*c5)*tz3*((pow2(u21k)+pow2(u31k)+pow2(u41k))-(pow2(u21km1)+pow2(u31km1)+pow2(u41km1)))+(1.0d/6.0d)*tz3*(pow2(u41k)-pow2(u41km1))+c1*c5*tz3*(u51k-u51km1);&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            for(k = 1; k&lt;= nz - 2; k++) &#xA;            {&#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        frct[k, j+1, i+1, 0] = frct[k, j+1, i+1, 0]+dz1*tz1*(rsd[k+1, j+1, i+1, 0]-2.0d*rsd[k, j+1, i+1, 0]+rsd[k-1, j+1, i+1, 0]);&#xA;                        frct[k, j+1, i+1, 1] = frct[k, j+1, i+1, 1]+tz3*c3*c4*(flux[k+1, j, i, 1]-flux[k, j, i, 1])+dz2*tz1*(rsd[k+1, j+1, i+1, 1]-2.0d*rsd[k, j+1, i+1, 1]+rsd[k-1, j+1, i+1, 1]);&#xA;                        frct[k, j+1, i+1, 2] = frct[k, j+1, i+1, 2]+tz3*c3*c4*(flux[k+1, j, i, 2]-flux[k, j, i, 2])+dz3*tz1*(rsd[k+1, j+1, i+1, 2]-2.0d*rsd[k, j+1, i+1, 2]+rsd[k-1, j+1, i+1, 2]);&#xA;                        frct[k, j+1, i+1, 3] = frct[k, j+1, i+1, 3]+tz3*c3*c4*(flux[k+1, j, i, 3]-flux[k, j, i, 3])+dz4*tz1*(rsd[k+1, j+1, i+1, 3]-2.0d*rsd[k, j+1, i+1, 3]+rsd[k-1, j+1, i+1, 3]);&#xA;                        frct[k, j+1, i+1, 4] = frct[k, j+1, i+1, 4]+tz3*c3*c4*(flux[k+1, j, i, 4]-flux[k, j, i, 4])+dz5*tz1*(rsd[k+1, j+1, i+1, 4]-2.0d*rsd[k, j+1, i+1, 4]+rsd[k-1, j+1, i+1, 4]);&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   fourth-order dissipation&#xA;            //---------------------------------------------------------------------&#xA;            for(j = jst; j&lt;= jend; j++) &#xA;            {&#xA;                for(i = ist; i&lt;= iend; i++) &#xA;                {&#xA;                    for(m = 0; m&lt; 5; m++) &#xA;                    {&#xA;                        frct[1, j+1, i+1, m] = frct[1, j+1, i+1, m]-dsspm*(+5.0d*rsd[1, j+1, i+1, m]-4.0d*rsd[2, j+1, i+1, m]+rsd[3, j+1, i+1, m]);&#xA;                        frct[2, j+1, i+1, m] = frct[2, j+1, i+1, m]-dsspm*(-4.0d*rsd[1, j+1, i+1, m]+6.0d*rsd[2, j+1, i+1, m]-4.0d*rsd[3, j+1, i+1, m]+rsd[4, j+1, i+1, m]);&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            for(k = 3; k&lt;= nz - 4; k++) &#xA;            {&#xA;                for(j = jst; j&lt;= jend; j++) &#xA;                {&#xA;                    for(i = ist; i&lt;= iend; i++) &#xA;                    {&#xA;                        for(m = 0; m&lt; 5; m++) &#xA;                        {&#xA;                            frct[k, j+1, i+1, m] = frct[k, j+1, i+1, m]-dsspm*(rsd[k-2, j+1, i+1, m]-4.0d*rsd[k-1, j+1, i+1, m]+6.0d*rsd[k, j+1, i+1, m]-4.0d*rsd[k+1, j+1, i+1, m]+rsd[k+2, j+1, i+1, m]);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            for(j = jst; j&lt;= jend; j++) &#xA;            {&#xA;                for(i = ist; i&lt;= iend; i++) &#xA;                {&#xA;                    for(m = 0; m&lt; 5; m++) &#xA;                    {&#xA;                        frct[nz-3, j+1, i+1, m] = frct[nz-3, j+1, i+1, m]-dsspm*(rsd[nz-5, j+1, i+1, m]- 4.0d*rsd[nz-4, j+1, i+1, m]+6.0d*rsd[nz-3, j+1, i+1, m]-4.0d*rsd[nz-2, j+1, i+1, m]);&#xA;                        frct[nz-2, j+1, i+1, m] = frct[nz-2, j+1, i+1, m]-dsspm*(rsd[nz-4, j+1, i+1, m]- 4.0d*rsd[nz-3, j+1, i+1, m]+5.0d*rsd[nz-2, j+1, i+1, m]);&#xA;                    }&#xA;                }&#xA;            }&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public static double pow2(double p) { return p * p; } &#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="IERhsImpl.cs" srcType="user" uri="impl.lu.ERhsImpl/bin/1.0.0.0/IERhsImpl.dll" versionId="1.0.0.0">
          <dependency>lu.problem_size.Instance_LU/bin/1.0.0.0/IInstance_LU.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>%WORKSPACE/impl.lu.ERhsImpl/bin/1.0.0.0/BaseIERhsImpl.dll</dependency>
          <dependency>lu.ERhs/bin/1.0.0.0/IERhs.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
      </sources>
      <visualDescription h="48" w="136" x="153" y="112">
        <color b="121" g="98" r="70"/>
      </visualDescription>
      <port name="problem">
        <visualDescription h="10" w="10" x="134" y="84"/>
        <slice pRef="problem" sRef="exchange30"/>
        <slice pRef="problem" sRef="exchange31"/>
      </port>
      <port name="x">
        <visualDescription h="10" w="10" x="29" y="3"/>
        <slice pRef="x" sRef="exchange30"/>
        <slice pRef="x" sRef="exchange31"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="86" y="7"/>
        <slice pRef="mpi" sRef="exchange30"/>
        <slice pRef="mpi" sRef="exchange31"/>
      </port>
      <port name="y">
        <visualDescription h="10" w="10" x="120" y="5"/>
        <slice pRef="y" sRef="exchange30"/>
        <slice pRef="y" sRef="exchange31"/>
      </port>
      <port name="blocks">
        <visualDescription h="10" w="10" x="47" y="42"/>
        <slice pRef="blocks" sRef="exchange30"/>
        <slice pRef="blocks" sRef="exchange31"/>
      </port>
      <externalReferences>MPI</externalReferences>
      <parameter iname="IInstance_LU" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="IERhsImpl" private="false" uRef="erhs" visibleInterface="true">
      <super cRef="base" uRef="erhs"/>
      <slices cRef="blocks_info" replica="0" uRef="blocks" sliceName="blocks" transitive="true">
        <visualDescription h="10" w="10" x="0" y="21"/>
      </slices>
      <slices cRef="problem_data" replica="0" uRef="problem" sliceName="problem" transitive="true">
        <visualDescription h="10" w="10" x="113" y="18"/>
      </slices>
      <slices cRef="x" replica="0" uRef="cell" sliceName="x" transitive="true">
        <visualDescription h="10" w="10" x="35" y="27"/>
      </slices>
      <slices cRef="mpi" replica="0" uRef="mpi" sliceName="mpi" transitive="true">
        <visualDescription h="10" w="10" x="11" y="22"/>
      </slices>
      <slices cRef="y" replica="0" uRef="cell" sliceName="y" transitive="true">
        <visualDescription h="10" w="10" x="35" y="27"/>
      </slices>
      <slices cRef="exchange30" replica="0" uRef="exchange1" sliceName="exchange30" transitive="false">
        <visualDescription h="10" w="10" x="24" y="24"/>
        <port>blocks</port>
        <port>problem</port>
        <port>x</port>
        <port>mpi</port>
        <port>y</port>
      </slices>
      <slices cRef="exchange31" replica="0" uRef="exchange1" sliceName="exchange31" transitive="false">
        <visualDescription h="10" w="10" x="66" y="22"/>
        <port>blocks</port>
        <port>problem</port>
        <port>x</port>
        <port>mpi</port>
        <port>y</port>
      </slices>
      <visualDescription h="40" w="80" x="206" y="229"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@1ab5deb1295025097082" varId="n">
      <originRef>base</originRef>
      <originRef>exchange30</originRef>
      <originRef>shift_to_west</originRef>
      <originRef>direction</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="erhs"/>
      <visualDescription h="20" w="20" x="117" y="195"/>
    </enumerator>
  </componentInfo>
</component:component>