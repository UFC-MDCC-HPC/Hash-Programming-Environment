<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000e3917aac499520a2709e11cb51bd6cb3823ba18bc3c5be2b7455c650babf9e08b1084e33c4f761ecfab1d9877fc1a0bf1147c41ebb7f56707d8ce1c51cec65869f9f7d6f6f6f9569a1fee700fc4dba0b1f77ce486eb8258fa0bcfbc877a5b284e4cb4b9d55908f5a5cac1ead06885cd220e2c80696ebb41118dfb01222b2099e" isAbstract="false" kind="Computation" name="ExactRHSImpl" packagePath="impl.sp.data">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000027130544e3f329d23ba519ced2a0053e29039ba760754b0ee044236fbc276d66abafcbe81cf15aa7afd18d50c91ba2da45ecbb7450c857d73fddba0da924ce8130b93d9d32d38730a33a01d4d553bdafcc4eae1911ace949b8600cc6bd2a23b5a6b68133b052b32997db747a7d2e3cd1f3d25af8253bd3bdd750ca5eb4d1f686" localRef="base" location="common.data.ExactRHS/ExactRHS.hpe" name="ExactRHS" package="common.data" version="1.0.0.0">
        <visualDescription h="66" w="123" x="254" y="175">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <port hash_component_UID="002400000480000094000000060200000024000052534131000400001100000009b97ce4f3981d78e251ff90894751a2f19e3d7fcafeadee8da1cb93890a7d9ed59b4773f575afc0782c61b877ac17cea1ab4429bfd162c1bdff0b6c7fe9d07f8e9ccdcd219b58671c77cf6cfbada633e18309cb4c2e518fedeaa6aecf435a12dc4a18c8384c15d61dfab5a2056f58c2bcf936823b8d84a8c5cc5e25827a1598" localRef="problem_data" location="common.data.ProblemDefinition/ProblemDefinition.hpe" name="ProblemDefinition" package="common.data" exposed="true">
          <visualDescription h="30" w="167" x="368" y="355">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds uRef="problem">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cfe94b8926d4a7de4f70d204303375a68658c9c988f5e0ec7f1f3dce28b75501399411f8002d0637e06b03a2849ef779a22e26ae137759213f595fd13ccb5101bb6f07e7560df0d8b1beadc8dacecefd49c7844d298e78991b98dd4650ec7bf0b26716727a7bc437f39a5ccede87c7db6829de68c511abb9d0b4e3644bcf66ad" localRef="blocks_info" location="common.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="common.datapartition" exposed="true">
          <visualDescription h="30" w="132" x="368" y="475">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="blocks">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds uRef="exact_rhs">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000796ff7bbb33560060ee9951c4f8242d987089c0c50af1d3a6ab2f92466788c33bfa42e66a347c4206d81a948be78598f82f386b898f40714662cb0134d02313a7e06d04944957cb9149a5069ebfcc65b58711afd15bfbe6f3144cf719a1d8c90833890d5ed1eac7e3b8a657a774a065ca04588c7743c47a41fe59e21cd7767a4" localRef="instance" location="sp.problem_size.Instance_SP/Instance_SP.hpe" name="Instance_SP" package="sp.problem_size" exposed="false">
      <visualDescription h="40" w="83" x="90" y="136">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="166" y="413">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance" varName="I"/>
    <interface iRef="IExactRHSImpl" nArgs="2">
      <slice isRef="problem">
        <originRef cRef="problem_data" iRef="IProblemDefinition"/>
        <visualDescription h="10" w="10" x="60" y="25"/>
      </slice>
      <slice isRef="blocks">
        <originRef cRef="blocks_info" iRef="IBlocks"/>
        <visualDescription h="10" w="10" x="45" y="27"/>
      </slice>
      <slice isRef="exact_solution">
        <originRef cRef="exact_solution" iRef="IExactSolution"/>
        <visualDescription h="10" w="10" x="31" y="23"/>
      </slice>
      <protocol xsi:type="component:ActionCombinatorParType" label="hPE.frontend.kinds.activate.model.protocol.HParAction@1f6576" repeat="0">
        <visualDescription h="150" w="70" x="75" y="75"/>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@13e2817" repeat="0" sliceRef="exact_solution">
          <visualDescription h="50" w="50" x="10" y="50"/>
        </action>
      </protocol>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.datapartition.BlocksInfo;&#xA;using common.data.ProblemDefinition;&#xA;using sp.problem_size.Instance_SP;&#xA;using common.problem_size.Class;&#xA;using common.data.ExactSolution;&#xA;using common.data.ExactRHS;&#xA;&#xA;namespace impl.sp.data.ExactRHSImpl { &#xA;&#xA;public abstract class BaseIExactRHSImpl&lt;I, C>: Computation, BaseIExactRHS&lt;I, C>&#xA;where I:IInstance_SP&lt;C>&#xA;where C:IClass&#xA;{&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;protected int[,] cell_size, cell_low, start, end;&#x9;&#x9;&#xA;protected int ncells;&#x9;&#x9;&#xA;protected double[,,,,] forcing;&#x9;&#x9;&#xA;protected double[,] ue, buf;&#xA;protected double[] cuf, q;&#x9;&#x9;&#xA;protected double dnzm1, dnym1, dnxm1, c1, c2, dssp, &#xA;               tx2, dx1tx1, xxcon1, dx2tx1, xxcon2, dx3tx1, dx4tx1, xxcon3, xxcon4, xxcon5, dx5tx1, &#xA;&#x9;&#x9;&#x9;   ty2, dy1ty1, yycon2, dy2ty1, yycon1, dy3ty1, dy4ty1, yycon3, yycon4, yycon5, dy5ty1,&#xA;&#x9;&#x9;&#x9;   tz2, dz1tz1, zzcon2, dz2tz1, zzcon1, dz3tz1, dz4tz1, zzcon3, zzcon4, zzcon5, dz5tz1;&#xA;&#x9;&#x9;&#xA;private IBlocks blocks = null;&#xA;&#xA;public IBlocks Blocks {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.blocks == null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.blocks = (IBlocks) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;cell_size = Blocks.cell_size;&#xA;&#x9;&#x9;&#x9;cell_low = Blocks.cell_low;&#xA;&#x9;&#x9;&#x9;start = Blocks.cell_start;&#xA;&#x9;&#x9;&#x9;end = Blocks.cell_end;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return this.blocks;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IProblemDefinition&lt;I, C> problem = null;&#xA;&#xA;public IProblemDefinition&lt;I, C> Problem {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.problem == null) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;int MAX_CELL_DIM = Problem.MAX_CELL_DIM;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;ue = new double[MAX_CELL_DIM + 4, 5];  &#xA;            buf = new double[MAX_CELL_DIM + 4, 5]; &#xA;&#x9;&#x9;&#x9;cuf = new double[MAX_CELL_DIM + 4];    &#xA;&#x9;&#x9;&#x9;q = new double[MAX_CELL_DIM + 4];      &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;ncells = Problem.NCells;&#xA;&#x9;&#x9;&#x9;forcing = Problem.Field_forcing;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dnzm1 = Constants.dnzm1;&#xA;&#x9;&#x9;&#x9;dnym1 = Constants.dnym1;&#xA;&#x9;&#x9;&#x9;dnxm1 = Constants.dnxm1;&#xA;&#x9;&#x9;&#x9;c1 = Constants.c1;&#xA;&#x9;&#x9;&#x9;c2 = Constants.c2;&#xA;&#x9;&#x9;&#x9;dssp = Constants.dssp;&#xA;&#x9;&#x9;&#x9;tx2 = Constants.tx2;&#xA;&#x9;&#x9;&#x9;dx1tx1 = Constants.dx1tx1;&#xA;&#x9;&#x9;&#x9;dx2tx1 = Constants.dx2tx1;&#xA;&#x9;&#x9;    dx3tx1 = Constants.dx3tx1;&#xA;&#x9;&#x9;&#x9;dx5tx1 = Constants.dx5tx1;&#xA;&#x9;&#x9;&#x9;dx4tx1 = Constants.dx4tx1;&#xA;&#x9;&#x9;&#x9;xxcon1 = Constants.xxcon1;&#xA;&#x9;&#x9;&#x9;xxcon2 = Constants.xxcon2;&#xA;&#x9;&#x9;&#x9;xxcon3 = Constants.xxcon3;&#xA;&#x9;&#x9;&#x9;xxcon4 = Constants.xxcon4;&#xA;&#x9;&#x9;&#x9;xxcon5 = Constants.xxcon5;&#xA;&#x9;&#x9;&#x9;ty2 = Constants.ty2; &#xA;&#x9;&#x9;    dy1ty1 = Constants.dy1ty1;&#xA;&#x9;&#x9;&#x9;yycon2 = Constants.yycon2;&#xA;&#x9;&#x9;&#x9;dy2ty1 = Constants.dy2ty1;&#xA;&#x9;&#x9;&#x9;yycon1 = Constants.yycon1;&#xA;&#x9;&#x9;&#x9;dy3ty1 = Constants.dy3ty1;&#xA;&#x9;&#x9;    dy4ty1 = Constants.dy4ty1;&#xA;&#x9;&#x9;&#x9;yycon3 = Constants.yycon3;&#xA;&#x9;&#x9;&#x9;yycon4 = Constants.yycon4;&#xA;&#x9;&#x9;&#x9;yycon5 = Constants.yycon5;&#xA;&#x9;&#x9;&#x9;dy5ty1 = Constants.dy5ty1;&#xA;&#x9;&#x9;&#x9;tz2 = Constants.tx2;&#xA;&#x9;&#x9;&#x9;dz1tz1 = Constants.dz1tz1;&#xA;&#x9;&#x9;&#x9;dz2tz1 = Constants.dz2tz1;&#xA;&#x9;&#x9;    dz3tz1 = Constants.dz3tz1;&#xA;&#x9;&#x9;&#x9;dz5tz1 = Constants.dz5tz1;&#xA;&#x9;&#x9;&#x9;dz4tz1 = Constants.dz4tz1;&#xA;&#x9;&#x9;&#x9;zzcon1 = Constants.zzcon1;&#xA;&#x9;&#x9;&#x9;zzcon2 = Constants.zzcon2;&#xA;&#x9;&#x9;&#x9;zzcon3 = Constants.zzcon3;&#xA;&#x9;&#x9;&#x9;zzcon4 = Constants.zzcon4;&#xA;&#x9;&#x9;&#x9;zzcon5 = Constants.zzcon5;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return this.problem;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IExactSolution exact_solution = null;&#xA;&#xA;protected IExactSolution Exact_solution {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.exact_solution == null)&#xA;&#x9;&#x9;&#x9;this.exact_solution = (IExactSolution) Services.getPort(&quot;exact_solution&quot;);&#xA;&#x9;&#x9;return this.exact_solution;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;abstract public void compute(); &#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIExactRHSImpl.cs" srcType="base" uri="impl.sp.data.ExactRHSImpl/bin/1.0.0.0/BaseIExactRHSImpl.dll" versionId="1.0.0.0">
          <dependency>common.datapartition.BlocksInfo/bin/1.0.0.0/IBlocks.dll</dependency>
          <dependency>common.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>sp.problem_size.Instance_SP/bin/1.0.0.0/IInstance_SP.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>common.data.ExactSolution/bin/1.0.0.0/IExactSolution.dll</dependency>
          <dependency>common.data.ExactRHS/bin/1.0.0.0/BaseIExactRHS.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using sp.problem_size.Instance_SP;&#xA;using common.problem_size.Class;&#xA;using common.data.ExactRHS;&#xA;using common.data.ProblemDefinition;&#xA;&#xA;namespace impl.sp.data.ExactRHSImpl { &#xA;&#xA;&#x9;public class IExactRHSImpl&lt;I, C> : BaseIExactRHSImpl&lt;I, C>, IExactRHS&lt;I, C>&#xA;&#x9;&#x9;where I:IInstance_SP&lt;C>&#xA;&#x9;&#x9;where C:IClass&#xA;&#x9;{&#xA;&#x9;&#xA;&#x9;&#x9;public IExactRHSImpl() &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;public override void compute() { &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;    double[] dtemp = new double[5];&#xA;&#x9;&#x9;    double xi, eta, zeta, dtpp;&#xA;&#x9;&#x9;    int c, m, i, j, k, ip1, im1, jp1, jm1, km1, kp1, ksize, jsize, isize;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;    // int ii, jj, kk;  /* +2 offset required by C# arrays for Fortran with -2 lower limit */&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;    for (c = 0; c &lt; ncells; c++)&#xA;&#x9;&#x9;    {&#xA;&#x9;&#x9;        ksize = cell_size[c, 2] + 2;&#xA;&#x9;&#x9;        jsize = cell_size[c, 1] + 2;&#xA;&#x9;&#x9;        isize = cell_size[c, 0] + 2;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        //      initialize                                  &#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;        {&#xA;&#x9;&#x9;            for (k = 2; k &lt; ksize; k++)&#xA;&#x9;&#x9;            {&#xA;&#x9;&#x9;                for (j = 2; j &lt; jsize; j++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (i = 2; i &lt; isize; i++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = 0.0d;&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;            }&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        //      xi-direction flux differences                      &#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;&#x9;&#x9;        {&#xA;&#x9;&#x9;            zeta = (k - 2 + cell_low[c, 2]) * dnzm1;&#xA;&#x9;&#x9;            for (j = start[c, 1]; j &lt; jsize - end[c, 1]; j++)&#xA;&#x9;&#x9;            {&#xA;&#x9;&#x9;                eta = (j - 2 + cell_low[c, 1]) * dnym1;&#xA;&#x9;&#x9;                for (i = 2 * start[c, 0] - 4; i &lt;= isize + 1 - 2 * end[c, 0]; i++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    xi = (i - 2 + cell_low[c, 0]) * dnxm1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    Exact_solution.setParameters(xi, eta, zeta, dtemp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.compute();&#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        ue[i, m] = dtemp[m]; // OK ue[i,m]&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    dtpp = 1.0d / dtemp[0];&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    for (m = 1; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        buf[i, m] = dtpp * dtemp[m]; // OK buf[i,m]&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    cuf[i] = buf[i, 1] * buf[i, 1];&#xA;&#x9;&#x9;                    buf[i, 0] = cuf[i] + buf[i, 2] * buf[i, 2] +&#xA;&#x9;&#x9;                                         buf[i, 3] * buf[i, 3];&#xA;&#x9;&#x9;                    q[i] = 0.5d * (buf[i, 1] * ue[i, 1] + buf[i, 2] * ue[i, 2] +&#xA;&#x9;&#x9;                                                         buf[i, 3] * ue[i, 3]);&#xA;&#x9;&#x9;                    // OK cuf[i], buf[i,0], q[i]&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    im1 = i - 1;&#xA;&#x9;&#x9;                    ip1 = i + 1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    double b = forcing[c, k, j, i, 0];&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 0] = forcing[c, k, j, i, 0] -&#xA;&#x9;&#x9;                                     tx2 * (ue[ip1, 1] - ue[im1, 1]) +&#xA;&#x9;&#x9;                                     dx1tx1 * (ue[ip1, 0] - 2.0d * ue[i, 0] + ue[im1, 0]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 1] = forcing[c, k, j, i, 1] - tx2 * (&#xA;&#x9;&#x9;                                    (ue[ip1, 1] * buf[ip1, 1] + c2 * (ue[ip1, 4] - q[ip1])) -&#xA;&#x9;&#x9;                                    (ue[im1, 1] * buf[im1, 1] + c2 * (ue[im1, 4] - q[im1]))) +&#xA;&#x9;&#x9;                                     xxcon1 * (buf[ip1, 1] - 2.0d * buf[i, 1] + buf[im1, 1]) +&#xA;&#x9;&#x9;                                     dx2tx1 * (ue[ip1, 1] - 2.0d * ue[i, 1] + ue[im1, 1]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 2] = forcing[c, k, j, i, 2] - tx2 * (&#xA;&#x9;&#x9;                                     ue[ip1, 2] * buf[ip1, 1] - ue[im1, 2] * buf[im1, 1]) +&#xA;&#x9;&#x9;                                     xxcon2 * (buf[ip1, 2] - 2.0d * buf[i, 2] + buf[im1, 2]) +&#xA;&#x9;&#x9;                                     dx3tx1 * (ue[ip1, 2] - 2.0d * ue[i, 2] + ue[im1, 2]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 3] = forcing[c, k, j, i, 3] - tx2 * (&#xA;&#x9;&#x9;                                     ue[ip1, 3] * buf[ip1, 1] - ue[im1, 3] * buf[im1, 1]) +&#xA;&#x9;&#x9;                                     xxcon2 * (buf[ip1, 3] - 2.0d * buf[i, 3] + buf[im1, 3]) +&#xA;&#x9;&#x9;                                     dx4tx1 * (ue[ip1, 3] - 2.0d * ue[i, 3] + ue[im1, 3]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 4] = forcing[c, k, j, i, 4] - tx2 * (&#xA;&#x9;&#x9;                                     buf[ip1, 1] * (c1 * ue[ip1, 4] - c2 * q[ip1]) -&#xA;&#x9;&#x9;                                     buf[im1, 1] * (c1 * ue[im1, 4] - c2 * q[im1])) +&#xA;&#x9;&#x9;                                     0.5d * xxcon3 * (buf[ip1, 0] - 2.0d * buf[i, 0] +&#xA;&#x9;&#x9;                                                   buf[im1, 0]) +&#xA;&#x9;&#x9;                                     xxcon4 * (cuf[ip1] - 2.0d * cuf[i] + cuf[im1]) +&#xA;&#x9;&#x9;                                     xxcon5 * (buf[ip1, 4] - 2.0d * buf[i, 4] + buf[im1, 4]) +&#xA;&#x9;&#x9;                                     dx5tx1 * (ue[ip1, 4] - 2.0d * ue[i, 4] + ue[im1, 4]);&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                //---------------------------------------------------------------------&#xA;&#x9;&#x9;                //            Fourth-order dissipation                         &#xA;&#x9;&#x9;                //---------------------------------------------------------------------&#xA;&#x9;&#x9;                if (start[c, 0] > 2)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    &#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        i = 3;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                            (5.0d * ue[i, m] - 4.0d * ue[i + 1, m] + ue[i + 2, m]);&#xA;&#x9;&#x9;                        i = 4;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                           (-4.0d * ue[i - 1, m] + 6.0d * ue[i, m] -&#xA;&#x9;&#x9;                                             4.0d * ue[i + 1, m] + ue[i + 2, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (i = 3 * start[c, 0] - 4; i &lt; isize - 3 * end[c, 0]; i++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                         (ue[i - 2, m] - 4.0d * ue[i - 1, m] +&#xA;&#x9;&#x9;                                          6.0d * ue[i, m] - 4.0d * ue[i + 1, m] + ue[i + 2, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                if (end[c, 0] > 0)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        i = isize - 3;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                           (ue[i - 2, m] - 4.0d * ue[i - 1, m] +&#xA;&#x9;&#x9;                                            6.0d * ue[i, m] - 4.0d * ue[i + 1, m]);&#xA;&#x9;&#x9;                        i = isize - 2;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                           (ue[i - 2, m] - 4.0d * ue[i - 1, m] + 5.0d * ue[i, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;            }&#xA;&#x9;&#x9;        } // end k&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        //  eta-direction flux differences             &#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;&#x9;&#x9;        {&#xA;&#x9;&#x9;            zeta = (k - 2 + cell_low[c, 2]) * dnzm1;&#xA;&#x9;&#x9;            for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;&#x9;&#x9;            {&#xA;&#x9;&#x9;                xi = (i - 2 + cell_low[c, 0]) * dnxm1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (j = 2 * start[c, 1] - 4; j &lt;= jsize + 1 - 2 * end[c, 1]; j++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    eta = (j - 2 + cell_low[c, 1]) * dnym1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    Exact_solution.setParameters(xi, eta, zeta, dtemp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.compute();&#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        ue[j, m] = dtemp[m];&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                    dtpp = 1.0d / dtemp[0];&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    for (m = 1; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        buf[j, m] = dtpp * dtemp[m];&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    cuf[j] = buf[j, 2] * buf[j, 2];&#xA;&#x9;&#x9;                    buf[j, 0] = cuf[j] + buf[j, 1] * buf[j, 1] +&#xA;&#x9;&#x9;                                         buf[j, 3] * buf[j, 3];&#xA;&#x9;&#x9;                    q[j] = 0.5d * (buf[j, 1] * ue[j, 1] +&#xA;&#x9;&#x9;                                  buf[j, 2] * ue[j, 2] +&#xA;&#x9;&#x9;                                  buf[j, 3] * ue[j, 3]);&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (j = start[c, 1]; j &lt; jsize - end[c, 1]; j++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    jm1 = j - 1;&#xA;&#x9;&#x9;                    jp1 = j + 1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 0] = forcing[c, k, j, i, 0] -&#xA;&#x9;&#x9;                          ty2 * (ue[jp1, 2] - ue[jm1, 2]) +&#xA;&#x9;&#x9;                          dy1ty1 * (ue[jp1, 0] - 2.0d * ue[j, 0] + ue[jm1, 0]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 1] = forcing[c, k, j, i, 1] - ty2 * (&#xA;&#x9;&#x9;                          ue[jp1, 1] * buf[jp1, 2] - ue[jm1, 1] * buf[jm1, 2]) +&#xA;&#x9;&#x9;                          yycon2 * (buf[jp1, 1] - 2.0d * buf[j, 1] + buf[jm1, 1]) +&#xA;&#x9;&#x9;                          dy2ty1 * (ue[jp1, 1] - 2.0d * ue[j, 1] + ue[jm1, 1]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 2] = forcing[c, k, j, i, 2] - ty2 * (&#xA;&#x9;&#x9;                          (ue[jp1, 2] * buf[jp1, 2] + c2 * (ue[jp1, 4] - q[jp1])) -&#xA;&#x9;&#x9;                          (ue[jm1, 2] * buf[jm1, 2] + c2 * (ue[jm1, 4] - q[jm1]))) +&#xA;&#x9;&#x9;                          yycon1 * (buf[jp1, 2] - 2.0d * buf[j, 2] + buf[jm1, 2]) +&#xA;&#x9;&#x9;                          dy3ty1 * (ue[jp1, 2] - 2.0d * ue[j, 2] + ue[jm1, 2]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 3] = forcing[c, k, j, i, 3] - ty2 * (&#xA;&#x9;&#x9;                          ue[jp1, 3] * buf[jp1, 2] - ue[jm1, 3] * buf[jm1, 2]) +&#xA;&#x9;&#x9;                          yycon2 * (buf[jp1, 3] - 2.0d * buf[j, 3] + buf[jm1, 3]) +&#xA;&#x9;&#x9;                          dy4ty1 * (ue[jp1, 3] - 2.0d * ue[j, 3] + ue[jm1, 3]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 4] = forcing[c, k, j, i, 4] - ty2 * (&#xA;&#x9;&#x9;                          buf[jp1, 2] * (c1 * ue[jp1, 4] - c2 * q[jp1]) -&#xA;&#x9;&#x9;                          buf[jm1, 2] * (c1 * ue[jm1, 4] - c2 * q[jm1])) +&#xA;&#x9;&#x9;                          0.5d * yycon3 * (buf[jp1, 0] - 2.0d * buf[j, 0] +&#xA;&#x9;&#x9;                                        buf[jm1, 0]) +&#xA;&#x9;&#x9;                          yycon4 * (cuf[jp1] - 2.0d * cuf[j] + cuf[jm1]) +&#xA;&#x9;&#x9;                          yycon5 * (buf[jp1, 4] - 2.0d * buf[j, 4] + buf[jm1, 4]) +&#xA;&#x9;&#x9;                          dy5ty1 * (ue[jp1, 4] - 2.0d * ue[j, 4] + ue[jm1, 4]);&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                //---------------------------------------------------------------------&#xA;&#x9;&#x9;                //            Fourth-order dissipation                      &#xA;&#x9;&#x9;                //---------------------------------------------------------------------&#xA;&#x9;&#x9;                if (start[c, 1] > 2)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        j = 3;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                  (5.0d * ue[j, m] - 4.0d * ue[j + 1, m] + ue[j + 2, m]);&#xA;&#x9;&#x9;                        j = 4;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                 (-4.0d * ue[j - 1, m] + 6.0d * ue[j, m] -&#xA;&#x9;&#x9;                                   4.0d * ue[j + 1, m] + ue[j + 2, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (j = 3 * start[c, 1] - 4; j &lt; jsize - 3 * end[c, 1]; j++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                              (ue[j - 2, m] - 4.0d * ue[j - 1, m] +&#xA;&#x9;&#x9;                               6.0d * ue[j, m] - 4.0d * ue[j + 1, m] + ue[j + 2, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                if (end[c, 1] > 0)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        j = jsize - 3;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                 (ue[j - 2, m] - 4.0d * ue[j - 1, m] +&#xA;&#x9;&#x9;                                  6.0d * ue[j, m] - 4.0d * ue[j + 1, m]);&#xA;&#x9;&#x9;                        j = jsize - 2;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                 (ue[j - 2, m] - 4.0d * ue[j - 1, m] + 5.0d * ue[j, m]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;            }&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        //      zeta-direction flux differences                      &#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        for (j = start[c, 1]; j &lt; jsize - end[c, 1]; j++)&#xA;&#x9;&#x9;        {&#xA;&#x9;&#x9;            eta = (j - 2 + cell_low[c, 1]) * dnym1;&#xA;&#x9;&#x9;            for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;&#x9;&#x9;            {&#xA;&#x9;&#x9;                xi = (i - 2 + cell_low[c, 0]) * dnxm1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (k = 2 * start[c, 2] - 4; k &lt;= ksize + 1 - 2 * end[c, 2]; k++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    zeta = (k - 2 + cell_low[c, 2]) * dnzm1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.setParameters(xi, eta, zeta, dtemp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.compute();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;                    for (m = 0; m &lt;= 4; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        ue[k, m] = dtemp[m];&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    dtpp = 1.0d / dtemp[0];&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    for (m = 1; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        buf[k, m] = dtpp * dtemp[m];&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    cuf[k] = buf[k, 3] * buf[k, 3];&#xA;&#x9;&#x9;                    buf[k, 0] = cuf[k] + buf[k, 1] * buf[k, 1] +&#xA;&#x9;&#x9;                               buf[k, 2] * buf[k, 2];&#xA;&#x9;&#x9;                    q[k] = 0.5d * (buf[k, 1] * ue[k, 1] + buf[k, 2] * ue[k, 2] +&#xA;&#x9;&#x9;                                  buf[k, 3] * ue[k, 3]);&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    km1 = k - 1;&#xA;&#x9;&#x9;                    kp1 = k + 1;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 0] = forcing[c, k, j, i, 0] -&#xA;&#x9;&#x9;                           tz2 * (ue[kp1, 3] - ue[km1, 3]) +&#xA;&#x9;&#x9;                           dz1tz1 * (ue[kp1, 0] - 2.0d * ue[k, 0] + ue[km1, 0]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 1] = forcing[c, k, j, i, 1] - tz2 * (&#xA;&#x9;&#x9;                           ue[kp1, 1] * buf[kp1, 3] - ue[km1, 1] * buf[km1, 3]) +&#xA;&#x9;&#x9;                           zzcon2 * (buf[kp1, 1] - 2.0d * buf[k, 1] + buf[km1, 1]) +&#xA;&#x9;&#x9;                           dz2tz1 * (ue[kp1, 1] - 2.0d * ue[k, 1] + ue[km1, 1]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 2] = forcing[c, k, j, i, 2] - tz2 * (&#xA;&#x9;&#x9;                           ue[kp1, 2] * buf[kp1, 3] - ue[km1, 2] * buf[km1, 3]) +&#xA;&#x9;&#x9;                           zzcon2 * (buf[kp1, 2] - 2.0d * buf[k, 2] + buf[km1, 2]) +&#xA;&#x9;&#x9;                           dz3tz1 * (ue[kp1, 2] - 2.0d * ue[k, 2] + ue[km1, 2]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 3] = forcing[c, k, j, i, 3] - tz2 * (&#xA;&#x9;&#x9;                          (ue[kp1, 3] * buf[kp1, 3] + c2 * (ue[kp1, 4] - q[kp1])) -&#xA;&#x9;&#x9;                          (ue[km1, 3] * buf[km1, 3] + c2 * (ue[km1, 4] - q[km1]))) +&#xA;&#x9;&#x9;                          zzcon1 * (buf[kp1, 3] - 2.0d * buf[k, 3] + buf[km1, 3]) +&#xA;&#x9;&#x9;                          dz4tz1 * (ue[kp1, 3] - 2.0d * ue[k, 3] + ue[km1, 3]);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                    forcing[c, k, j, i, 4] = forcing[c, k, j, i, 4] - tz2 * (&#xA;&#x9;&#x9;                           buf[kp1, 3] * (c1 * ue[kp1, 4] - c2 * q[kp1]) -&#xA;&#x9;&#x9;                           buf[km1, 3] * (c1 * ue[km1, 4] - c2 * q[km1])) +&#xA;&#x9;&#x9;                           0.5d * zzcon3 * (buf[kp1, 0] - 2.0d * buf[k, 0]&#xA;&#x9;&#x9;                                        + buf[km1, 0]) +&#xA;&#x9;&#x9;                           zzcon4 * (cuf[kp1] - 2.0d * cuf[k] + cuf[km1]) +&#xA;&#x9;&#x9;                           zzcon5 * (buf[kp1, 4] - 2.0d * buf[k, 4] + buf[km1, 4]) +&#xA;&#x9;&#x9;                           dz5tz1 * (ue[kp1, 4] - 2.0d * ue[k, 4] + ue[km1, 4]);&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                //---------------------------------------------------------------------&#xA;&#x9;&#x9;                //            Fourth-order dissipation&#xA;&#x9;&#x9;                //---------------------------------------------------------------------&#xA;&#x9;&#x9;                if (start[c, 2] > 2)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        k = 3;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                  (5.0d * ue[k, m] - 4.0d * ue[k + 1, m] + ue[k + 2, m]);&#xA;&#x9;&#x9;                        k = 4;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                 (-4.0d * ue[k - 1, m] + 6.0d * ue[k, m] -&#xA;&#x9;&#x9;                                   4.0d * ue[k + 1, m] + ue[k + 2, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (k = 3 * start[c, 2] - 4; k &lt; ksize - 3 * end[c, 2]; k++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                              (ue[k - 2, m] - 4.0d * ue[k - 1, m] +&#xA;&#x9;&#x9;                               6.0d * ue[k, m] - 4.0d * ue[k + 1, m] + ue[k + 2, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;                if (end[c, 2] > 0)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        k = ksize - 3;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                                 (ue[k - 2, m] - 4.0d * ue[k - 1, m] +&#xA;&#x9;&#x9;                                  6.0d * ue[k, m] - 4.0d * ue[k + 1, m]);&#xA;&#x9;&#x9;                        k = ksize - 2;&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = forcing[c, k, j, i, m] - dssp *&#xA;&#x9;&#x9;                              (ue[k - 2, m] - 4.0d * ue[k - 1, m] + 5.0d * ue[k, m]);&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;            }&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        // now change the sign of the forcing function, &#xA;&#x9;&#x9;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;        for (m = 0; m &lt; 5; m++)&#xA;&#x9;&#x9;        {&#xA;&#x9;&#x9;            for (k = start[c, 2]; k &lt; ksize - end[c, 2]; k++)&#xA;&#x9;&#x9;            {&#xA;&#x9;&#x9;                for (j = start[c, 1]; j &lt; jsize - end[c, 1]; j++)&#xA;&#x9;&#x9;                {&#xA;&#x9;&#x9;                    for (i = start[c, 0]; i &lt; isize - end[c, 0]; i++)&#xA;&#x9;&#x9;                    {&#xA;&#x9;&#x9;                        forcing[c, k, j, i, m] = -1.0d * forcing[c, k, j, i, m];&#xA;&#x9;&#x9;                    }&#xA;&#x9;&#x9;                }&#xA;&#x9;&#x9;            }&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;    } // cell loop&#xA;&#x9;&#x9;} // end activate method &#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;" fileType="library" name="IExactRHSImpl.cs" srcType="user" uri="impl.sp.data.ExactRHSImpl/bin/1.0.0.0/IExactRHSImpl.dll" versionId="1.0.0.0">
          <dependency>sp.problem_size.Instance_SP/bin/1.0.0.0/IInstance_SP.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>%WORKSPACE/impl.sp.data.ExactRHSImpl/bin/1.0.0.0/BaseIExactRHSImpl.dll</dependency>
          <dependency>common.data.ExactRHS/bin/1.0.0.0/IExactRHS.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="102" x="118" y="119">
        <color b="255" g="255" r="0"/>
      </visualDescription>
      <port name="problem">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem" sRef="problem"/>
      </port>
      <port name="blocks">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks" sRef="blocks"/>
      </port>
      <parameter iname="IInstance_SP" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="IExactRHSImpl" private="false" uRef="exact_rhs" visibleInterface="true">
      <super cRef="base" uRef="exact_rhs"/>
      <slices cRef="problem_data" replica="0" uRef="problem" sliceName="problem" transitive="false">
        <visualDescription h="10" w="10" x="60" y="25"/>
      </slices>
      <slices cRef="blocks_info" replica="0" uRef="blocks" sliceName="blocks" transitive="false">
        <visualDescription h="10" w="10" x="45" y="27"/>
      </slices>
      <slices cRef="exact_solution" replica="0" uRef="exact_solution" sliceName="exact_solution" transitive="false">
        <visualDescription h="10" w="10" x="31" y="23"/>
      </slices>
      <visualDescription h="40" w="80" x="161" y="278"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@1b2533d1295099559883" varId="n">
      <originRef>base</originRef>
      <originRef>problem_data</originRef>
      <originRef>speed</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="exact_rhs"/>
      <visualDescription h="60" w="61" x="27" y="289"/>
    </enumerator>
  </componentInfo>
</component:component>