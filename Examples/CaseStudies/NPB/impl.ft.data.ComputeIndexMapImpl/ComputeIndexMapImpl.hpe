<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000005f852af721b0986a98720b58398f1e609ee371b8abe61a20d3392f572c31a7893f74e9ad4dc16cfc01d00c8c95b644d3527079c3f8dc7b06bb13b6e70150849067285e40d6141f7bc014558a22a01384e124d8ff4a25c6d10a9284ac29fe7426ee0b439236c2d5417a86498ccbe4d2bff20a6fcad14dda499a521aa3390ad094" isAbstract="false" kind="Computation" name="ComputeIndexMapImpl" packagePath="impl.ft.data">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000e15a779b547a3a8ab3dc12f8f882aa7f1545994fae9457faf7eeea36f690c93c118acc97fd9020e363774970c9561e2cc3d6e3511ab4f3cc16efaec904a748644df7318eefdd94f8974898fdd79750a0459a5690adcd028e84fb6da973dadcb3ff50fce47424c94c6d063594e3a7be09ec294bc9babda0718bff86eda4ef4981" localRef="base" location="ft.data.ComputeIndexMap/ComputeIndexMap.hpe" name="ComputeIndexMap" package="ft.data" version="1.0.0.0">
        <visualDescription h="30" w="50" x="311" y="470">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c1356ca9b2057b2cdaf7bab412ca75fdb39021bca4f4290f39b086b8aa2f45538e23e1af3360a5e85aa8ee62ffd7b1d4b10715fa0b45745b78c496d18d59a1ccb3f0c4a6bb86a302fa6a6ddeba6177db23a3c2f83b018ebec4ecc0035817670de32d367791764d224e4a7387fdcc3f9eea7a6f591775c9b9e13b978d62d79de8" localRef="problem_data" location="ft.data.ProblemDefinition/ProblemDefinition.hpe" name="ProblemDefinition" package="ft.data" exposed="true">
          <visualDescription h="37" w="111" x="139" y="482">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds uRef="problem">
            <visualDescription h="10" w="10" x="49" y="4"/>
          </unitBounds>
        </port>
        <port hash_component_UID="002400000480000094000000060200000024000052534131000400001100000095e97e58b9ed73eb389d5d67e242ab61d50128486f43ba0afe8ff6bd8d08840f848c22ffad8acff4ef3bd7a6d1af46fd7413f1bf81704ab9152bd0c5c5f6ee8c128f38a1196abb5039132524dd4a4294fda2d6a19c7f1019c9e09736f96280d2298e765b3e51d1f8e779c60cbb6ccff11284a8fd11385bfdb9a8c9d44ada4f92" localRef="blocks_info" location="ft.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="ft.datapartition" exposed="true">
          <visualDescription h="38" w="94" x="458" y="487">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="blocks">
            <visualDescription h="10" w="10" x="6" y="15"/>
          </unitBounds>
        </port>
        <unitBounds uRef="compute_index_map">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000697d9c305173b3189be802c3ff79de737b8611ceba3908e4e506fe84eb48c13ee6bcff5465c546d3f17f9c4be9fd4c3730beb0cdbb834a2cd9a48238e589010fa646d420fa851da6a7fa169817d907191deacca367dd83200354bbdc96d3c5f2986b7d7a8bfceacfa46cb59e4a094c15363a95dc6f9f631d9955d8a6cc75f593" localRef="instance_type" location="ft.problem_size.Instance_FT/Instance_FT.hpe" name="Instance_FT" package="ft.problem_size" exposed="false">
      <visualDescription h="47" w="134" x="172" y="229">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="599" y="121">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance_type" varName="I"/>
    <interface iRef="IComputeIndexMapImpl" nArgs="2">
      <slice isRef="problem">
        <originRef cRef="problem_data" iRef="IProblemDefinition"/>
        <visualDescription h="10" w="10" x="60" y="24"/>
      </slice>
      <slice isRef="blocks">
        <originRef cRef="blocks_info" iRef="IBlocks"/>
        <visualDescription h="10" w="10" x="112" y="17"/>
      </slice>
      <slice isRef="instance">
        <originRef cRef="instance_type" iRef="IInstance"/>
        <visualDescription h="10" w="10" x="3" y="18"/>
      </slice>
      <protocol xsi:type="component:ActionSkipType" label="hPE.frontend.kinds.activate.model.protocol.HSkipAction@1cac353d" repeat="0">
        <visualDescription h="50" w="50" x="75" y="75"/>
      </protocol>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using ft.datapartition.BlocksInfo;&#xA;using ft.data.ProblemDefinition;&#xA;using ft.problem_size.Instance_FT;&#xA;using common.problem_size.Class;&#xA;using ft.problem_size.Instance;&#xA;using ft.data.ComputeIndexMap;&#xA;&#xA;namespace impl.ft.data.ComputeIndexMapImpl { &#xA;&#x9;public abstract class BaseIComputeIndexMapImpl&lt;I, C>: Computation, BaseIComputeIndexMap&lt;I, C>&#xA;&#x9;where I:IInstance_FT&lt;C>&#xA;&#x9;where C:IClass{&#xA;&#x9;   &#xA;&#x9;&#x9;#region data&#xA;&#x9;&#x9;&#x9;protected int nx, ny, nz;&#xA;&#x9;&#x9;&#x9;protected int[] xstart, ystart, zstart;&#xA;&#x9;&#x9;&#x9;protected int layout_0D, layout_1D, layout_2D, layout_type;&#xA;&#x9;&#x9;&#x9;override public void initialize(){&#xA;&#x9;&#x9;&#x9;&#x9;nx = Instance.nx;&#xA;&#x9;&#x9;&#x9;&#x9;ny = Instance.ny;&#xA;&#x9;&#x9;&#x9;&#x9;nz = Instance.nz;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;xstart = Blocks.xstart;&#xA;&#x9;&#x9;&#x9;&#x9;ystart = Blocks.ystart;&#xA;&#x9;&#x9;&#x9;&#x9;zstart = Blocks.zstart;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;layout_0D = Constants.layout_0D;&#xA;&#x9;&#x9;&#x9;&#x9;layout_1D = Constants.layout_1D;&#xA;&#x9;&#x9;&#x9;&#x9;layout_2D = Constants.layout_2D;&#xA;&#x9;&#x9;&#x9;&#x9;layout_type = Problem.layout_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#x9;&#xA;&#x9;&#x9;private IBlocks blocks = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IBlocks Blocks {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.blocks == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.blocks = (IBlocks) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.blocks;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IProblemDefinition&lt;I, C> problem = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IProblemDefinition&lt;I, C> Problem {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.problem;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private I instance = default(I);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected I Instance {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.instance == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.instance = (I) Services.getPort(&quot;instance_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.instance;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;abstract public int go(); &#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseIComputeIndexMapImpl.cs" srcType="base" uri="impl.ft.data.ComputeIndexMapImpl/bin/1.0.0.0/BaseIComputeIndexMapImpl.dll" versionId="1.0.0.0">
          <dependency>ft.datapartition.BlocksInfo/bin/1.0.0.0/IBlocks.dll</dependency>
          <dependency>ft.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>ft.problem_size.Instance_FT/bin/1.0.0.0/IInstance_FT.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>ft.problem_size.Instance/bin/1.0.0.0/IInstance.dll</dependency>
          <dependency>ft.data.ComputeIndexMap/bin/1.0.0.0/BaseIComputeIndexMap.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using ft.problem_size.Instance_FT;&#xA;using common.problem_size.Class;&#xA;using ft.data.ComputeIndexMap;&#xA;&#xA;namespace impl.ft.data.ComputeIndexMapImpl { &#xA;&#x9;public class IComputeIndexMapImpl&lt;I, C> : BaseIComputeIndexMapImpl&lt;I, C>, IComputeIndexMap&lt;I, C>&#xA;&#x9;where I:IInstance_FT&lt;C>&#xA;&#x9;where C:IClass{&#xA;&#x9;   &#xA;&#x9;    private double[] twiddle;&#xA;&#x9;    private int d1, d2, d3;&#xA;&#x9;&#xA;&#x9;&#x9;public IComputeIndexMapImpl() { &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public override int go() { &#xA;            int i, j, k, ii, ii2, jj, ij2, kk;&#xA;            double ap;&#xA;            double alpha=.000001, pi = Math.PI;&#xA;&#xA;            ap = -4.0 * alpha * pi * pi;&#xA;&#xA;            int idx;&#xA;            if(layout_type == layout_0D) { //xyz layout&#xA;                for(i = 1; i &lt;= d1; i++) {&#xA;                    ii =  (int)mod(i+xstart[2]-2+nx/2, nx) - nx/2;&#xA;                    ii2 = ii*ii;&#xA;                    for(j = 1; j &lt;= d2; j++) {&#xA;                        jj = (int)mod(j+ystart[2]-2+ny/2, ny) - ny/2;&#xA;                        ij2 = jj * jj + ii2;&#xA;                        for(k = 1; k &lt;= d3; k++) {&#xA;                            kk = (int)mod(k+zstart[2]-2+nz/2, nz) - nz/2;&#xA;                            idx = (((k-1)*d2+(j-1))*d1+(i-1));//twiddle[k, j, i]&#xA;                            twiddle[idx] = Math.Exp(ap * (double)(kk * kk + ij2));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            else if(layout_type == layout_1D) { // zxy layout &#xA;                for(i = 1; i &lt;= d2; i++) {&#xA;                    ii =  (int)mod(i+xstart[2]-2+nx/2, nx) - nx/2;&#xA;                    ii2 = ii*ii;&#xA;                    for(j = 1; j &lt;= d3; j++) {&#xA;                        jj = (int)mod(j+ystart[2]-2+ny/2, ny) - ny/2;&#xA;                        ij2 = jj*jj+ii2;&#xA;                        for(k = 1; k &lt;= d1; k++) {&#xA;                            kk = (int)mod(k+zstart[2]-2+nz/2, nz) - nz/2;&#xA;                            idx = (((j-1)*d2+(i-1))*d1+(k-1)); //twiddle[j, i, k] &#xA;                            twiddle[idx] = Math.Exp(ap * (double)(kk * kk + ij2));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            else if(layout_type == layout_2D) { // zxy layout&#xA;                for(i = 1; i &lt;= d2; i++) {&#xA;                    ii =  (int)mod(i+xstart[2]-2+nx/2, nx) - nx/2;&#xA;                    ii2 = ii*ii;&#xA;                    for(j = 1; j &lt;= d3; j++) {&#xA;                        jj = (int)mod(j+ystart[2]-2+ny/2, ny) - ny/2;&#xA;                        ij2 = jj*jj+ii2;&#xA;                        for(k = 1; k &lt;= d1; k++) {&#xA;                            kk = (int)mod(k+zstart[2]-2+nz/2, nz) - nz/2;&#xA;                            idx = (((j-1)*d2+(i-1))*d1+(k-1)); // twiddle[j,i,k]&#xA;                            twiddle[idx] = Math.Exp(ap * (double)(kk*kk+ij2));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            else {&#xA;                Console.WriteLine(&quot; Unknown layout type &quot; + layout_type);&#xA;            }&#xA;&#x9;&#x9;    return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public static double mod(double a, double b) { return (a % b); }&#xA;&#x9;&#x9;public void setParameters(double[] twiddle, int d1, int d2, int d3){&#xA;&#x9;&#x9;   this.twiddle = twiddle;&#xA;&#x9;&#x9;   this.d1 = d1;&#xA;&#x9;&#x9;   this.d2 = d2;&#xA;&#x9;&#x9;   this.d3 = d3;&#xD;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="IComputeIndexMapImpl.cs" srcType="user" uri="impl.ft.data.ComputeIndexMapImpl/bin/1.0.0.0/IComputeIndexMapImpl.dll" versionId="1.0.0.0">
          <dependency>ft.problem_size.Instance_FT/bin/1.0.0.0/IInstance_FT.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>%WORKSPACE/impl.ft.data.ComputeIndexMapImpl/bin/1.0.0.0/BaseIComputeIndexMapImpl.dll</dependency>
          <dependency>ft.data.ComputeIndexMap/bin/1.0.0.0/IComputeIndexMap.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="143" x="239" y="262">
        <color b="64" g="0" r="64"/>
      </visualDescription>
      <port name="problem">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem" sRef="problem"/>
      </port>
      <port name="blocks">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks" sRef="blocks"/>
      </port>
      <parameter iname="IInstance_FT" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="IComputeIndexMapImpl" private="false" uRef="compute_index_map" visibleInterface="true">
      <super cRef="base" uRef="compute_index_map"/>
      <slices cRef="problem_data" replica="0" uRef="problem" sliceName="problem" transitive="false">
        <visualDescription h="10" w="10" x="60" y="24"/>
      </slices>
      <slices cRef="blocks_info" replica="0" uRef="blocks" sliceName="blocks" transitive="false">
        <visualDescription h="10" w="10" x="112" y="17"/>
      </slices>
      <slices cRef="instance_type" replica="0" uRef="instance" sliceName="instance" transitive="false">
        <visualDescription h="10" w="10" x="3" y="18"/>
      </slices>
      <visualDescription h="40" w="125" x="298" y="377"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@1ab3c361303241898625" varId="n">
      <originRef>base</originRef>
      <originRef>problem_data</originRef>
      <originRef>u1</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="compute_index_map"/>
      <visualDescription h="41" w="40" x="414" y="400"/>
    </enumerator>
  </componentInfo>
</component:component>