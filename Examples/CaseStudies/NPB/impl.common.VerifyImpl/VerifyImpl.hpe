<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000001fdf1c333e7a360a79b933f434b7bff10ff34eb5f3c0dc8388fb27d56022f3cd84044a75f3c2423262d0b2021ea32d52fecb4950e16a1c6a8ab596d49cc2fac421dcfe345e2caffdc928cbad900d555ddf330cb0dba2fac75e9c7acf38e8cc3a3ca9c3d3435f29f212b8fc9f5bc50991184e61608f578dd8ddf1e75094b0c19a" isAbstract="false" kind="Computation" name="VerifyImpl" packagePath="impl.common">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000029fc77b41fb7c5de814f39f237e021945523e77bbbc6c42e44ee7aac36fe784a1e765312f55425111618e76d2f2c9bc1adfdc77de73b58ec6c9381de84f418e1eb964ac44ea487e5b3712c232172e78e624a351d39f0f982c5bceb3ee2d7ccfc27baaf4a9aebad05639d16d04ba1e709f5e5557b9f43e75cc9071f4a5f003795" localRef="base" location="common.Verify/Verify.hpe" name="Verify" package="common" version="1.0.0.0">
        <visualDescription h="30" w="50" x="197" y="248">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <port hash_component_UID="002400000480000094000000060200000024000052534131000400001100000009b97ce4f3981d78e251ff90894751a2f19e3d7fcafeadee8da1cb93890a7d9ed59b4773f575afc0782c61b877ac17cea1ab4429bfd162c1bdff0b6c7fe9d07f8e9ccdcd219b58671c77cf6cfbada633e18309cb4c2e518fedeaa6aecf435a12dc4a18c8384c15d61dfab5a2056f58c2bcf936823b8d84a8c5cc5e25827a1598" localRef="problem_data" location="common.data.ProblemDefinition/ProblemDefinition.hpe" name="ProblemDefinition" package="common.data" exposed="true">
          <visualDescription h="30" w="146" x="549" y="65">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds uRef="problem">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cfe94b8926d4a7de4f70d204303375a68658c9c988f5e0ec7f1f3dce28b75501399411f8002d0637e06b03a2849ef779a22e26ae137759213f595fd13ccb5101bb6f07e7560df0d8b1beadc8dacecefd49c7844d298e78991b98dd4650ec7bf0b26716727a7bc437f39a5ccede87c7db6829de68c511abb9d0b4e3644bcf66ad" localRef="blocks_info" location="common.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="common.datapartition" exposed="true">
          <visualDescription h="47" w="113" x="558" y="183">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="blocks">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000059fdc60f0095a1142aef66ff82b5e8659158d29c9ae6eedd576a96e33ae1faaddaf78b57c8cab897deeb79b165ed011c3cd25deeeed69da38fc30a1143e39fa67ab658c278a82203de07eafa3dafe7704a84c1fffc42035b92d09563efdfe7b59862d01f598f626efa5cd4eef962fb18970112f8a530495c2a482922a19258b" localRef="mpi" location="environment.MPIDirect/MPIDirect.hpe" name="MPIDirect" package="environment" exposed="true">
          <visualDescription h="30" w="50" x="623" y="300">
            <color b="240" g="32" r="160"/>
          </visualDescription>
          <unitBounds uRef="mpi">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="x" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="30" w="88" x="339" y="382">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="63" y="6"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="y" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="30" w="82" x="213" y="384">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="63" y="6"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="z" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="24" w="73" x="519" y="362">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="63" y="6"/>
          </unitBounds>
        </port>
        <unitBounds uRef="verify">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="265" y="437">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000796ff7bbb33560060ee9951c4f8242d987089c0c50af1d3a6ab2f92466788c33bfa42e66a347c4206d81a948be78598f82f386b898f40714662cb0134d02313a7e06d04944957cb9149a5069ebfcc65b58711afd15bfbe6f3144cf719a1d8c90833890d5ed1eac7e3b8a657a774a065ca04588c7743c47a41fe59e21cd7767a4" localRef="instance" location="sp.problem_size.Instance_SP/Instance_SP.hpe" name="Instance_SP" package="sp.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="137" y="160">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance" varName="I"/>
    <interface iRef="IVerifyImpl" nArgs="2">
      <slice isRef="rhs_norm">
        <originRef cRef="rhs_norm" iRef="IRHSNorm"/>
        <visualDescription h="10" w="10" x="8" y="17"/>
      </slice>
      <slice isRef="error_norm">
        <originRef cRef="error_norm" iRef="IErrorNorm"/>
        <visualDescription h="10" w="10" x="66" y="26"/>
      </slice>
      <slice isRef="copy_faces">
        <originRef cRef="copy_faces" iRef="ICopyFaces"/>
        <visualDescription h="10" w="10" x="228" y="4"/>
      </slice>
      <slice isRef="instance">
        <originRef cRef="instance" iRef="IInstance"/>
        <visualDescription h="10" w="10" x="236" y="23"/>
      </slice>
      <slice isRef="compute_rhs">
        <originRef cRef="compute_rhs" iRef="IComputeRHS"/>
        <visualDescription h="10" w="10" x="0" y="26"/>
      </slice>
      <protocol xsi:type="component:ActionCombinatorParType" label="hPE.frontend.kinds.activate.model.protocol.HParAction@4a1ffacb" repeat="0">
        <visualDescription h="150" w="130" x="75" y="75"/>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@798a4b71" repeat="0" sliceRef="rhs_norm">
          <visualDescription h="50" w="50" x="10" y="50"/>
        </action>
        <action xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@665f260d" repeat="0" sliceRef="error_norm">
          <visualDescription h="50" w="50" x="70" y="50"/>
        </action>
      </protocol>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.topology.Ring;&#xA;using common.datapartition.BlocksInfo;&#xA;using common.data.ProblemDefinition;&#xA;using sp.problem_size.Instance_SP;&#xA;using common.error.RHSNorm;&#xA;using environment.MPIDirect;&#xA;using common.error.ErrorNorm;&#xA;using common.Verify;&#xA;using common.problem_size.Class;&#xA;using common.CopyFaces;&#xA;using common.ComputeRHS;&#xA;&#xA;namespace impl.common.VerifyImpl { &#xA;&#xA;public abstract class BaseIVerifyImpl&lt;I,C>: Computation, BaseIVerify&lt;I,C>&#xA;&#x9;&#x9;where I:IInstance_SP&lt;C>&#xA;&#x9;&#x9;where C:IClass&#xA;{&#xA;&#xA;private I instance = default(I);&#xA;&#xA;protected I Instance {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.instance == null)&#xA;&#x9;&#x9;&#x9;this.instance = (I) Services.getPort(&quot;instance&quot;);&#xA;&#x9;&#x9;return this.instance;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICell z = null;&#xA;&#xA;public ICell Z {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.z == null)&#xA;&#x9;&#x9;&#x9;this.z = (ICell) Services.getPort(&quot;z&quot;);&#xA;&#x9;&#x9;return this.z;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICell x = null;&#xA;&#xA;public ICell X {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.x == null)&#xA;&#x9;&#x9;&#x9;this.x = (ICell) Services.getPort(&quot;x&quot;);&#xA;&#x9;&#x9;return this.x;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICell y = null;&#xA;&#xA;public ICell Y {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.y == null)&#xA;&#x9;&#x9;&#x9;this.y = (ICell) Services.getPort(&quot;y&quot;);&#xA;&#x9;&#x9;return this.y;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBlocks blocks_info = null;&#xA;&#xA;public IBlocks Blocks_info {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.blocks_info == null)&#xA;&#x9;&#x9;&#x9;this.blocks_info = (IBlocks) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;return this.blocks_info;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IProblemDefinition&lt;I,C> problem = null;&#xA;&#xA;public IProblemDefinition&lt;I,C> Problem {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I,C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;return this.problem;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICopyFaces&lt;I,C> copy_faces = null;&#xA;&#xA;protected ICopyFaces&lt;I,C> Copy_faces {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.copy_faces == null)&#xA;&#x9;&#x9;&#x9;this.copy_faces = (ICopyFaces&lt;I,C>) Services.getPort(&quot;copy_faces&quot;);&#xA;&#x9;&#x9;return this.copy_faces;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IComputeRHS&lt;I,C> compute_rhs = null;&#xA;&#xA;protected IComputeRHS&lt;I,C> Compute_rhs {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.compute_rhs == null)&#xA;&#x9;&#x9;&#x9;this.compute_rhs = (IComputeRHS&lt;I,C>) Services.getPort(&quot;compute_rhs&quot;);&#xA;&#x9;&#x9;return this.compute_rhs;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IRHSNorm&lt;I,C> rhs_norm = null;&#xA;&#xA;protected IRHSNorm&lt;I,C> Rhs_norm {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.rhs_norm == null)&#xA;&#x9;&#x9;&#x9;this.rhs_norm = (IRHSNorm&lt;I,C>) Services.getPort(&quot;rhs_norm&quot;);&#xA;&#x9;&#x9;return this.rhs_norm;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IMPIDirect mpi = null;&#xA;&#xA;public IMPIDirect Mpi {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.mpi == null)&#xA;&#x9;&#x9;&#x9;this.mpi = (IMPIDirect) Services.getPort(&quot;mpi&quot;);&#xA;&#x9;&#x9;return this.mpi;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IErrorNorm&lt;I,C> error_norm = null;&#xA;&#xA;protected IErrorNorm&lt;I,C> Error_norm {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.error_norm == null)&#xA;&#x9;&#x9;&#x9;this.error_norm = (IErrorNorm&lt;I,C>) Services.getPort(&quot;error_norm&quot;);&#xA;&#x9;&#x9;return this.error_norm;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;abstract public int go(); &#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIVerifyImpl.cs" srcType="base" uri="impl.common.VerifyImpl/bin/1.0.0.0/BaseIVerifyImpl.dll" versionId="1.0.0.0">
          <dependency>common.topology.Ring/bin/1.0.0.0/ICell.dll</dependency>
          <dependency>common.datapartition.BlocksInfo/bin/1.0.0.0/IBlocks.dll</dependency>
          <dependency>common.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>common.problem_size.Instance/bin/1.0.0.0/IInstance.dll</dependency>
          <dependency>common.error.RHSNorm/bin/1.0.0.0/IRHSNorm.dll</dependency>
          <dependency>environment.MPIDirect/bin/1.0.0.0/IMPIDirect.dll</dependency>
          <dependency>common.error.ErrorNorm/bin/1.0.0.0/IErrorNorm.dll</dependency>
          <dependency>common.datapartition.Blocks3D/bin/1.0.0.0/IBlocks3D.dll</dependency>
          <dependency>common.Verify/bin/1.0.0.0/BaseIVerify.dll</dependency>
          <externalDependency>BMInOut</externalDependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.Verify;&#xA;using common.problem_size.Class;&#xA;using sp.problem_size.Instance_SP;&#xA;using common.problem_size.Instance;&#xA;using NPB3_0_JAV.BMInOut;&#xA;&#xA;namespace impl.common.VerifyImpl { &#xA;&#xA;public class IVerifyImpl&lt;I,C> : BaseIVerifyImpl&lt;I,C>, IVerify&lt;I,C>&#xA;where I:IInstance_SP&lt;C>&#xA;where C:IClass&#xA;{&#xA;&#xA;public IVerifyImpl() { &#xA;&#xA;} &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;private int[] grid_points;&#xA;private static String BMName = &quot;SP&quot;;&#xA;private int verified = -1;&#xA;&#x9;&#x9;&#xA;public int Verified { get { return verified; } }&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;public override int go() { &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;int no_time_steps = Instance.niter_default;&#xA;&#x9;&#x9;double dt = Instance.dt_default;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;grid_points = Problem.grid_points;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;        double[] xcrref = Instance.xcrref, xceref = Instance.xceref,&#xA;                 xcrdif = new double[5], xcedif = new double[5],&#xA;                 xce = Error_norm.xce, xcr = Rhs_norm.xcr;&#xA;        double dtref = Instance.dtref;&#xA;        int m;&#xA;        &#xA;        PROBLEM_CLASS clss = Instance.CLASS;&#xA;&#x9;&#x9;&#x9;&#xA;        //---------------------------------------------------------------------&#xA;        //   compute the error norm and the residual norm, and exit if not printing&#xA;        //---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;&#xA;        // error_norm(xce);&#x9;&#x9;&#xA;&#x9;&#x9;Error_norm.go();&#xA;&#x9;&#x9;&#xA;        // copy_faces();&#xA;&#x9;&#x9;if (Ranks.Length > 1)&#xA;&#x9;&#x9;&#x9;Copy_faces.go();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;Compute_rhs.go();&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;        //rhs_norm(xcr);&#xA;&#x9;&#x9;Rhs_norm.go();&#xA;&#xA;        for (m = 0; m &lt; 5; m++) &#xA;            xcr[m] /= dt;&#xA;&#xA;        //for (m = 0; m &lt; 5; m++)&#xA;        //{&#xA;        //    xcrref[m] = 1.0d;&#xA;        //    xceref[m] = 1.0d;&#xA;        //}&#xA;&#x9;&#x9;&#x9;&#xA;        //---------------------------------------------------------------------&#xA;        //    verification test for residuals if gridsize is either 12X12X12 or &#xA;        //    64X64X64 or 102X102X102 or 162X162X162&#xA;        //---------------------------------------------------------------------&#xA;&#xA;        //---------------------------------------------------------------------&#xA;        //    Compute the difference of solution values and the known reference values.&#xA;        //---------------------------------------------------------------------&#xA;        for (m = 0; m &lt; 5; m++)&#xA;        {&#xA;            xcrdif[m] = Math.Abs((xcr[m] - xcrref[m]) / xcrref[m]);&#xA;            xcedif[m] = Math.Abs((xce[m] - xceref[m]) / xceref[m]);&#xA;        }&#xA;        //---------------------------------------------------------------------&#xA;        //   tolerance level&#xA;        //---------------------------------------------------------------------&#xA;        double epsilon = 1.0E-8d;&#xA;        //---------------------------------------------------------------------&#xA;        //    Output the comparison of computed results to known cases.&#xA;        //---------------------------------------------------------------------&#xA;        if (clss != PROBLEM_CLASS.U)&#xA;        {&#xA;            Console.WriteLine(&quot; Verification being performed for class &quot; + clss);&#xA;            Console.WriteLine(&quot; Accuracy setting for epsilon = &quot; + epsilon);&#xA;            if (Math.Abs(dt - dtref) &lt;= epsilon)&#xA;            {&#xA;                if (verified == -1) verified = 1;&#xA;            }&#xA;            else&#xA;            {&#xA;                verified = 0;&#xA;                clss = PROBLEM_CLASS.U;&#xA;                Console.WriteLine(&quot;DT does not match the reference value of &quot; + dtref);&#xA;            }&#xA;            Console.WriteLine(&quot; Comparison of RMS-norms of residual&quot;);&#xA;        }&#xA;        else&#xA;        {&#xA;            Console.WriteLine(&quot; Unknown CLASS&quot;);&#xA;            Console.WriteLine(&quot; RMS-norms of residual&quot;);&#xA;        }&#xA;        verified = BMResults.printComparisonStatus(clss.ToString()[0], verified, epsilon,&#xA;                                                 xcr, xcrref, xcrdif);&#xA;        if (clss != PROBLEM_CLASS.U)&#xA;        {&#xA;            Console.WriteLine(&quot; Comparison of RMS-norms of solution error&quot;);&#xA;        }&#xA;        else&#xA;        {&#xA;            Console.WriteLine(&quot; RMS-norms of solution error&quot;);&#xA;        }&#xA;        verified = BMResults.printComparisonStatus(clss.ToString()[0], verified, epsilon,&#xA;                                                 xce, xceref, xcedif);&#xA;&#xA;        BMResults.printVerificationStatus(clss.ToString()[0], verified, BMName);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;&#xA;} // end activate method &#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="IVerifyImpl.cs" srcType="user" uri="impl.common.VerifyImpl/bin/1.0.0.0/IVerifyImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/impl.common.VerifyImpl/bin/1.0.0.0/BaseIVerifyImpl.dll</dependency>
          <dependency>common.Verify/bin/1.0.0.0/IVerify.dll</dependency>
          <externalDependency>BMInOut</externalDependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="104" y="68">
        <color b="255" g="0" r="128"/>
      </visualDescription>
      <port name="mpi">
        <visualDescription h="10" w="10" x="92" y="5"/>
        <slice pRef="mpi" sRef="rhs_norm"/>
        <slice pRef="mpi" sRef="error_norm"/>
        <slice pRef="mpi" sRef="copy_faces"/>
      </port>
      <port name="blocks">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks" sRef="rhs_norm"/>
        <slice pRef="blocks" sRef="error_norm"/>
        <slice pRef="blocks" sRef="copy_faces"/>
        <slice pRef="blocks" sRef="compute_rhs"/>
      </port>
      <port name="problem">
        <visualDescription h="10" w="10" x="107" y="40"/>
        <slice pRef="problem" sRef="rhs_norm"/>
        <slice pRef="problem" sRef="error_norm"/>
        <slice pRef="problem" sRef="copy_faces"/>
        <slice pRef="problem" sRef="compute_rhs"/>
      </port>
      <port name="y">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="y" sRef="copy_faces"/>
      </port>
      <port name="z">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="z" sRef="copy_faces"/>
      </port>
      <port name="x">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="x" sRef="copy_faces"/>
      </port>
      <externalReferences>BMInOut</externalReferences>
      <parameter iname="IInstance_SP" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="IVerifyImpl" private="false" uRef="verify" visibleInterface="true">
      <super cRef="base" uRef="verify"/>
      <slices cRef="problem_data" replica="0" uRef="problem" sliceName="problem" transitive="true">
        <visualDescription h="10" w="10" x="32" y="26"/>
      </slices>
      <slices cRef="blocks_info" replica="0" uRef="blocks" sliceName="blocks" transitive="true">
        <visualDescription h="10" w="10" x="50" y="27"/>
      </slices>
      <slices cRef="mpi" replica="0" uRef="mpi" sliceName="mpi" transitive="true">
        <visualDescription h="10" w="10" x="68" y="27"/>
      </slices>
      <slices cRef="y" replica="0" uRef="cell" sliceName="y" transitive="true">
        <visualDescription h="10" w="10" x="35" y="27"/>
      </slices>
      <slices cRef="x" replica="0" uRef="cell" sliceName="x" transitive="true">
        <visualDescription h="10" w="10" x="35" y="27"/>
      </slices>
      <slices cRef="z" replica="0" uRef="cell" sliceName="z" transitive="true">
        <visualDescription h="10" w="10" x="35" y="27"/>
      </slices>
      <slices cRef="rhs_norm" replica="0" uRef="rhs_norm" sliceName="rhs_norm" transitive="false">
        <visualDescription h="10" w="10" x="8" y="17"/>
        <port>problem</port>
        <port>blocks</port>
        <port>mpi</port>
      </slices>
      <slices cRef="error_norm" replica="0" uRef="error_norm" sliceName="error_norm" transitive="false">
        <visualDescription h="10" w="10" x="66" y="26"/>
        <port>blocks</port>
        <port>problem</port>
        <port>mpi</port>
      </slices>
      <slices cRef="copy_faces" replica="0" uRef="copy_faces" sliceName="copy_faces" transitive="false">
        <visualDescription h="10" w="10" x="62" y="4"/>
        <port>blocks</port>
        <port>problem</port>
        <port>y</port>
        <port>mpi</port>
        <port>x</port>
        <port>z</port>
      </slices>
      <slices cRef="instance" replica="0" uRef="instance" sliceName="instance" transitive="false">
        <visualDescription h="10" w="10" x="16" y="23"/>
      </slices>
      <slices cRef="compute_rhs" replica="0" uRef="compute_rhs" sliceName="compute_rhs" transitive="false">
        <visualDescription h="10" w="10" x="0" y="26"/>
        <port>blocks</port>
        <port>problem</port>
      </slices>
      <visualDescription h="40" w="80" x="32" y="280"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@1c777361255142002310" varId="n">
      <originRef>base</originRef>
      <originRef>rhs_norm</originRef>
      <originRef>mpi</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="verify"/>
      <visualDescription h="20" w="20" x="175" y="310"/>
    </enumerator>
  </componentInfo>
</component:component>