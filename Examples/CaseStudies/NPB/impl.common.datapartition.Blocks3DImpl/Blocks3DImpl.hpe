<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000b72fd3158502ef4632454597f3da92b46982f3f00cf0765582e5c7d83235572c4824dd838676063b7d3a0e5b096709c3835211bad9eed0378e6f4b3ee031be0d61dd2717055006a5908f79a2e121eb382f099d01028c3b0e84d987279fc52c76843bc451c9a6d32f31179fb884fee0b317de1267e5eb07f7952455a9a2e0988e" isAbstract="false" kind="Environment" name="Blocks3DImpl" packagePath="impl.common.datapartition">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000001d1817dae53c0527ea6a5fcdb5f56ac2670f8c5f9877066e0e1ee3daa6fe0444129762c763b0ad6771a2b8de6b03402b7f593fe3bdd0340806db57ce27c9f276a56d6f1ba8a2821d0ba72028442622a79fff65f9f60d5e27f6ac2f583b3cd57885fcc259d2743c155947ebbff71ec4e7a7011b23b714bb3166efb35d70f231b1" localRef="base" location="common.datapartition.Blocks3D/Blocks3D.hpe" name="Blocks3D" package="common.datapartition" version="1.0.0.0">
        <visualDescription h="30" w="50" x="298" y="189">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="x" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="30" w="50" x="97" y="426">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="y" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="30" w="50" x="240" y="498">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="z" location="common.topology.Ring/Ring.hpe" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="30" w="50" x="377" y="484">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="cell">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cfe94b8926d4a7de4f70d204303375a68658c9c988f5e0ec7f1f3dce28b75501399411f8002d0637e06b03a2849ef779a22e26ae137759213f595fd13ccb5101bb6f07e7560df0d8b1beadc8dacecefd49c7844d298e78991b98dd4650ec7bf0b26716727a7bc437f39a5ccede87c7db6829de68c511abb9d0b4e3644bcf66ad" localRef="blocks_info" location="common.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="common.datapartition" exposed="true">
          <visualDescription h="53" w="81" x="71" y="331">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds uRef="blocks">
            <visualDescription h="10" w="10" x="32" y="5"/>
          </unitBounds>
        </port>
        <unitBounds uRef="process">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000796ff7bbb33560060ee9951c4f8242d987089c0c50af1d3a6ab2f92466788c33bfa42e66a347c4206d81a948be78598f82f386b898f40714662cb0134d02313a7e06d04944957cb9149a5069ebfcc65b58711afd15bfbe6f3144cf719a1d8c90833890d5ed1eac7e3b8a657a774a065ca04588c7743c47a41fe59e21cd7767a4" localRef="instance" location="sp.problem_size.Instance_SP/Instance_SP.hpe" name="Instance_SP" package="sp.problem_size" exposed="false">
      <visualDescription h="30" w="147" x="542" y="640">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="41" w="175" x="674" y="354">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance" varName="I"/>
    <interface iRef="IBlocks3DImpl" nArgs="2">
      <slice isRef="blocks">
        <originRef cRef="blocks_info" iRef="IBlocks"/>
        <visualDescription h="10" w="10" x="9" y="30"/>
      </slice>
      <slice isRef="cell">
        <originRef cRef="topology" iRef="ICell3D"/>
        <visualDescription h="10" w="10" x="39" y="32"/>
      </slice>
      <slice isRef="instance">
        <originRef cRef="instance" iRef="IInstance"/>
        <visualDescription h="10" w="10" x="65" y="29"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.topology.Mesh3D;&#xA;using common.topology.Ring;&#xA;using common.datapartition.BlocksInfo;&#xA;using common.datapartition.Blocks3D;&#xA;using common.problem_size.Class;&#xA;using sp.problem_size.Instance_SP;&#xA;&#xA;&#xA;namespace impl.common.datapartition.Blocks3DImpl { &#xA;&#xA;public abstract class BaseIBlocks3DImpl&lt;I, C>: br.ufc.pargo.hpe.kinds.Environment, BaseIBlocks3D&lt;I, C>&#xA;where I:IInstance_SP&lt;C>&#xA;where C:IClass&#xA;{&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;private I instance = default(I);&#xA;&#xA;protected I Instance {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (instance==null) &#xA;&#x9;&#x9;&#x9;instance = (I) Services.getPort(&quot;instance&quot;);&#xA;&#x9;&#x9;return instance;&#xA;&#x9;}&#xA;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;private ICell3D cell = null;&#xA;&#xA;protected ICell3D Cell {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.cell == null)&#xA;&#x9;&#x9;&#x9;this.cell = (ICell3D) Services.getPort(&quot;topology&quot;);&#xA;&#x9;&#x9;return this.cell;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICell z = null;&#xA;&#xA;public ICell Z {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.z == null)&#xA;&#x9;&#x9;&#x9;this.z = (ICell) Services.getPort(&quot;z&quot;);&#xA;&#x9;&#x9;return this.z;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICell x = null;&#xA;&#xA;public ICell X {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.x == null)&#xA;&#x9;&#x9;&#x9;this.x = (ICell) Services.getPort(&quot;x&quot;);&#xA;&#x9;&#x9;return this.x;&#xA;&#x9;}&#xA;}&#xA;&#xA;private ICell y = null;&#xA;&#xA;public ICell Y {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.y == null)&#xA;&#x9;&#x9;&#x9;this.y = (ICell) Services.getPort(&quot;y&quot;);&#xA;&#x9;&#x9;return this.y;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IBlocks blocks = null;&#xA;&#xA;public IBlocks Blocks {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.blocks == null)&#xA;&#x9;&#x9;&#x9;this.blocks = (IBlocks) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;return this.blocks;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIBlocks3DImpl.cs" srcType="base" uri="impl.common.datapartition.Blocks3DImpl/bin/1.0.0.0/BaseIBlocks3DImpl.dll" versionId="1.0.0.0">
          <dependency>common.topology.Mesh3D/bin/1.0.0.0/ICell.dll</dependency>
          <dependency>common.datapartition.BlocksInfo/bin/1.0.0.0/IBlocks.dll</dependency>
          <dependency>common.datapartition.Blocks3D/bin/1.0.0.0/BaseIBlocks3D.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.datapartition.Blocks3D;&#xA;using common.problem_size.Class;&#xA;using sp.problem_size.Instance_SP;&#xA;&#xA;namespace impl.common.datapartition.Blocks3DImpl { &#xA;&#xA;public class IBlocks3DImpl&lt;I, C> : BaseIBlocks3DImpl&lt;I, C>, IBlocks3D&lt;I, C>&#xA;where I:IInstance_SP&lt;C>&#xA;where C:IClass&#xA;{&#xA;&#xA;public IBlocks3DImpl() &#xA;{ &#xA;} &#xA;&#x9;&#x9;&#xA;protected int[] grid_points ;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;//---------------------------------------------------------------------&#xA;// This function allocates space for a set of cells and fills the set     &#xA;// such that communication between cells on different nodes is only&#xA;// nearest neighbor                                                   &#xA;//---------------------------------------------------------------------&#xA;public void make_set()&#xA;{&#xA;&#x9;int[,] cell_coord, cell_low, cell_high, cell_size, slice, start, end;&#xA;&#xA;    cell_coord = Blocks.cell_coord;&#xA;&#x9;cell_low = Blocks.cell_low;&#xA;&#x9;cell_high = Blocks.cell_high;&#xA;&#x9;cell_size = Blocks.cell_size;&#xA;&#x9;slice = Blocks.cell_slice;&#xA;&#x9;start = Blocks.cell_start;&#xA;&#x9;end = Blocks.cell_end;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;grid_points = new int[3];&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;int ncells;&#xA;&#x9;int total_nodes = this.Ranks.Length;&#xA;&#x9;int no_nodes = this.Ranks.Length;&#x9;&#xA;&#x9;int node = this.GlobalRank;&#x9;&#x9;&#x9;&#xA;&#x9;int maxcells =  Convert.ToInt32(Math.Sqrt(total_nodes));&#xA;&#x9;int problem_size = Instance.problem_size;&#xA;&#x9;&#x9;&#x9;&#xA;    int MAX_CELL_DIM = (problem_size/maxcells)+1; &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;grid_points[0] = grid_points[1] = grid_points[2] = MAX_CELL_DIM;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;// The official make_set start here ...&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;    int p, i, j, c, dir, size, excess;&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //     compute square root; add small number to allow for roundoff&#xA;    //     (note: this is computed in setup_mpi.f also, but prefer to do&#xA;    //     it twice because of some include file problems).&#xA;    //---------------------------------------------------------------------&#xA;    ncells = Convert.ToInt32(Math.Sqrt(no_nodes));&#xA;&#x9;Blocks.ncells = ncells;&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //      this makes coding easier&#xA;    //---------------------------------------------------------------------&#xA;    p = ncells;&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //      determine the location of the cell at the bottom of the 3D &#xA;    //      array of cells&#xA;    //---------------------------------------------------------------------&#xA;    cell_coord[0, 0] = mod(node, p);   //mod(node,p);&#xA;    cell_coord[0, 1] = node / p;&#xA;    cell_coord[0, 2] = 0;&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //      set the cell_coords for cells in the rest of the z-layers; &#xA;    //      this comes down to a simple linear numbering in the z-direct-&#xA;    //      ion, and to the doubly-cyclic numbering in the other dirs     &#xA;    //---------------------------------------------------------------------&#xA;    for (c = 1; c &lt; p; c++)&#xA;    {&#xA;        cell_coord[c, 0] = mod(cell_coord[c - 1, 0] + 1, p) ;                           // mod(cell_coord(1,c-1)+1,p);&#xA;        cell_coord[c, 1] = mod(cell_coord[c - 1, 1] - 1 + p, p) ;                           // mod(cell_coord(2,c-1)-1+p,p); &#xA;        cell_coord[c, 2] = c ;&#xA;    }&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //      slice(n,dir) contains the sequence number of the cell that is in&#xA;    //      coordinate plane n in the dir direction&#xA;    //---------------------------------------------------------------------&#xA;    for (dir = 0; dir &lt; 3; dir++)&#xA;    {&#xA;        for (c = 0; c &lt; p; c++)&#xA;        {&#xA;            slice[cell_coord[c, dir], dir] = c;&#xA;        }&#xA;    }&#xA;    &#xA;    //---------------------------------------------------------------------&#xA;    //      fill the predecessor and successor entries, using the indices &#xA;    //      of the bottom cells (they are the same at each level of k &#xA;    //      anyway) acting as if full periodicity pertains; note that p is&#xA;    //      added to those arguments to the mod functions that might&#xA;    //      otherwise return wrong values when using the modulo function&#xA;    //---------------------------------------------------------------------&#xA;    i = cell_coord[0, 0];&#xA;    j = cell_coord[0, 1];&#xA;&#xA;    Cell.X.predecessor = /* predecessor[0] = */ mod(i - 1 + p, p) + p * j;&#xA;    Cell.Y.predecessor = /* predecessor[1] = */ i + p * mod(j - 1 + p, p);&#xA;    Cell.Z.predecessor = /* predecessor[2] = */ mod(i + 1, p) + p * mod(j - 1 + p, p);&#xA;&#xA;    Cell.X.successor = /* successor[0] = */ mod(i + 1, p) + p * j;&#xA;    Cell.Y.successor = /* successor[1] = */ i + p * mod(j + 1, p);&#xA;    Cell.Z.successor = /* successor[2] = */ mod(i - 1 + p, p) + p * mod(j + 1, p);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;    //---------------------------------------------------------------------&#xA;    // now compute the sizes of the cells                                    &#xA;    //---------------------------------------------------------------------&#xA;    for (dir = 0; dir &lt; 3; dir++)&#xA;    {&#xA;        //---------------------------------------------------------------------&#xA;        //         set cell_coord range for each direction                            &#xA;        //---------------------------------------------------------------------&#xA;        size = grid_points[dir] / p;&#xA;        excess = mod(grid_points[dir], p);&#xA;&#xA;        for (c = 0; c &lt; ncells; c++)&#xA;        {&#xA;            if (cell_coord[c, dir] &lt; excess)&#xA;            {&#xA;                cell_size[c, dir] = size + 1;&#xA;                cell_low[c, dir] = (cell_coord[c, dir]) * (size + 1);&#xA;                cell_high[c, dir] = cell_low[c, dir] + size;&#xA;            }&#xA;            else&#xA;            {&#xA;                cell_size[c, dir] = size;&#xA;                cell_low[c, dir] = excess * (size + 1) + (cell_coord[c, dir] - excess) * size;&#xA;                cell_high[c, dir] = cell_low[c, dir] + size - 1;&#xA;            }&#xA;            if (cell_size[c, dir] &lt;= 2)&#xA;            {&#xA;                Console.WriteLine(&quot;Error: Cell size too small. Min size is 3&quot;);&#xA;              //  worldcomm.Abort(ierrcode); &#xA;                System.Environment.Exit(0);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#x9;&#x9;&#xA;private int mod(int a, int b)&#xA;{&#xA;    int r;&#xA;    Math.DivRem(a, b, out r);&#xA;    return r;&#xA;}&#xA;&#xA;&#xA;}&#xA;}&#xA;" fileType="library" name="IBlocks3DImpl.cs" srcType="user" uri="impl.common.datapartition.Blocks3DImpl/bin/1.0.0.0/IBlocks3DImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/impl.common.datapartition.Blocks3DImpl/bin/1.0.0.0/BaseIBlocks3DImpl.dll</dependency>
          <dependency>common.datapartition.Blocks3D/bin/1.0.0.0/IBlocks3D.dll</dependency>
        </file>
      </sources>
      <visualDescription h="63" w="115" x="274" y="109">
        <color b="0" g="128" r="255"/>
      </visualDescription>
      <port name="blocks">
        <visualDescription h="10" w="10" x="43" y="0"/>
        <slice pRef="blocks" sRef="blocks"/>
      </port>
      <port name="z">
        <visualDescription h="10" w="10" x="88" y="37"/>
        <slice pRef="z" sRef="cell"/>
      </port>
      <port name="x">
        <visualDescription h="10" w="10" x="79" y="2"/>
        <slice pRef="x" sRef="cell"/>
      </port>
      <port name="y">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="y" sRef="cell"/>
      </port>
      <parameter iname="IInstance_SP" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="IBlocks3DImpl" private="false" uRef="process" visibleInterface="true">
      <super cRef="base" uRef="process"/>
      <slices cRef="blocks_info" replica="0" uRef="blocks" sliceName="blocks" transitive="false">
        <visualDescription h="10" w="10" x="9" y="30"/>
      </slices>
      <slices cRef="x" replica="0" uRef="cell" sliceName="x" transitive="true">
        <visualDescription h="10" w="10" x="6" y="25"/>
      </slices>
      <slices cRef="y" replica="0" uRef="cell" sliceName="y" transitive="true">
        <visualDescription h="10" w="10" x="31" y="26"/>
      </slices>
      <slices cRef="z" replica="0" uRef="cell" sliceName="z" transitive="true">
        <visualDescription h="10" w="10" x="60" y="13"/>
      </slices>
      <slices cRef="topology" replica="0" uRef="cell" sliceName="cell" transitive="false">
        <visualDescription h="10" w="10" x="39" y="32"/>
        <port>x</port>
        <port>y</port>
        <port>z</port>
      </slices>
      <slices cRef="instance" replica="0" uRef="instance" sliceName="instance" transitive="false">
        <visualDescription h="10" w="10" x="65" y="29"/>
      </slices>
      <visualDescription h="47" w="94" x="134" y="160"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@b9c6cb1294972272571" varId="n">
      <originRef>base</originRef>
      <originRef>topology</originRef>
      <originRef>x</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="process"/>
      <visualDescription h="20" w="20" x="184" y="359"/>
    </enumerator>
  </componentInfo>
</component:component>