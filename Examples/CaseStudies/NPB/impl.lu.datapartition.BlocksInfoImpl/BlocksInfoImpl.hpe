<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000006d200b421f8e5aab50824e85ac6a2db921a2fd2c3119935fea0f075e81e9775d3aac7534924d53b5027596ffc8df91a732f2794bc094a821fbe256279a12112a07a105f906cfa2796c8c4c5469ad427a1bdf1acb4203854ddd4aab9f4f1ddabf5a09ec4ae956c356b2ac801db1bedde5efc643350b0c2676d5fe10f2d50d2487" isAbstract="false" kind="Environment" name="BlocksInfoImpl" packagePath="impl.lu.datapartition">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000f3194c0a7b197fb560dfcad8ee5b421b78f1f03d002a081027a334aa25ebf3ca7669300c0fd23f8f1547226d2833753b8583e09a6b1fcc393107abb8e8670fb2d48b48ea486fa7f94cb968f2760707e531b14426dedc94542dfdf89efcdf612aeabb738a4b713e0a7a9b3ee97b95d783693b746ddcce119ba7c5080176270d8a" localRef="base" location="lu.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="lu.datapartition" version="1.0.0.0">
        <visualDescription h="30" w="50" x="214" y="347">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <unitBounds uRef="blocks">
          <visualDescription h="10" w="10" x="18" y="4"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="IBlocksInfoImpl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.datapartition.BlocksInfo;&#xA;&#xA;namespace impl.lu.datapartition.BlocksInfoImpl { &#xA;&#x9;public abstract class BaseIBlocksInfoImpl: br.ufc.pargo.hpe.kinds.Environment, BaseIBlocksInfo {&#xA;&#x9;&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseIBlocksInfoImpl.cs" srcType="base" uri="impl.lu.datapartition.BlocksInfoImpl/bin/1.0.0.0/BaseIBlocksInfoImpl.dll" versionId="1.0.0.0">
          <dependency>lu.datapartition.BlocksInfo/bin/1.0.0.0/BaseIBlocksInfo.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.datapartition.BlocksInfo;&#xA;&#xA;namespace impl.lu.datapartition.BlocksInfoImpl { &#xA;&#x9;public class IBlocksInfoImpl : BaseIBlocksInfoImpl, IBlocksInfo {&#xA;&#x9;&#x9;public IBlocksInfoImpl() { &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#xA;//&#x9;&#x9;override public void initialize(){&#xA;//&#x9;&#x9;   &#xD;&#xA;//&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public void subDomain(){&#xA;            int mm;&#xA;            mm   = (int)mod(_nx0, _xdim);&#xA;            if(_row&lt;=mm) {&#xA;                _nx = _nx0/_xdim + 1;&#xA;                _ipt = (_row-1)*_nx;&#xA;            }&#xA;            else {&#xA;                _nx = _nx0/_xdim;&#xA;                _ipt = (_row-1)*_nx + mm;&#xA;            }&#xA;            mm   = (int)mod(_ny0, _ydim);&#xA;            if(_col&lt;=mm) {&#xA;                _ny = _ny0/_ydim + 1;&#xA;                _jpt = (_col-1)*_ny;&#xA;            }&#xA;            else {&#xA;                _ny = _ny0/_ydim;&#xA;                _jpt = (_col-1)*_ny + mm;&#xA;            }&#xA;            _nz = _nz0;&#xA;            &#xA;            //setCheck();&#xA;            &#xA;            if((_nx &lt; 4) || (_ny &lt; 4) || (_nz &lt; 4)) {&#xA;                Console.WriteLine(&quot;SUBDOMAIN SIZE IS TOO SMALL - ADJUST PROBLEM SIZE OR NUMBER OF PROCESSORS, &quot;+&#xA;                    &quot;SO THAT NX, NY AND NZ ARE GREATER THAN OR EQUAL TO 4 THEY ARE CURRENTLY: &quot;+_nx+&quot;x&quot;+_ny+&quot;x&quot;+_nz);&#xA;                //worldcomm.Abort(0);//CALL MPI_ABORT[ MPI_COMM_WORLD,ERRORCODE,IERROR ]&#xA;                //mpi.Dispose();&#xA;                throw new System.Exception(&quot;Check SUBDOMAIN SIZE&quot;);&#xA;            }&#xA;            setCheck();&#xA;            if((_nx > _isiz1) || (_ny > _isiz2) || (_nz > _isiz3)) {&#xA;                Console.WriteLine(&quot;SUBDOMAIN SIZE IS TOO LARGE - ADJUST PROBLEM SIZE OR NUMBER OF PROCESSORS&quot; +&#xA;                    &quot;SO THAT NX, NY AND NZ ARE LESS THAN OR EQUAL TO ISIZ1, ISIZ2 AND ISIZ3 RESPECTIVELY. THEY ARE CURRENTLY&quot;+&#xA;                    &quot; &quot;+_nx+&quot;x&quot;+_ny+&quot;x&quot;+_nz);&#xA;                //worldcomm.Abort(0);//CALL MPI_ABORT[ MPI_COMM_WORLD,ERRORCODE, IERROR ]&#xA;                //mpi.Dispose();&#xA;                throw new System.Exception(&quot;Check SUBDOMAIN SIZE&quot;);&#xA;            }&#xA;            _ist = 1;&#xA;            _iend = _nx;&#xA;            if(_north==-1)&#xA;                _ist = 2;&#xA;            if(_south==-1)&#xA;                _iend = _nx - 1;&#xA;            _jst = 1;&#xA;            _jend = _ny;&#xA;            if(_west==-1)&#xA;                _jst = 2;&#xA;            if(_east==-1)&#xA;                _jend = _ny - 1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private void setCheck(){&#xA;&#x9;&#x9;    int _num    = this.Ranks.Length;&#xA;            int ydiv = ilog2(_num) / 2;&#xA;            int xdiv = ydiv;&#xA;            if(xdiv + ydiv != ilog2(_num)) xdiv += 1;&#xA;            xdiv = ipow2(xdiv);&#xA;            ydiv = ipow2(ydiv);&#xA;            _isiz1 = _nx0 / xdiv;&#xA;            if(_isiz1 * xdiv &lt; _nx0) _isiz1++;&#xA;            _isiz2 = _nx0 / ydiv;&#xA;            if(_isiz2 * ydiv &lt; _nx0) _isiz2++;&#xD;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public static double mod(double a, double b) { return (a % b); }&#xA;        public static int ilog2(int i) {&#xA;            int log2, exp2 = 1;&#xA;            if(i &lt;= 0) return (-1);&#xA;            for(log2 = 0; log2 &lt; 20; log2++) {&#xA;                if(exp2 == i) return (log2);&#xA;                exp2 *= 2;&#xA;            }&#xA;            return (-1);&#xA;        }        &#xA;        public static int ipow2(int i) {&#xA;            int pow2 = 1;&#xA;            if(i &lt; 0) return (-1);&#xA;            if(i == 0) return (1);&#xA;            while(i-->0) pow2 *= 2;&#xA;            return (pow2);&#xA;        }&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected int _north, _south, _east, _west;&#xA;&#x9;&#x9;protected int _xdim, _ydim, _row, _col;&#xA;&#x9;&#x9;protected int _nx0, _ny0, _nz0;&#xA;&#x9;&#x9;protected int _nx, _ny, _nz, _ipt, _ist, _iend, _jpt, _jst, _jend;&#xA;&#x9;&#x9;protected int _isiz1, _isiz2, _isiz3;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int north      {get { return _north; } set { _north = value; } }&#xA;&#x9;&#x9;public int south      {get { return _south; } set { _south = value; } }&#xA;&#x9;&#x9;public int east      {get { return _east; } set { _east = value; } }&#xA;&#x9;&#x9;public int west      {get { return _west; } set { _west = value; } }&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;public int xdim      {get { return _xdim; } set { _xdim = value; } }&#xA;&#x9;&#x9;public int ydim      {get { return _ydim; } set { _ydim = value; } }&#xA;&#x9;&#x9;public int row       {get { return _row;  } set { _row  = value; } }&#xA;&#x9;&#x9;public int col       {get { return _col;  } set { _col  = value; } }    &#xA;&#x9;&#x9;    &#xA;&#x9;&#x9;public int nx0      {get { return _nx0;  } set { _nx0  = value; } }&#x9;&#xA;&#x9;&#x9;public int ny0      {get { return _ny0;  } set { _ny0  = value; } }&#xA;&#x9;&#x9;public int nz0      {get { return _nz0;  } set { _nz0  = value; } }&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;public int nx   { get { return _nx;   } }&#xA;&#x9;&#x9;public int ny   { get { return _ny;   } }&#xA;&#x9;&#x9;public int nz   { get { return _nz;   } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int ipt  { get { return _ipt;  } }&#xA;&#x9;&#x9;public int ist  { get { return _ist;  } }&#xA;&#x9;&#x9;public int iend { get { return _iend; } }&#xA;&#x9;&#x9;public int jpt  { get { return _jpt;  } }&#xA;&#x9;&#x9;public int jst  { get { return _jst;  } }&#xA;&#x9;&#x9;public int jend { get { return _jend; } }&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;public int isiz3 {get { return _isiz3;  } set { _isiz3  = value; } }&#x9;&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="IBlocksInfoImpl.cs" srcType="user" uri="impl.lu.datapartition.BlocksInfoImpl/bin/1.0.0.0/IBlocksInfoImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/impl.lu.datapartition.BlocksInfoImpl/bin/1.0.0.0/BaseIBlocksInfoImpl.dll</dependency>
          <dependency>lu.datapartition.BlocksInfo/bin/1.0.0.0/IBlocksInfo.dll</dependency>
        </file>
      </sources>
      <visualDescription h="50" w="113" x="176" y="98">
        <color b="64" g="128" r="255"/>
      </visualDescription>
    </interface>
    <unit iRef="IBlocksInfoImpl" private="false" uRef="blocks" visibleInterface="true">
      <super cRef="base" uRef="blocks"/>
      <visualDescription h="40" w="80" x="189" y="240"/>
    </unit>
  </componentInfo>
</component:component>