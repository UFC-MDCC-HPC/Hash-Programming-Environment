<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000006d05c82bff26ad72150a252c8c9742c86f6c62e6fe0cb696e223e19c0441a20a249526c60ee5553b2eddc609f73c569a23cfd334b51d25d1bd36d608dc901932e635a71bce017f93a1aabc8a129f65b9a7d3d384b42ae038d9d1006b984abdf11cc686520195bdac3acc399a24871f11885f37168f0ac04580fbce53d438e394" isAbstract="false" kind="Application" name="QuadratureAdaptative" packagePath="skeleton.impl.example">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000af7ec24fd4f6e14cd0e388fec025242e4d2a692d029d0542b6d2d6a3d912354187fb61fd4101e600154cc64959d21d45e6b324763f5e1dcfee01f0c5ce5e0220a30ced00b8758d94098e3df20bdc4d445b9f9e36a159f23fc7103a774f8d924857050681cae0c9d95536bda3bc5e034307af216ed5d4c7417de86991ca55c0a0" localRef="base" location="/skeleton.example.QuadratureAdaptative/QuadratureAdaptative.hpe" name="QuadratureAdaptative" package="skeleton.example" version="1.0.0.0">
        <visualDescription h="66" w="141" x="236" y="316">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="function" varName="F"/>
        <unitBounds uRef="root">
          <visualDescription h="10" w="10" x="12" y="29"/>
        </unitBounds>
        <unitBounds uRef="peers">
          <visualDescription h="10" w="10" x="120" y="28"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000001000100b9122f7d73f48b66cfa1e242e64e46991c09427f29a390f1e6a4ee903329b1fbefb192e13ca170c1008b7a87444077d4d38680bb5526cfb68afff47b924ad873cc488649c2cb7b5553b74ab30d3e55edc21b7c51e947d848b1f897c611e02055d6f8576e025cd578b39ccb93a4b6c9f492ae6d0fa2a848a2d6b6e9a08b651fec" localRef="my_function" location="/data.Function.TestingFunction/TestingFunction.hpe" name="TestingFunction" package="data.Function" exposed="false">
      <visualDescription h="41" w="77" x="64" y="155">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds uRef="testing_function">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="my_function" varName="F"/>
    <interface iRef="IRootImpl" nArgs="1">
      <slice isRef="manager">
        <originRef cRef="farm" iRef="IManager"/>
        <visualDescription h="10" w="10" x="56" y="21"/>
      </slice>
      <protocol xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@bdecb1" repeat="0" sliceRef="manager">
        <visualDescription h="50" w="50" x="75" y="75"/>
      </protocol>
      <sources sourceType="C# Executable" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using DGAC;&#xA;using hpe.basic;&#xA;using hpe.kinds;&#xA;using jefferson.data.Double;&#xA;using skeleton.Farm;&#xA;using data.IntegralCase;&#xA;using data.Function.TestingFunction;&#xA;using skeleton.Farm.Distribute.DistributeInterval;&#xA;using skeleton.Farm.Collect;&#xA;using environment.MPIDirect;&#xA;using skeleton.example.QuadratureAdaptative;&#xA;&#xA;namespace skeleton.impl.example.QuadratureAdaptative { &#xA;&#xA;public abstract class BaseIRootImpl&lt;F>: Application, IRoot&lt;F>&#xA;where F:ITestingFunction&#xA;{&#xA;&#xA;protected IDouble output_data = null;&#xA;&#xA;protected IDouble Output_data {&#xA;&#x9;set {&#xA;&#x9;&#x9;this.output_data = value;&#xA;&#x9;&#x9;manager.Output_data = value;&#xA;&#x9;}&#xA;}&#xA;&#xA;protected IManager&lt;IIntegralCase&lt;F>, IDistributeIntervalSend&lt;F, IIntegralCase&lt;F>>, IDouble, ICollect&lt;IDouble>> manager = null;&#xA;&#xA;protected IManager&lt;IIntegralCase&lt;F>, IDistributeIntervalSend&lt;F, IIntegralCase&lt;F>>, IDouble, ICollect&lt;IDouble>> Manager {&#xA;&#x9;set {&#xA;&#x9;&#x9;this.manager = value;&#xA;&#x9;}&#xA;}&#xA;&#xA;protected IIntegralCase&lt;F> input_data = null;&#xA;&#xA;protected IIntegralCase&lt;F> Input_data {&#xA;&#x9;set {&#xA;&#x9;&#x9;this.input_data = value;&#xA;&#x9;&#x9;manager.Input_data = value;&#xA;&#x9;}&#xA;}&#xA;&#xA;protected IMPIDirect mpi = null;&#xA;&#xA;protected IMPIDirect Mpi {&#xA;&#x9;set {&#xA;&#x9;&#x9;this.mpi = value;&#xA;&#x9;&#x9;manager.Mpi = value;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;public BaseIRootImpl() { &#xA;&#xA;} &#xA;&#xA;public static string UID = &quot;00240000048000009400000006020000002400005253413100040000110000006d05c82bff26ad72150a252c8c9742c86f6c62e6fe0cb696e223e19c0441a20a249526c60ee5553b2eddc609f73c569a23cfd334b51d25d1bd36d608dc901932e635a71bce017f93a1aabc8a129f65b9a7d3d384b42ae038d9d1006b984abdf11cc686520195bdac3acc399a24871f11885f37168f0ac04580fbce53d438e394&quot;;&#xA;&#xA;override public void createSlices() {&#xA;&#x9;base.createSlices();&#xA;&#x9;this.Manager = (IManager&lt;IIntegralCase&lt;F>, IDistributeIntervalSend&lt;F, IIntegralCase&lt;F>>, IDouble, ICollect&lt;IDouble>>) BackEnd.createSlice(this, UID,&quot;farm&quot;,&quot;manager&quot;,new Type[] {typeof(IIntegralCase&lt;F>),typeof( IDistributeIntervalSend&lt;F, IIntegralCase&lt;F>>),typeof( IDouble),typeof(ICollect&lt;IDouble>)});&#xA;&#x9;this.Mpi = (IMPIDirect) BackEnd.createSlice(this, UID,&quot;mpi&quot;,&quot;mpi&quot;,new Type[] {});&#xA;&#x9;this.Input_data = (IIntegralCase&lt;F>) BackEnd.createSlice(this, UID,&quot;data_source&quot;,&quot;integral_case&quot;,new Type[] {typeof(F)});&#xA;&#x9;this.Output_data = (IDouble) BackEnd.createSlice(this, UID,&quot;data_target&quot;,&quot;double&quot;,new Type[] {});&#xA;} &#xA;&#xA;abstract public void compute(); &#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIRootImpl.cs" srcType="base" uri="/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/BaseIRootImpl.dll" versionId="1.0.0.0">
          <dependency>jefferson.data.Double/bin/1.0.0.0/IDouble.dll</dependency>
          <dependency>skeleton.Farm/bin/1.0.0.0/IManager.dll</dependency>
          <dependency>data.IntegralCase/bin/1.0.0.0/IIntegralCase.dll</dependency>
          <dependency>data.Function.TestingFunction/bin/1.0.0.0/ITestingFunction.dll</dependency>
          <dependency>skeleton.Farm.Distribute.DistributeInterval/bin/1.0.0.0/IDistributeIntervalSend.dll</dependency>
          <dependency>skeleton.Farm.Collect/bin/1.0.0.0/ICollect.dll</dependency>
          <dependency>environment.MPIDirect/bin/1.0.0.0/IMPIDirect.dll</dependency>
          <dependency>skeleton.example.QuadratureAdaptative/bin/1.0.0.0/IRoot.dll</dependency>
        </file>
        <file contents="using System;&#xA;using DGAC;&#xA;using hpe.basic;&#xA;using hpe.kinds;&#xA;using data.Function.TestingFunction;&#xA;&#xA;namespace skeleton.impl.example.QuadratureAdaptative { &#xA;&#xA;public class IRootImpl&lt;F> : BaseIRootImpl&lt;F>&#xA;where F:ITestingFunction&#xA;{&#xA;&#xA;public IRootImpl() { &#xA;&#xA;} &#xA;&#xA;public override void compute() { &#xA;&#x9;&#x9;&#xA;&#x9;input_data.a = 0.0; &#xA;&#x9;input_data.b = 1.0;&#xA;&#x9;&#xA;&#x9;Console.WriteLine(&quot;MANAGER - STARTING ADAPTATIVE QUADRATURE&quot;);&#xA;&#x9;&#xA;&#x9;manager.compute();&#xA;&#x9;&#xA;&#x9;Console.WriteLine(&quot;RESULT = &quot; + output_data.Value);&#xA;&#x9;&#xA;&#x9;Console.WriteLine(&quot;WORKER - FINISH ADAPTATIVE QUADRATURE&quot;);&#xA;&#xA;} // end activate method &#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="IRootImpl.cs" srcType="user" uri="/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/IRootImpl.dll" versionId="1.0.0.0">
          <dependency>data.Function.TestingFunction/bin/1.0.0.0/ITestingFunction.dll</dependency>
          <dependency>%WORKSPACE/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/BaseIRootImpl.dll</dependency>
        </file>
        <file contents="using DGAC;&#xA;using data.Function.TestingFunction;&#xA;&#xA;namespace skeleton.impl.example.QuadratureAdaptative { &#xA;&#xA;&#x9;public class IRootImplMain {&#xA;&#xA;&#x9;&#x9;static void Main(string [] args) {&#xA;&#xA;&#x9;&#x9;&#x9;IRootImpl&lt;ITestingFunction> root = new IRootImpl&lt;ITestingFunction>();&#xA;&#xA;&#x9;&#x9;&#x9;BackEnd.DGACInit(&quot;00240000048000009400000006020000002400005253413100040000110000006d05c82bff26ad72150a252c8c9742c86f6c62e6fe0cb696e223e19c0441a20a249526c60ee5553b2eddc609f73c569a23cfd334b51d25d1bd36d608dc901932e635a71bce017f93a1aabc8a129f65b9a7d3d384b42ae038d9d1006b984abdf11cc686520195bdac3acc399a24871f11885f37168f0ac04580fbce53d438e394&quot;,&quot;root&quot;,root,args);&#xA;&#x9;&#x9;&#x9;root.createSlices();&#xA;&#x9;&#x9;&#x9;root.compute();&#xA;&#x9;&#x9;&#x9;BackEnd.DGACFinalize();&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;}&#xA;" fileType="exe" name="IRootImplMain.cs" srcType="main" uri="/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/IRootImplMain.exe" versionId="1.0.0.0">
          <dependency>%WORKSPACE/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/IRootImpl.dll</dependency>
          <dependency>data.Function.TestingFunction/bin/1.0.0.0/ITestingFunction.dll</dependency>
        </file>
      </sources>
      <visualDescription h="58" w="127" x="202" y="83">
        <color b="255" g="0" r="0"/>
      </visualDescription>
      <port name="input_data">
        <visualDescription h="10" w="10" x="38" y="46"/>
        <slice pRef="input_data" sRef="manager"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="mpi" sRef="manager"/>
      </port>
      <port name="output_data">
        <visualDescription h="10" w="10" x="124" y="6"/>
        <slice pRef="output_data" sRef="manager"/>
      </port>
      <parameter iname="ITestingFunction" order="0" parid="F" uname="testing_function" varid="function"/>
    </interface>
    <interface iRef="IPeerImpl" nArgs="1">
      <slice isRef="worker">
        <originRef cRef="farm" iRef="IWorker"/>
        <visualDescription h="10" w="10" x="14" y="8"/>
      </slice>
      <protocol xsi:type="component:ActionActivateType" label="hPE.frontend.kinds.activate.model.protocol.HDoAction@9f1453" repeat="0" sliceRef="worker">
        <visualDescription h="50" w="50" x="75" y="75"/>
      </protocol>
      <sources sourceType="C# Executable" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using DGAC;&#xA;using hpe.basic;&#xA;using hpe.kinds;&#xA;using environment.MPIDirect;&#xA;using skeleton.Farm;&#xA;using jefferson.data.Double;&#xA;using skeleton.Farm.Collect;&#xA;using data.IntegralCase;&#xA;using data.Function.TestingFunction;&#xA;using skeleton.Farm.Distribute.DistributeInterval;&#xA;using skeleton.Farm.Work.ApproximateIntegral;&#xA;using skeleton.example.QuadratureAdaptative;&#xA;&#xA;namespace skeleton.impl.example.QuadratureAdaptative { &#xA;&#xA;public abstract class BaseIPeerImpl&lt;F>: Application, IPeer&lt;F>&#xA;where F:ITestingFunction&#xA;{&#xA;&#xA;protected IMPIDirect mpi = null;&#xA;&#xA;protected IMPIDirect Mpi {&#xA;&#x9;set {&#xA;&#x9;&#x9;this.mpi = value;&#xA;&#x9;&#x9;worker.Mpi = value;&#xA;&#x9;}&#xA;}&#xA;&#xA;protected IWorker&lt;IDouble, ISend&lt;IDouble>, IIntegralCase&lt;F>, IDistributeIntervalReceive&lt;F, IIntegralCase&lt;F>>, IApproximateIntegral&lt;F, IIntegralCase&lt;F>, IDouble>> worker = null;&#xA;&#xA;protected IWorker&lt;IDouble, ISend&lt;IDouble>, IIntegralCase&lt;F>, IDistributeIntervalReceive&lt;F, IIntegralCase&lt;F>>, IApproximateIntegral&lt;F, IIntegralCase&lt;F>, IDouble>> Worker {&#xA;&#x9;set {&#xA;&#x9;&#x9;this.worker = value;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;public BaseIPeerImpl() { &#xA;&#xA;} &#xA;&#xA;public static string UID = &quot;00240000048000009400000006020000002400005253413100040000110000006d05c82bff26ad72150a252c8c9742c86f6c62e6fe0cb696e223e19c0441a20a249526c60ee5553b2eddc609f73c569a23cfd334b51d25d1bd36d608dc901932e635a71bce017f93a1aabc8a129f65b9a7d3d384b42ae038d9d1006b984abdf11cc686520195bdac3acc399a24871f11885f37168f0ac04580fbce53d438e394&quot;;&#xA;&#xA;override public void createSlices() {&#xA;&#x9;base.createSlices();&#xA;&#x9;this.Worker = (IWorker&lt;IDouble, ISend&lt;IDouble>, IIntegralCase&lt;F>, IDistributeIntervalReceive&lt;F, IIntegralCase&lt;F>>, IApproximateIntegral&lt;F, IIntegralCase&lt;F>, IDouble>>) BackEnd.createSlice(this, UID,&quot;farm&quot;,&quot;worker&quot;,new Type[] {typeof(IDouble),typeof(ISend&lt;IDouble>),typeof( IIntegralCase&lt;F>),typeof( IDistributeIntervalReceive&lt;F, IIntegralCase&lt;F>>),typeof(IApproximateIntegral&lt;F, IIntegralCase&lt;F>, IDouble>)});&#xA;&#x9;this.Mpi = (IMPIDirect) BackEnd.createSlice(this, UID,&quot;mpi&quot;,&quot;mpi&quot;,new Type[] {});&#xA;} &#xA;&#xA;abstract public void compute(); &#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIPeerImpl.cs" srcType="base" uri="/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/BaseIPeerImpl.dll" versionId="1.0.0.0">
          <dependency>environment.MPIDirect/bin/1.0.0.0/IMPIDirect.dll</dependency>
          <dependency>skeleton.Farm/bin/1.0.0.0/IWorker.dll</dependency>
          <dependency>jefferson.data.Double/bin/1.0.0.0/IDouble.dll</dependency>
          <dependency>skeleton.Farm.Collect/bin/1.0.0.0/ISend.dll</dependency>
          <dependency>data.IntegralCase/bin/1.0.0.0/IIntegralCase.dll</dependency>
          <dependency>data.Function.TestingFunction/bin/1.0.0.0/ITestingFunction.dll</dependency>
          <dependency>skeleton.Farm.Distribute.DistributeInterval/bin/1.0.0.0/IDistributeIntervalReceive.dll</dependency>
          <dependency>skeleton.Farm.Work.ApproximateIntegral/bin/1.0.0.0/IApproximateIntegral.dll</dependency>
          <dependency>skeleton.example.QuadratureAdaptative/bin/1.0.0.0/IPeer.dll</dependency>
        </file>
        <file contents="using System;&#xA;using DGAC;&#xA;using hpe.basic;&#xA;using hpe.kinds;&#xA;using data.Function.TestingFunction;&#xA;&#xA;namespace skeleton.impl.example.QuadratureAdaptative { &#xA;&#xA;public class IPeerImpl&lt;F> : BaseIPeerImpl&lt;F>&#xA;where F:ITestingFunction&#xA;{&#xA;&#xA;public IPeerImpl() { &#xA;&#xA;} &#xA;&#xA;public override void compute() { &#xA;&#x9;worker.compute();&#xA;&#xA;} // end activate method &#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="IPeerImpl.cs" srcType="user" uri="/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/IPeerImpl.dll" versionId="1.0.0.0">
          <dependency>data.Function.TestingFunction/bin/1.0.0.0/ITestingFunction.dll</dependency>
          <dependency>%WORKSPACE/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/BaseIPeerImpl.dll</dependency>
        </file>
        <file contents="using DGAC;&#xA;using data.Function.TestingFunction;&#xA;&#xA;namespace skeleton.impl.example.QuadratureAdaptative { &#xA;&#xA;&#x9;public class IPeerImplMain {&#xA;&#xA;&#x9;&#x9;static void Main(string [] args) {&#xA;&#xA;&#x9;&#x9;&#x9;IPeerImpl&lt;ITestingFunction> peers = new IPeerImpl&lt;ITestingFunction>();&#xA;&#xA;&#x9;&#x9;&#x9;BackEnd.DGACInit(&quot;00240000048000009400000006020000002400005253413100040000110000006d05c82bff26ad72150a252c8c9742c86f6c62e6fe0cb696e223e19c0441a20a249526c60ee5553b2eddc609f73c569a23cfd334b51d25d1bd36d608dc901932e635a71bce017f93a1aabc8a129f65b9a7d3d384b42ae038d9d1006b984abdf11cc686520195bdac3acc399a24871f11885f37168f0ac04580fbce53d438e394&quot;,&quot;peers&quot;,peers,args);&#xA;&#x9;&#x9;&#x9;peers.createSlices();&#xA;&#x9;&#x9;&#x9;peers.compute();&#xA;&#x9;&#x9;&#x9;BackEnd.DGACFinalize();&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;}&#xA;" fileType="exe" name="IPeerImplMain.cs" srcType="main" uri="/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/IPeerImplMain.exe" versionId="1.0.0.0">
          <dependency>%WORKSPACE/skeleton.impl.example.QuadratureAdaptative/bin/1.0.0.0/IPeerImpl.dll</dependency>
          <dependency>data.Function.TestingFunction/bin/1.0.0.0/ITestingFunction.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="405" y="258">
        <color b="0" g="255" r="0"/>
      </visualDescription>
      <port name="mpi">
        <visualDescription h="10" w="10" x="58" y="5"/>
        <slice pRef="mpi" sRef="worker"/>
      </port>
      <parameter iname="ITestingFunction" order="0" parid="F" uname="testing_function" varid="function"/>
    </interface>
    <unit iRef="IRootImpl" private="false" uRef="root" visibleInterface="true">
      <super cRef="base" uRef="root"/>
      <slices cRef="farm" replica="0" uRef="manager" sliceName="manager" transitive="false">
        <visualDescription h="10" w="10" x="68" y="11"/>
      </slices>
      <visualDescription h="40" w="80" x="67" y="282"/>
    </unit>
    <unit iRef="IPeerImpl" private="false" uRef="peers" visibleInterface="true">
      <super cRef="base" uRef="peers"/>
      <slices cRef="farm" replica="0" uRef="worker" sliceName="worker" transitive="false">
        <visualDescription h="10" w="10" x="9" y="18"/>
      </slices>
      <visualDescription h="40" w="80" x="530" y="350"/>
    </unit>
    <enumerator cardinality="-1" fromSplit="false" ref="hPE.frontend.base.model.HReplicator@1c777361255142002310" varId="N">
      <originRef>base</originRef>
      <originRef>farm</originRef>
      <originRef>gather</originRef>
      <originRef>mpi</originRef>
      <visualDescription h="20" w="20" x="846" y="246"/>
    </enumerator>
    <enumerator cardinality="1" fromSplit="true" ref="hPE.frontend.base.model.HReplicator@164d36e1257018321109" varId="N2">
      <originRef>base</originRef>
      <originRef>farm</originRef>
      <originRef>gather</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="root"/>
      <visualDescription h="10" w="10" x="246" y="157"/>
    </enumerator>
    <enumerator cardinality="1" fromSplit="true" ref="hPE.frontend.base.model.HReplicator@16f756e1257018157359" varId="N1">
      <originRef>base</originRef>
      <originRef>farm</originRef>
      <originRef>scatter</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="root"/>
      <visualDescription h="10" w="10" x="231" y="137"/>
    </enumerator>
    <enumerator cardinality="-1" fromSplit="true" ref="hPE.frontend.base.model.HReplicator@a123fb1257018157359" varId="I">
      <originRef>base</originRef>
      <originRef>farm</originRef>
      <originRef>scatter</originRef>
      <links xsi:type="component:EnumerableUnitType" ref="peers"/>
      <visualDescription h="20" w="20" x="806" y="103"/>
    </enumerator>
  </componentInfo>
</component:component>