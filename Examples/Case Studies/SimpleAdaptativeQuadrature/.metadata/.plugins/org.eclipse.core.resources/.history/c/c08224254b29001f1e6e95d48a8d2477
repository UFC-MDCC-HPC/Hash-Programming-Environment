using System;
using DGAC;
using hpe.basic;
using hpe.kinds;
using data.Function;
using jefferson.data.Double;
using environment.MPIDirect;
using data.IntegralArea;
using skeleton.Farm;
using skeleton.Farm.Distribute.AQPartitionInterval;
using skeleton.Farm.Collect;
using skeleton.example.QuadratureAdaptative;

namespace skeleton.impl.example.QuadratureAdaptative { 

public class IRootImpl: Application, IRoot
{

private IFunction function = null;

private IFunction Function {
	set {
		this.function = value;
	//	manager.Function = value;
		data_input.Function = value;
	}
}

private IDouble xsup = null;

private IDouble Xsup {
	set {
		this.xsup = value;
	//	manager.Xsup = value;
		data_input.Xsup = value;
	}
}

private IDouble xinf = null;

private IDouble Xinf {
	set {
		this.xinf = value;
	//	manager.Xinf = value;
		data_input.Xinf = value;
	}
}

private IDouble data_output = null;

private IDouble Data_output {
	set {
		this.data_output = value;
		manager.Data_output = value;
	}
}

private IMPIDirect mpi = null;

private IMPIDirect Mpi {
	set {
		this.mpi = value;
		manager.Mpi = value;
	}
}

private IIntegralArea data_input = null;

private IIntegralArea Data_input {
	set {
		this.data_input = value;
		manager.Data_input = value;
	}
}

private IManager<IIntegralArea, IPartionIntervalDistribute<IIntegralArea>, IDouble, ICollect<IDouble>> manager = null;

private IManager<IIntegralArea, IPartionIntervalDistribute<IIntegralArea>, IDouble, ICollect<IDouble>> Manager {
	set {
		this.manager = value;
	}
}


public IRootImpl() { 

} 

public static string UID = "00240000048000009400000006020000002400005253413100040000110000006d05c82bff26ad72150a252c8c9742c86f6c62e6fe0cb696e223e19c0441a20a249526c60ee5553b2eddc609f73c569a23cfd334b51d25d1bd36d608dc901932e635a71bce017f93a1aabc8a129f65b9a7d3d384b42ae038d9d1006b984abdf11cc686520195bdac3acc399a24871f11885f37168f0ac04580fbce53d438e394";

override public void createSlices() {
	base.createSlices();
	this.Manager = (IManager<IIntegralArea, IPartionIntervalDistribute<IIntegralArea>, IDouble, ICollect<IDouble>>) BackEnd.createSlice(this, UID,"base","manager",new Type[] {typeof(IIntegralArea),typeof(IPartionIntervalDistribute<IIntegralArea>),typeof( IDouble),typeof(ICollect<IDouble>)});
	this.Data_input = (IIntegralArea) BackEnd.createSlice(this, UID,"data_source","integralarea",new Type[] {});
	this.Mpi = (IMPIDirect) BackEnd.createSlice(this, UID,"mpi","mpi",new Type[] {});
	this.Data_output = (IDouble) BackEnd.createSlice(this, UID,"data_target","data",new Type[] {});
	this.Xinf = (IDouble) BackEnd.createSlice(this, UID,"xinf","double",new Type[] {});
	this.Xsup = (IDouble) BackEnd.createSlice(this, UID,"xsup","double",new Type[] {});
	this.Function = (IFunction) BackEnd.createSlice(this, UID,"function","function",new Type[] {});
} 

private double f(double x) {
   return 2*x + 1;
}

public void compute() { 

        Console.WriteLine("BEGIN MANAGER COMPUTE !!!");

        this.xinf.Value = 0;
        this.xsup.Value = 1;
        this.function.function = f;


		manager.compute();

        Console.WriteLine("END MANAGER COMPUTE !!!");
		
		System.Console.Write("FINISH ADAPTATIVE QUADRATURE: " + this.data_output.Value);

} // end activate method 

}

}
