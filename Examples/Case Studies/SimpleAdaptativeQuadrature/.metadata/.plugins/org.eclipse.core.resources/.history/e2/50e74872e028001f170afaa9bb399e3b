using System;
using DGAC;
using hpe.basic;
using hpe.kinds;
using environment.MPIDirect;
using jefferson.data.Data;
using skeleton.Farm.Distribute;
using skeleton.Farm.Job;
using skeleton.Farm.Collect;
using skeleton.Farm;

namespace skeleton.impl.Farm { 

public class IWorkerImpl<O, Gs, I, Ss, J>: Computation, IWorker<O, Gs, I, Ss, J>
where O:IData
where Gs:ISend<O>
where I:IData
where Ss:IReceive<I>
where J:IJob<I, O>
{

private IMPIDirect mpi = null;

public IMPIDirect Mpi {
	set {
		this.mpi = value;
		receive.Mpi = value;
		send.Mpi = value;
	}
}

private O output_data = default(O);

private O Output_data {
	set {
		this.output_data = value;
		job.Output_data = value;
		send.Data = value;
	}
}

private I input_data = default(I);

private I Input_data {
	set {
		this.input_data = value;
		receive.Data = value;
		job.Input_data = value;
	}
}

private Ss receive = default(Ss);

private Ss Receive {
	set {
		this.receive = value;
	}
}

private J job = default(J);

private J Job {
	set {
		this.job = value;
	}
}

private Gs send = default(Gs);

private Gs Send {
	set {
		this.send = value;
	}
}


public IWorkerImpl() { 

} 

public static string UID = "0024000004800000940000000602000000240000525341310004000011000000a9bb3475ce895bfeb3d5c921eaafb222dced80f493b177e788ba2919ff74d68ea17a8f32bad33623c27fe52c7b5e468a7c814bc358cc197f49d0b2f777cddbdb925473d394659718e6d0055c8c0856f0b94b1739cdee73686f38f4a30e72c67f73f90d1a30c587b1f8941021fa23e6031c9a280a9b03c2d928b261ab69775ac8";

override public void createSlices() {
	base.createSlices();
	this.Receive = (Ss) BackEnd.createSlice(this, UID,"scatter","receive",new Type[] {typeof(I)});
	this.Job = (J) BackEnd.createSlice(this, UID,"job","job",new Type[] {typeof(I),typeof(O)});
//	this.Input_data = (I) BackEnd.createSlice(this, UID,"dataIn","data",new Type[] {});
	this.Input_data = (I) BackEnd.createSlice(this, UID,"data_worker_in","data",new Type[] {});
	this.Send = (Gs) BackEnd.createSlice(this, UID,"gather","send",new Type[] {typeof(O)});
//	this.Output_data = (O) BackEnd.createSlice(this, UID,"data_source","data",new Type[] {});
	this.Output_data = (O) BackEnd.createSlice(this, UID,"data_worker_out","data",new Type[] {});
} 

public void compute() { 

	receive.synchronize();
	job.compute();
	send.synchronize();

} // end activate method 

}

}
