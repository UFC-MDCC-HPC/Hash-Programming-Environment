/* Generated By:JavaCC: Do not edit this line. HCLParser.java */
package br.ufc.mdcc.hclc.parser;
import br.ufc.mdcc.hclc.symboltable.*;
public class HCLParser implements HCLParserConstants {

  final public Component Start() throws ParseException {
 Component component;
    component = absConfig();
    jj_consume_token(0);
                                      {if (true) return component;}
    throw new Error("Missing return statement in function");
  }

  final public Component absConfig() throws ParseException {
 Component component = new Component();Token kind_tk;Public_Component_list public_component_list;Inner_Component inner_comp=null;Inner_Component_list inner_comp_list = new Inner_Component_list();Unit_list unit_list = new Unit_list();Unit unit;
    kind_tk = kind();
                        component.setKind(kind_tk.image);component.setBeginLine(kind_tk.beginLine);component.setBeginColumn(kind_tk.beginColumn);
    public_component_list = header(component);
                                                                                                                                                                                            component.setPublic_component_list(public_component_list);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPUTATION:
      case DATA:
      case ARCHITECTURE:
      case ENVIRONMENT:
      case QUALIFIER:
      case SYNCHRONIZER:
      case APPLICATION:
      case ENUMERATOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      inner_comp = inner(public_component_list);
                                                                                                                                                                                                                                                                                                  inner_comp_list.add(inner_comp);
    }
                                                                                                                                                                                                                                                                                                                                       component.setInnercomplist(inner_comp_list);
    label_2:
    while (true) {
      unit = unit();
                                                                                                                                                                                                                                                                                                                                                                                                   unit_list.add(unit);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
                                                                                                                                                                                                                                                                                                                                                                                                                            component.setUnitlist(unit_list);{if (true) return component;}
    throw new Error("Missing return statement in function");
  }

  final public Public_Component_list header(Component component) throws ParseException {
 Token name;ParamType_list param_list=new ParamType_list();Extend name_extend=null;Public_Component_list public_component_list=new Public_Component_list();
    name = jj_consume_token(ID);
                   component.setName(name.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCURV:
      public_component_list = publicInnerS();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OSQUARE:
      param_list = paramTypeS();
                                                                                                                       component.setParamtypelist(param_list);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      name_extend = extend();
                                                                                                                                                                                           component.setName_base(name_extend);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                                                                                                                                                                                                                                       {if (true) return public_component_list;}
    throw new Error("Missing return statement in function");
  }

  final public ParamType paramType() throws ParseException {
 Token form_id;Token id;Config config;
    form_id = jj_consume_token(ID);
    jj_consume_token(SET);
    id = jj_consume_token(ID);
    jj_consume_token(COLON);
    config = cFunAppNoVar();
                                                                  {if (true) return new ParamType(id.image,form_id.image,config,form_id.beginLine,form_id.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Type cFunApp() throws ParseException {
 Config config;Token id_tk;
    if (jj_2_1(2)) {
      config = cFunAppNoVar();
                                 {if (true) return config;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id_tk = jj_consume_token(ID);
                      {if (true) return new VarType(id_tk.image,id_tk.beginLine,id_tk.beginColumn);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Config cFunAppNoVar() throws ParseException {
 Token id_tk;Type_list type_list=new Type_list();
    id_tk = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OSQUARE:
      type_list = cFunAppS();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                                            {if (true) return new Config (id_tk.image,type_list,id_tk.beginLine,id_tk.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Public_Component publicInner() throws ParseException {
 Token id_tk;
    id_tk = jj_consume_token(ID);
                    {if (true) return new Public_Component(id_tk.image,id_tk.beginLine,id_tk.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Inner_Component inner(Public_Component_list public_component_list) throws ParseException {
 Token id_tk;Token kind_tk;Type type;Public_Component_list public_inner_component_list = new Public_Component_list();
    kind_tk = kind();
    id_tk = jj_consume_token(ID);
                                   if ((kind_tk.specialToken==null) || (kind_tk.specialToken.kind != NEWLINE)) { {if (true) throw new ParseException("New line expected before kind of inner component in line "+id_tk.beginLine+" and column "+id_tk.beginColumn);}}
    jj_consume_token(COLON);
    type = cFunApp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCURV:
      public_inner_component_list = publicInnerS();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
                                                                                                                                                                                                                                                                                                                                   {if (true) return new Inner_Component(id_tk.image,type,public_component_list.indexOf(id_tk.image)!=-1 ? "public" : "private",kind_tk.image,public_inner_component_list,kind_tk.beginLine,kind_tk.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Unit unit() throws ParseException {
 Token unit_tk;Token id_tk;Slice_list slice_list = new Slice_list();Slice slice;
    unit_tk = jj_consume_token(UNIT);
                        if ((unit_tk.specialToken==null) || (unit_tk.specialToken.kind != NEWLINE)) {if (true) throw new ParseException("New line expected before <unit> token in line "+unit_tk.beginLine+" and column "+unit_tk.beginColumn);}
    id_tk = jj_consume_token(ID);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLICE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      slice = slice(id_tk.image);
                                                                                                                                                                                                                                                                            slice_list.add(slice);
    }
                                                                                                                                                                                                                                                                                                       {if (true) return new Unit(id_tk.image,slice_list,unit_tk.beginLine,unit_tk.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Slice slice(String unit) throws ParseException {
 Token slice_tk;Token id_tk;Token id_inner_tk;Token id_unit_inner_tk;
    slice_tk = jj_consume_token(SLICE);
                           if ((slice_tk.specialToken==null) || ((slice_tk.specialToken.kind != TABULATION) && (slice_tk.specialToken.kind != SPACE))) {{if (true) throw new ParseException("Tabulation or space expected before <slice> token in line "+slice_tk.beginLine+" and column "+slice_tk.beginColumn);}} if ((slice_tk.specialToken.specialToken==null) || (slice_tk.specialToken.specialToken.kind != NEWLINE)) { {if (true) throw new ParseException("New line expected before <slice> token in line "+slice_tk.beginLine+" and column "+slice_tk.beginColumn);} }
    id_tk = jj_consume_token(ID);
    jj_consume_token(FROM);
    id_inner_tk = jj_consume_token(ID);
    jj_consume_token(DOT);
    id_unit_inner_tk = jj_consume_token(ID);
{if (true) return new Slice(id_tk.image,id_inner_tk.image,id_unit_inner_tk.image,unit,slice_tk.beginLine,slice_tk.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Token kind() throws ParseException {
 Token kind_tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPUTATION:
      kind_tk = jj_consume_token(COMPUTATION);
                                    {if (true) return kind_tk;}
      break;
    case APPLICATION:
      kind_tk = jj_consume_token(APPLICATION);
                                    {if (true) return kind_tk;}
      break;
    case DATA:
      kind_tk = jj_consume_token(DATA);
                                    {if (true) return kind_tk;}
      break;
    case QUALIFIER:
      kind_tk = jj_consume_token(QUALIFIER);
                                    {if (true) return kind_tk;}
      break;
    case SYNCHRONIZER:
      kind_tk = jj_consume_token(SYNCHRONIZER);
                                    {if (true) return kind_tk;}
      break;
    case ARCHITECTURE:
      kind_tk = jj_consume_token(ARCHITECTURE);
                                    {if (true) return kind_tk;}
      break;
    case ENVIRONMENT:
      kind_tk = jj_consume_token(ENVIRONMENT);
                                    {if (true) return kind_tk;}
      break;
    case ENUMERATOR:
      kind_tk = jj_consume_token(ENUMERATOR);
                                    {if (true) return kind_tk;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Extend extend() throws ParseException {
 Token extend_tk;Config config;
    extend_tk = jj_consume_token(EXTENDS);
    config = cFunAppNoVar();
                                                   {if (true) return new Extend(config,extend_tk.beginLine,extend_tk.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public ParamType_list paramTypeS() throws ParseException {
 ParamType_list paramtype_list = new ParamType_list();ParamType param_type;
    jj_consume_token(OSQUARE);
    param_type = paramType();
                                          paramtype_list.add(param_type);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      param_type = paramTypeSRest();
                                                                                                         paramtype_list.add(param_type);
    }
    jj_consume_token(CSQUARE);
                                                                                                                                                       {if (true) return paramtype_list;}
    throw new Error("Missing return statement in function");
  }

  final public ParamType paramTypeSRest() throws ParseException {
 ParamType param_type;
    jj_consume_token(COMMA);
    param_type = paramType();
                                        {if (true) return param_type;}
    throw new Error("Missing return statement in function");
  }

  final public Type_list cFunAppS() throws ParseException {
 Type_list type_list= new Type_list();Type type;
    jj_consume_token(OSQUARE);
    type = cFunApp();
                                  type_list.add(type);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      type = cFunAppSRest();
                                                                              type_list.add(type);
    }
    jj_consume_token(CSQUARE);
                                                                                                                 {if (true) return type_list;}
    throw new Error("Missing return statement in function");
  }

  final public Type cFunAppSRest() throws ParseException {
 Type type;
    jj_consume_token(COMMA);
    type = cFunApp();
                                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Public_Component_list publicInnerS() throws ParseException {
 Public_Component_list public_component_list = new Public_Component_list();Public_Component public_component;
    jj_consume_token(OCURV);
    public_component = publicInner();
                                                public_component_list.add(public_component);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      public_component = publicInnerSRest();
                                                                                                                                    public_component_list.add(public_component);
    }
    jj_consume_token(CCURV);
                                                                                                                                                                                             {if (true) return public_component_list;}
    throw new Error("Missing return statement in function");
  }

  final public Public_Component publicInnerSRest() throws ParseException {
 Public_Component public_component;
    jj_consume_token(COMMA);
    public_component = publicInner();
                                                {if (true) return public_component;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(OSQUARE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public HCLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fe000,0x800,0x20,0x80,0x2,0x200000,0x80,0x20,0x200,0x1fe000,0x8,0x8,0x8,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HCLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HCLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HCLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HCLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HCLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HCLParser(HCLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HCLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                       }
